id: LOGIC-03
section: Editor Behavior & Logic
title: Implement Cut, Copy, Paste, Delete, and Drag-Move Logic
original_input_files:
  - wxwidgets/copybuffer.h
  - wxwidgets/copybuffer.cpp
  - wxwidgets/editor.h
  - wxwidgets/editor.cpp
  - wxwidgets/selection.h
  - wxwidgets/selection.cpp
  - wxwidgets/main_menubar.h # For context on how actions are triggered
  - wxwidgets/main_menubar.cpp # For context on how actions are triggered
  - wxwidgets/map_display.cpp # For context on drag-move initiation and paste preview
analyzed_input_files:
  - file_path: wxwidgets/copybuffer.h
    description: |
      Declares the `CopyBuffer` class. This class is responsible for managing an internal temporary `BaseMap`
      that stores deep copies of `Tile` objects (and their selected contents) during copy or cut operations.
      It defines the interface for `copy()`, `cut()`, `paste()`, `canPaste()`, and `clear()`.
      It also stores `copyPos`, the top-left reference position of the copied data.
  - file_path: wxwidgets/copybuffer.cpp
    description: |
      Implements the `CopyBuffer` class.
      - `copy()`: Iterates through the `Editor::selection`, deep copies selected tiles/items into its internal `BaseMap`.
      - `cut()`: Calls `copy()`, then creates an `Action` (via `Editor::actionQueue`) to delete the original selected elements from the map, making the operation undoable. This involves creating `Change` objects for the affected tiles.
      - `paste()`: Takes a target `Position`. Iterates tiles in its internal `BaseMap`, deep copies them, offsets their positions, and creates an `Action` to add/merge these into the target `Editor`'s map. Handles `Config::MERGE_PASTE` and can trigger auto-bordering.
  - file_path: wxwidgets/editor.h
    description: |
      Declares the `Editor` class. Relevant methods include:
      - `moveSelection(Position offset)`: Orchestrates moving selected elements.
      - `destroySelection()`: Handles deletion of selected elements.
      It holds references to `ActionQueue`, `Selection`, and `CopyBuffer`.
  - file_path: wxwidgets/editor.cpp
    description: |
      Implements `Editor` methods.
      - `moveSelection()`: Creates a `BatchAction`. It effectively performs a copy of the selection to a temporary buffer (likely using `CopyBuffer` logic), creates an `Action` to delete items from their original positions, calculates new positions, and then creates another `Action` to paste the items at the new positions. This entire sequence is one undoable step.
      - `destroySelection()`: Creates a `BatchAction` to delete all selected items/tiles from the map. It captures the state of affected tiles and their surroundings for undo and handles auto-bordering if enabled via `Config::BORDERIZE_DELETE`.
  - file_path: wxwidgets/selection.h
    description: |
      (Also analyzed for CORE-05, LOGIC-02) Declares the `Selection` class.
      It provides the set of currently selected `Tile` objects (`TileSet tiles`) that are the source for copy/cut operations and the target for delete/move operations.
  - file_path: wxwidgets/selection.cpp
    description: |
      (Also analyzed for CORE-05, LOGIC-02) Implements the `Selection` class.
      Its state (the `TileSet`) is read by `CopyBuffer` and `Editor` methods to determine what to act upon.
  - file_path: wxwidgets/main_menubar.h
    description: |
      (Also analyzed for DOCS-02) Declares `MainMenuBar` and `MenuBar::ActionID`. Relevant here as it defines ActionIDs like `CUT`, `COPY`, `PASTE`, `DELETE` which are connected to event handlers.
  - file_path: wxwidgets/main_menubar.cpp
    description: |
      (Also analyzed for DOCS-02) Implements `MainMenuBar`. Event handlers like `OnCut`, `OnCopy`, `OnPaste`, `OnDelete` (called from `MapCanvas` context menu) typically invoke methods on `g_gui`, which then delegate to the current `Editor` instance (e.g., `g_gui.DoCopy()` might call `editor->copybuffer.copy(...)`).
  - file_path: wxwidgets/map_display.cpp
    description: |
      (Also analyzed for LOGIC-02, FINAL-01) Implements `MapCanvas`.
      - `OnMouseActionRelease`: If dragging a selection (`dragging` flag is true and not `boundbox_selection`), it calculates the offset and calls `editor.moveSelection(offset)`.
      - `OnPaste` (menu event): Calls `g_gui.DoPaste()`, which likely sets a "pasting mode" in `MapCanvas` to show a preview.
      - `OnMouseActionClick`: If in "pasting mode", finalizes the paste by calling `editor.copybuffer.paste(...)`.
      - `OnDelete` (menu event): Calls `editor.destroySelection()`.
      This shows how UI interactions for move, paste preview, and delete are initiated.
dependencies:
  - BUILD-01                # CMake project setup
  - CORE-01                 # For Position, Item, Tile definitions
  - CORE-03                 # For Map data structure
  - CORE-04                 # For Action/History system (QUndoStack, QUndoCommand base)
  - CORE-05                 # For SelectionManager & ClipboardManager classes (whose logic is being implemented here)
  - LOGIC-01                # For EditorController, which will host these methods
  - LOGIC-02                # For Bounding-Box Selection (as a common way to populate selection)
  - UI-EVENT-MAPVIEW        # For MapView mouse events (initiating drag-move, paste location)
  - UI-MENUBAR-ACTIONS      # For Edit menu QActions (Cut, Copy, Paste, Delete)
current_functionality_summary: |
  - `CopyBuffer` (`copybuffer.h/cpp`): Manages an internal `BaseMap` to store deep copies of selected tiles/items for copy/cut operations. `copy()` populates this buffer from `Editor::selection`. `cut()` first calls `copy()`, then creates an `Action` to delete the originals. `paste()` creates an `Action` to place deep copies from the buffer onto the map at a target position, handling merging and auto-bordering.
  - `Editor` (`editor.h/cpp`):
    - `destroySelection()`: Creates an undoable `BatchAction` to remove selected elements and updates borders.
    - `moveSelection()`: Creates an undoable `BatchAction` that effectively copies the selection, deletes originals, and pastes at the new offset, managing border updates.
  - `Selection` (`selection.h/cpp`): Provides the set of selected tiles/items that are the source for copy/cut/move/delete.
  - `MainMenuBar` (`main_menubar.h/cpp`): UI event handlers for menu items (Cut, Copy, Paste, Delete) trigger these operations, usually via `g_gui` delegating to `Editor`.
  - `MapCanvas` (`map_display.h/cpp`): Initiates drag-move operations based on mouse gestures on a selection. Handles the visual preview aspect of pasting.
qt6_migration_steps: |-
  1.  **Ensure `ClipboardManager` and `SelectionManager` are established (from `CORE-05`):**
      -   `ClipboardManager` should have an internal representation for copied data (e.g., a list of `TileData` with relative positions) and methods `storeData(const QList<TileData>& data, const Position& refPos)` and `retrieveData() -> QList<TileData>`.
      -   `SelectionManager` should provide `getSelectedElementsForClipboard() -> QList<TileData>` and methods to clear/modify the actual selection on the map.

  2.  **Implement Logic in `EditorController` (from `LOGIC-01`):**
      -   **`void handleCopy()`:**
          -   `QList<TileData> selectedData = selectionManager->getSelectedElementsForClipboard(map);`
          -   `Position refPos = selectionManager->getSelectionBounds().topLeft();` (or similar reference)
          -   `clipboardManager->storeData(selectedData, refPos);`
          -   Update UI (e.g., enable Paste action).
      -   **`void handleDelete(const QString& commandText = "Delete Selection")`:** (Helper for Cut and Delete)
          -   `Create `DeleteCommand(map, selectionManager, commandText)` (a `QUndoCommand`).
          -   `DeleteCommand::redo()`: Stores data for selected elements (for undo), then removes them from `map` and `selectionManager`.
          -   `DeleteCommand::undo()`: Restores elements to `map` and `selectionManager`.
          -   Push to `undoStack`.
      -   **`void handleCut()`:**
          -   Call `handleCopy()`.
          -   Call `handleDelete("Cut")`.
      -   **`void handleStartPaste()`:**
          -   If `clipboardManager->hasData()`:
              -   Signal `MapView` to enter "pasting mode" and pass necessary preview data (e.g., `clipboardManager->retrieveData()` and `clipboardManager->getReferencePosition()`).
      -   **`void handleFinalizePaste(const Position& targetDropPos)`:**
          -   `QList<TileData> clipboardData = clipboardManager->retrieveData();`
          -   `Position originalRefPos = clipboardManager->getReferencePosition();`
          -   Create `PasteCommand(map, undoStack, targetDropPos, originalRefPos, clipboardData)`.
          -   `PasteCommand::redo()`: Calculates actual positions for each `TileData` based on `targetDropPos` and `originalRefPos`. Adds/merges tiles/items into the `map`. Stores data for undo (e.g., list of added tiles or previous state of modified tiles). Handles auto-bordering if applicable.
          -   `PasteCommand::undo()`: Removes/reverts pasted tiles/items.
          -   Push to `undoStack`.
          -   Signal `MapView` to exit "pasting mode".
      -   **`void handleMoveSelection(const Position& dragStartPos, const Position& dragEndPos)`:** (Triggered by `MapView` after drag)
          -   `Position offset = dragEndPos - dragStartPos;`
          -   If offset is zero, do nothing.
          -   Create `MoveCommand(map, selectionManager, undoStack, offset)`.
          -   `MoveCommand::redo()`:
              -   Internally, get `QList<TileData> selectedData = selectionManager->getSelectedElementsForClipboard(map);`
              -   Store data for undo (original positions of selected elements, and the elements themselves).
              -   Remove selected elements from their original positions on the `map`.
              -   Calculate new positions by applying `offset`.
              -   Add/merge the `selectedData` (now considered "movedData") to these new positions on the `map`.
              -   Update `selectionManager` to reflect the new positions of selected items.
          -   `MoveCommand::undo()`: Reverse the move.
          -   Push to `undoStack`.

  3.  **Update `MainWindow` (from `UI-01`, `UI-02`, `FINAL-03`):**
      -   Connect Edit menu `QAction`s (Cut, Copy, Paste, Delete) `triggered()` signals to the respective `EditorController` handler methods.
      -   Update enabled state of these actions based on `selectionManager->hasSelection()` and `clipboardManager->hasData()`.

  4.  **Update `MapView` (from `UI-EVENT-MAPVIEW`, `RENDER-01`, `LOGIC-02`):**
      -   **Visual Paste Preview:**
          -   Add state `bool m_isPastingMode; QList<TileData> m_pastePreviewData; Position m_pastePreviewRefPos;`.
          -   Method `startPastePreview(const QList<TileData>& data, const Position& refPos)` called by `EditorController`.
          -   `mouseMoveEvent`: If `m_isPastingMode`, update `m_currentMouseMapPos` and call `update()` for repaint.
          -   `paintEvent/paintGL`: If `m_isPastingMode`, render a ghosted preview of `m_pastePreviewData` at `m_currentMouseMapPos` (offset by `m_pastePreviewRefPos`).
          -   `mousePressEvent`: If `m_isPastingMode`, call `editorController->handleFinalizePaste(clickedMapPos)`. Set `m_isPastingMode = false;`.
      -   **Selection Drag-and-Move Visuals:**
          -   Add state `bool m_isDraggingSelection; Position m_dragAnchorMapPos; Position m_currentDragMapPos;`.
          -   `mousePressEvent`: If clicking on an existing selection (and not Shift-dragging for bounding box): `m_isDraggingSelection = true; m_dragAnchorMapPos = clickedMapPos;`.
          -   `mouseMoveEvent`: If `m_isDraggingSelection`, update `m_currentDragMapPos` and call `update()`.
          -   `paintEvent/paintGL`: If `m_isDraggingSelection`, get current selection. Draw a ghosted preview of selected elements translated by `m_currentDragMapPos - m_dragAnchorMapPos`.
          -   `mouseReleaseEvent`: If `m_isDraggingSelection`, set `m_isDraggingSelection = false`. Calculate `Position offset = m_currentDragMapPos - m_dragAnchorMapPos`. If offset is non-zero, call `editorController->handleMoveSelection(m_dragAnchorMapPos, m_currentDragMapPos)` (or just the offset).
definition_of_done: |
  - Cut, Copy, Paste, and Delete operations are fully functional via Edit menu actions and/or keyboard shortcuts.
  -   "Copy" populates an internal clipboard (`ClipboardManager`) with the selected map elements.
  -   "Cut" copies to clipboard and then creates an undoable command to delete the selection from the map.
  -   "Paste" initiates a visual preview mode in `MapView`; a subsequent click finalizes the paste as an undoable command, correctly handling offsets and merging/replacing tiles as per settings.
  -   "Delete" (e.g., from context menu or Del key) removes the current selection via an undoable command.
  - Drag-and-move of an existing selection is implemented:
    -   `MapView` provides visual feedback (ghosted preview) of the selection being dragged.
    -   Releasing the mouse finalizes the move, implemented as an undoable command (likely a conceptual copy, delete original, paste to new location).
  - All these operations are correctly integrated with the `QUndoStack` from `CORE-04`.
  - UI actions (menu items, toolbar buttons) are enabled/disabled appropriately based on selection state and clipboard content.
boilerplate_coder_ai_prompt: |
  Implement Cut, Copy, Paste, Delete, and drag-and-move logic for map elements. This involves `EditorController` methods that use `SelectionManager`, `ClipboardManager`, and `QUndoStack` (all from `mapcore`, assumed to be available via `AppContext`). `MapView` will handle UI interaction and visual previews.

  **1. `EditorController` Methods:**
     -   `void handleCopy()`:
         -   `QList<TileData> data = appContext.selectionManager().getSelectedElementsForClipboard(appContext.map());`
         -   `Position refPos = appContext.selectionManager().getSelectionBounds().topLeft();`
         -   `appContext.clipboardManager().storeData(data, refPos);`
     -   `void handleDeleteSelection(const QString& commandText)`:
         -   `DeleteCommand* cmd = new DeleteCommand(appContext.map(), appContext.selectionManager(), commandText);`
         -   `appContext.undoStack().push(cmd);`
     -   `void handleCut()`: Calls `handleCopy()`, then `handleDeleteSelection("Cut Selection")`.
     -   `void handleStartPaste()`: If `clipboardManager.hasData()`, signals `MapView` to enter paste preview mode, providing data.
     -   `void handleFinalizePaste(const Position& targetDropPos)`:
         -   `PasteCommand* cmd = new PasteCommand(appContext.map(), appContext.selectionManager(), appContext.clipboardManager(), targetDropPos);`
         -   `appContext.undoStack().push(cmd);`
         -   Signals `MapView` to exit paste preview mode.
     -   `void handleMoveSelection(const Position& dragStartPos, const Position& currentPos)`:
         -   `Position offset = currentPos - dragStartPos; if (offset == Position(0,0,0)) return;`
         -   `MoveCommand* cmd = new MoveCommand(appContext.map(), appContext.selectionManager(), offset);`
         -   `appContext.undoStack().push(cmd);`

  **2. `QUndoCommand` Subclasses (in `mapcore` or `editor` logic):**
     -   `DeleteCommand(Map* map, SelectionManager* selMgr, ...)`:
         -   `redo()`: Stores copies of selected elements, then removes them from `map` and `selMgr`.
         -   `undo()`: Restores elements to `map` and `selMgr`.
     -   `PasteCommand(Map* map, SelectionManager* selMgr, ClipboardManager* clipMgr, Position target, ...)`:
         -   `redo()`: Retrieves data from `clipMgr`. Adds/merges to `map` at `target`. Stores info for undo. Updates `selMgr` to select pasted items.
         -   `undo()`: Removes pasted items. Restores previous selection.
     -   `MoveCommand(Map* map, SelectionManager* selMgr, Position offset, ...)`:
         -   `redo()`: Stores original state/positions of selected items. Deletes them from old positions. Adds them at new (offset) positions. Updates `selMgr`.
         -   `undo()`: Moves items back to original positions. Restores original selection.

  **3. `MapView` Updates (UI layer):**
     -   Implement `m_isPastingMode`, `m_pastePreviewData`, `m_pastePreviewRefPos` for paste preview.
     -   Implement `m_isDraggingSelection`, `m_dragAnchorMapPos`, `m_currentDragMapPos` for drag-move.
     -   `mousePressEvent`, `mouseMoveEvent`, `mouseReleaseEvent` to manage these states and call `EditorController` methods.
     -   `paintEvent` to draw ghost previews based on these states.

  **4. `MainWindow` Connections:**
     -   Connect Edit menu `QAction`s (`Cut`, `Copy`, `Paste`, `Delete`) to `EditorController` handlers.
     -   Dynamically update enabled state of these actions.
documentation_references:
  - "QUndoStack & QUndoCommand: https://doc.qt.io/qt-6/qundostack.html"
  - "QClipboard & QMimeData: https://doc.qt.io/qt-6/qclipboard.html"
  - "Drag and Drop (for visual previews in MapView): https://doc.qt.io/qt-6/dnd.html"
  - "QPainter (for drawing previews): https://doc.qt.io/qt-6/qpainter.html"
