id: BRUSH-LOGIC-Carpet
section: Editor Behavior & Logic
title: Port Carpet Brush Logic
original_input_files:
  - wxwidgets/carpet_brush.cpp
  - wxwidgets/carpet_brush.h
analyzed_input_files:
  - file_path: wxwidgets/carpet_brush.h
    description: Defines 'CarpetBrush' class, inheriting from 'Brush'. Includes structures for 'CarpetType' (item ID and chance) and 'CarpetNode' to manage item variations for different alignments.
  - file_path: wxwidgets/carpet_brush.cpp
    description: Implements 'CarpetBrush'. Handles loading definitions from XML, including different item variations for various alignments (center, cardinal directions, corners, diagonals). The 'doCarpets' method calculates and applies the correct carpet piece based on adjacent carpet pieces. Supports layering.
dependencies:
  - CORE-BRUSH-FRAMEWORK # For mapcore::Brush base class and BrushSettings
  - CORE-01              # For mapcore::Tile, mapcore::Position
  - CORE-02              # For mapcore::ItemManager (to get ItemType for carpet items)
  - LOGIC-01             # For EditorController (brushes are applied via controller)
  - CORE-04              # For Action/History system (brush strokes are undoable)
current_functionality_summary: |
  The 'CarpetBrush' is used to draw carpet items. It reads definitions from XML,
  including item variations for different alignments (center, cardinal, corners, diagonals).
  Its core logic ('doCarpets') determines the correct carpet piece to place based on
  neighboring carpet pieces, and supports layering if enabled.
qt6_migration_steps: |
  1. Define `mapcore::CarpetBrush` class inheriting from `mapcore::Brush`.
  2. Port constructor to load carpet definitions (item IDs, chances, alignment rules) from the material/brush XML data (via `MaterialManager` or similar service from `CORE-14-MaterialSystem`).
  3. Implement `canApply(const Map* map, const Position& pos, const BrushSettings& settings) const` to check if carpet can be placed.
  4. Implement `apply(EditorControllerInterface* controller, const Position& pos, const BrushSettings& settings)`:
     - Determine the target tile.
     - Implement the 'doCarpets' logic: analyze neighboring tiles to select the correct carpet item ID based on alignment rules (center, N, S, E, W, NW, NE, SW, SE, diagonals).
     - Consider carpet layering settings.
     - Create a `Change` object (or data for a `QUndoCommand`) representing the tile modification (new carpet item added).
     - The `EditorController` will wrap this in a proper `QUndoCommand`.
  5. Ensure brush respects `BrushSettings` (e.g., erase mode).
definition_of_done: |
  - `mapcore::CarpetBrush` class is implemented and functional.
  - Carpet brush definitions are correctly loaded from XML data.
  - Applying the CarpetBrush to the map correctly places carpet items based on alignment with adjacent carpet tiles.
  - Carpet layering logic is correctly implemented if specified by settings.
  - Operations are undoable via the action system.
  - Unit tests for `CarpetBrush` logic (especially alignment calculations for `doCarpets`) are created and pass.
boilerplate_coder_ai_prompt: |
  Port the `CarpetBrush` logic from `wxwidgets/carpet_brush.cpp` and `wxwidgets/carpet_brush.h` to a new `mapcore::CarpetBrush` class in Qt6/C++.

  1.  **`CarpetBrush.h` (in `mapcore/brushes/`):**
      -   Define `CarpetBrush : public mapcore::Brush`.
      -   Declare members to store carpet item IDs/chances for different alignments (center, N, E, S, W, corners, diagonals) loaded from XML.
      -   Override virtual methods: `QString getName() const override;`, `void apply(EditorControllerInterface* controller, const Position& pos, const BrushSettings& settings) override;`, `bool canApply(const Map* map, const Position& pos, const BrushSettings& settings) const override;`.
  2.  **`CarpetBrush.cpp` (in `mapcore/brushes/`):**
      -   Implement constructor: Load carpet definitions (item IDs for alignments) from `MaterialManager` (passed or accessible via service).
      -   Implement `getName()` to return "Carpet Brush" or similar.
      -   Implement `canApply()`.
      -   Implement `apply()`:
          -   Get the target `mapcore::Tile*` from the `controller`'s map.
          -   Implement the 'doCarpets' logic: Check adjacent tiles to determine the alignment. Select the appropriate carpet item ID based on this alignment and the loaded definitions.
          -   If erasing, remove existing carpet items.
          -   If drawing, create the new carpet `mapcore::Item`.
          -   Use `controller->addChange(new TileChange(tilePos, oldTileCopy, newTileCopy))` or equivalent to record the modification for undo/redo.
  3.  Ensure the brush considers settings like layering from `BrushSettings` or global `AppSettings`.
  4.  Focus on porting the core item selection logic based on neighbors.
documentation_references:
  - "mapcore::Brush class (from CORE-BRUSH-FRAMEWORK)"
  - "mapcore::Tile, mapcore::Item, mapcore::Position (from CORE-01)"
  - "Qt Core data types (QString, QList, etc.)"
estimation_effort: Large
