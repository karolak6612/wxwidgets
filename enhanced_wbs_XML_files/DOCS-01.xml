<?xml version="1.0" ?>
<DOCS-01>
  <id>DOCS-01</id>
  <section>Build, Deployment, &amp; Documentation</section>
  <title>Generate Developer API Documentation (Doxygen)</title>
  <original_input_files>
    <original_input_file>The complete source code of the `mapcore` library (headers and .cpp files developed through tasks CORE-01 to CORE-05 and potentially others defining the library's API).</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>mapcore library source</file_path>
      <description>The primary input for this task is the entire C++ source code (primarily header files, but also implementation files for context) of the `mapcore` library as developed and refined in preceding CORE-series WBS items (CORE-01 through CORE-05, and any other relevant tasks defining the library's public API).
This is not a single file to be read but rather the body of code that requires API documentation.
The task involves:
1. Setting up Doxygen.
2. Writing Doxygen-compatible comments (JavaDoc style with `@brief`, `@param`, `@return`, etc.) for all public classes, methods, enums, and member variables within the `mapcore` headers.
3. Configuring Doxygen to parse these comments and source files to generate comprehensive API documentation.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>CORE-03</dependencie>
    <dependencie>CORE-04</dependencie>
    <dependencie>CORE-05</dependencie>
  </dependencies>
  <current_functionality_summary>Currently, there is no formal developer API documentation or an automated generation system for the `mapcore` library (or the legacy codebase).
This task aims to implement Doxygen to parse the `mapcore` source code (specifically well-commented headers) and generate comprehensive HTML API documentation.
This will help developers understand how to use the `mapcore` library, its classes, methods, and data structures.
</current_functionality_summary>
  <qt6_migration_steps>1. **Install Doxygen and Graphviz:**
   - Ensure Doxygen (documentation generator) and Graphviz (for generating diagrams like class hierarchies, call graphs via `dot` tool) are installed in the development/build environment.
2. **Create Doxygen Configuration File (`Doxyfile`):**
   - Generate a default `Doxyfile` using `doxygen -g Doxyfile` in the project root or a dedicated `docs/mapcore_api/` directory.
3. **Configure `Doxyfile` for `mapcore`:**
   - `PROJECT_NAME`: Set to &quot;RME Map Core Library&quot; or similar.
   - `PROJECT_VERSION`: Link to the project version from CMake if possible, or set manually.
   - `OUTPUT_DIRECTORY`: e.g., `build/docs/mapcore_api`.
   - `INPUT`: Specify the path(s) to the `mapcore` source directories (e.g., `../../src/mapcore/`).
   - `RECURSIVE`: Set to `YES`.
   - `EXTRACT_ALL`: Set to `YES` to document all entities.
   - `EXTRACT_PRIVATE`: Consider setting to `NO` for public API docs, or `YES` for full internal docs.
   - `EXTRACT_STATIC`: Set to `YES`.
   - `JAVADOC_AUTOBRIEF`: Set to `YES`.
   - `QT_AUTOBRIEF`: Set to `YES` if using Qt-style comments in some places.
   - `HAVE_DOT`: Set to `YES` (if Graphviz is installed).
   - `CLASS_DIAGRAMS`: Set to `YES`.
   - `CALL_GRAPHS` / `CALLER_GRAPHS`: Enable if desired.
   - `GENERATE_HTML`: Set to `YES`.
   - `HTML_OUTPUT`: Set to `html` (relative to `OUTPUT_DIRECTORY`).
   - Configure other options like `WARN_IF_UNDOCUMENTED`, `WARN_LOGFILE` as needed.
4. **Add Doxygen Comments to `mapcore` Code:**
   - Review all header files (`.h`, `.hpp`) in the `mapcore` library.
   - Add Doxygen-style comments (e.g., Javadoc `/** ... */` or Qt `/*! ... */`) to:
     - All public and protected classes.
     - All public and protected methods (documenting purpose, parameters, return values, exceptions).
     - All public and protected member variables.
     - Enums and their values.
     - Namespaces.
   - Use commands like `@brief`, `@param name description`, `@return description`, `@note`, `@see`, `@file`.
5. **Integrate Doxygen with CMake (`CMakeLists.txt`):**
   - Use `find_package(Doxygen REQUIRED dot)` to locate Doxygen and the `dot` executable.
   - Add a custom target for generating the documentation (e.g., `docs_mapcore`).
     ```cmake
     add_custom_target(docs_mapcore ALL
         COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}/docs/mapcore_api/Doxyfile # Path to Doxyfile
         WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/docs/mapcore_api # Directory containing Doxyfile
         COMMENT &quot;Generating mapcore API documentation with Doxygen&quot;
         VERBATIM
     )
     ```
   - Consider adding this target to an &quot;all_docs&quot; target if multiple documentation sets are planned.
6. **Build and Verify Documentation:**
   - Run the CMake Doxygen target (e.g., `cmake --build . --target docs_mapcore`).
   - Open the generated HTML documentation (e.g., `build/docs/mapcore_api/html/index.html`) and verify its completeness, accuracy, and formatting. Check diagrams.</qt6_migration_steps>
  <definition_of_done>Developer API documentation for the `mapcore` library is successfully generated using Doxygen and integrated into the CMake build process.
Key requirements:
- A `Doxyfile` is correctly configured for the `mapcore` library, specifying input source directories, output directory, and desired Doxygen features (HTML generation, class diagrams via dot).
- All public and protected classes, methods, enums, and member variables in the `mapcore` library's header files are documented using Doxygen-compatible comment styles.
- The CMake build system includes a dedicated target (e.g., `docs_mapcore`) that executes Doxygen to generate the API documentation.
- Running this CMake target successfully produces well-formatted HTML documentation in the specified output directory.
- The generated documentation is comprehensive, accurately reflecting the `mapcore` API, and includes class diagrams and other requested graphical elements.
- Instructions for developers on how to generate the documentation (e.g., by running the CMake target) are available.</definition_of_done>
  <boilerplate_coder_ai_prompt>Your task is to set up Doxygen API documentation for the `mapcore` C++ static library. The source code for `mapcore` (headers and implementation files) is assumed to be available and contains classes related to map elements, data structures, and core utilities.

1.  **Install Tools:** Ensure Doxygen and Graphviz (for `dot` executable) are available in your environment.
2.  **Create `Doxyfile`:**
    -   Generate a Doxyfile (e.g., in `docs/mapcore_api/Doxyfile` relative to the project root).
    -   Configure it with:
        -   `PROJECT_NAME = &quot;RME Map Core Library&quot;`
        -   `INPUT = ../../src/mapcore` (adjust path to point to `mapcore` headers and sources relative to Doxyfile location)
        -   `OUTPUT_DIRECTORY = ../../build/docs/mapcore_api` (adjust path)
        -   `RECURSIVE = YES`
        -   `EXTRACT_ALL = YES`
        -   `EXTRACT_PRIVATE = NO` (for public API docs, or YES for internal)
        -   `HAVE_DOT = YES`
        -   `CLASS_DIAGRAMS = YES`
        -   `GENERATE_HTML = YES`
        -   `JAVADOC_AUTOBRIEF = YES`
        -   `QT_AUTOBRIEF = YES`
3.  **Add Doxygen Comments:**
    -   Go through all public header files (`.h`, `.hpp`) in the `mapcore` library.
    -   Add Doxygen comments (JavaDoc style: `/** ... */` or Qt style: `/*! ... */`) to all public/protected classes, methods, enums, and member variables.
    -   For methods, document `@brief` description, `@param` for each parameter, and `@return` for the return value.
    -   Example:
        ```cpp
        /**
         * @brief Represents a 3D position on the map.
         * Stores x, y, and z coordinates.
         */
        class Position {
        public:
            /**
             * @brief Constructs a Position object.
             * @param x The x-coordinate.
             * @param y The y-coordinate.
             * @param z The z-coordinate (floor level).
             */
            Position(int x, int y, int z);
            // ... other members ...
        };
        ```
4.  **CMake Integration:**
    -   In your main `CMakeLists.txt` (or an appropriate submodule CMake file):
        -   Add `find_package(Doxygen REQUIRED dot)`
        -   Define a custom target:
          ```cmake
          add_custom_target(docs_mapcore ALL
              COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/docs/mapcore_api/Doxyfile
              WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/docs/mapcore_api
              COMMENT &quot;Generating mapcore API documentation with Doxygen&quot;
              VERBATIM
          )
          ```
          (Adjust paths to `Doxyfile` and `WORKING_DIRECTORY` as per your project structure).
5.  **Verification:**
    -   Run the CMake target (e.g., `make docs_mapcore` or build the `docs_mapcore` target from your IDE).
    -   Verify that HTML documentation is generated in the specified `OUTPUT_DIRECTORY`.
    -   Open `html/index.html` and check for correctness and completeness.</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>Doxygen Manual: https://www.doxygen.nl/manual/</documentation_reference>
    <documentation_reference>Doxygen Special Commands: https://www.doxygen.nl/manual/commands.html</documentation_reference>
    <documentation_reference>Integrating Doxygen with CMake: https://cmake.org/cmake/help/latest/module/FindDoxygen.html</documentation_reference>
    <documentation_reference>Graphviz: https://graphviz.org/</documentation_reference>
  </documentation_references>
</DOCS-01>
