id: FINAL-05
section: Integration & Finalization
title: Implement Live Collaboration Client Functionality
original_input_files:
  - "Ported `LiveClient` class and network protocol logic from `NET-01`"
  - "Integrated `Map` class and `AppContext` from `FINAL-01`"
  - "`AppSettings` for storing connection details (from `CORE-06`)"
  - "UI elements for initiating/managing connection (e.g., menu items from `UI-02`, a dedicated connection dialog from `UI-DIALOGS-LIVE-CONNECT`)"
  - "`QUndoStack` for potentially making received changes undoable (from `CORE-04`)"
analyzed_input_files:
  - file_path: "mapcore::LiveClient (from NET-01)"
    description: |
      The C++ class responsible for handling network communication with the live collaboration server.
      It manages the connection (connect, disconnect), sends local changes, and receives remote changes/updates.
      This task will integrate this class into the main application workflow and UI.
      Its existing implementation (likely using Boost.Asio as per `dependency_manifest.yaml`) will be used as is, focusing on the client-side application logic.
  - file_path: "mapcore::Map (via AppContext from FINAL-01)"
    description: |
      The application's main map data structure. Remote changes received by `LiveClient`
      (e.g., tile modifications, item placements from other users) need to be applied to this local `Map` instance.
  - file_path: "core::AppSettings (from CORE-06)"
    description: |
      Used to store and retrieve live collaboration server connection details (server address, port, username, password).
  - file_path: "qtui::MainWindow / ConnectionDialog (from UI-02 / UI-DIALOGS-LIVE-CONNECT)"
    description: |
      The UI components for initiating and managing the live connection.
      This includes menu items ("Connect to Live Server", "Disconnect") and a dialog
      for entering server details and user credentials.
      The UI also needs to display connection status and potentially a list of connected users or activity log.
  - file_path: "QUndoStack (via AppContext from FINAL-01)"
    description: |
      The undo/redo stack. Consideration should be given to how remote changes are handled
      in the local undo history. They might be added as special undoable commands or might clear
      the local undo stack for simplicity if full synchronization of undo history is too complex.
dependencies:
  - FINAL-01  # Core-UI integration, AppContext
  - NET-01   # Ported LiveClient class and protocol logic
  - CORE-03  # Map data structure for applying remote changes
  - CORE-04  # QUndoStack for managing local vs remote changes
  - CORE-06  # AppSettings for storing connection details
  - UI-02    # For menu items like "Connect to Live Server"
  # - UI-DIALOGS-LIVE-CONNECT # A dedicated task for the connection dialog UI would be ideal
current_functionality_summary: |
  The `LiveClient` class and its underlying network protocol logic have been ported (as part of `NET-01`) but are not yet integrated into the main application UI or workflow.
  The application currently operates in a standalone, single-user mode. There is no UI to initiate or manage connections to a live collaboration server, nor is there logic to handle incoming map updates from a server or send local changes.
  Connection parameters (server address, port, user credentials) are not managed.
qt6_migration_steps: |
  1.  **Create Connection Dialog (`LiveConnectionDialog` - if not already a separate UI task):**
      -   Design and implement a `QDialog` that allows users to input:
          -   Server Address (IP or hostname)
          -   Server Port
          -   Username
          -   Password (optional, depending on server)
      -   This dialog should load default/last-used values from `AppSettings`.
      -   Upon confirmation, save the entered values back to `AppSettings`.
  2.  **Integrate `LiveClient` with `AppContext`:**
      -   The `AppContext` should hold an instance of `mapcore::LiveClient`.
      -   Provide methods in `AppContext` like `connectToServer(address, port, username, password)` and `disconnectFromServer()`.
  3.  **Implement "Connect to Live Server" UI Action (`MainWindow`):**
      -   Connect the "Network > Connect to Live Server" (or similar) `QAction::triggered()` signal to a slot in `MainWindow`.
      -   This slot opens the `LiveConnectionDialog`.
      -   If the dialog is accepted, call `AppContext::connectToServer()` with the provided details.
      -   Update UI to reflect connection status (e.g., status bar message, disable server hosting options).
  4.  **Handle `LiveClient` Signals/Callbacks:**
      -   The `LiveClient` class (from `NET-01`) should provide signals or callbacks for events like:
          -   `connected()`
          -   `disconnected()`
          -   `errorOccurred(QString errorMessage)`
          -   `mapUpdateReceived(UpdateData updateData)` (where `UpdateData` contains information about tile changes, item movements, etc.)
          -   `userJoined(QString userName)`
          -   `userLeft(QString userName)`
          -   `cursorUpdateReceived(QString userName, Position newPosition)`
      -   Connect these signals/callbacks to slots in `AppContext` or `MainWindow` to handle them.
  5.  **Applying Remote Map Updates:**
      -   When `mapUpdateReceived(UpdateData)` is triggered:
          -   Parse `UpdateData`.
          -   Apply the changes to the local `AppContext::map()` instance.
          -   These changes should ideally be wrapped in `QUndoCommand`s (potentially a special `RemoteChangeCommand` type) and pushed to the `QUndoStack` so they are part of the local history, though this can be complex to manage correctly with local changes. A simpler initial approach might be to apply them directly and possibly clear parts of the local undo stack or disable undo for remote changes.
          -   Trigger a `MapViewport::refresh()` or update specific regions.
  6.  **Sending Local Changes (if applicable):**
      -   If the live collaboration design allows clients to send changes:
          -   When a local action is performed and pushed to `QUndoStack` (e.g., drawing, pasting), if connected to a server, serialize this action (or the resulting map change) and send it via `AppContext::liveClient().sendMapUpdate(changeData)`.
  7.  **UI Feedback:**
      -   Display connection status prominently (e.g., "Connected to server X as User Y" or "Disconnected").
      -   Consider a panel or log window for live collaboration messages (users joining/leaving, errors).
      -   Implement display of other users' cursors on the `MapViewport` if this data is provided by `LiveClient`.
  8.  **Implement "Disconnect" UI Action:**
      -   Connect "Network > Disconnect" `QAction::triggered()` to `AppContext::disconnectFromServer()`.
      -   This calls `LiveClient::disconnect()`.
      -   Update UI to reflect disconnected state.
definition_of_done: |
  - User can open a dialog to enter live server connection details (address, port, username, password).
  - These connection details are saved and loaded using `AppSettings`.
  - The application can successfully connect to a running live collaboration server using the `LiveClient` component.
  - Connection status (connected, disconnected, errors) is displayed in the UI.
  - Map updates received from the server via `LiveClient` are applied to the local `Map` instance and reflected in the `MapViewport`.
  - (If applicable) Local map changes made by the user are sent to the server via `LiveClient`.
  - (If applicable) Information about other connected users (e.g., cursors, join/leave messages) is displayed.
  - User can disconnect from the server via a UI action.
  - Basic error handling for connection failures or network issues is implemented (e.g., `QMessageBox` popups).
boilerplate_coder_ai_prompt: |
  Implement the client-side functionality for live collaboration in the Qt6 map editor.
  This involves integrating the `mapcore::LiveClient` class (from `NET-01`, uses Boost.Asio) with the UI and application logic.
  Assume an `AppContext` provides `mapcore::LiveClient& liveClient`, `mapcore::Map& map`, `QUndoStack& undoStack`, and `core::AppSettings& appSettings`.
  A `LiveConnectionDialog : QDialog` should be created for user input.

  **1. `LiveConnectionDialog` (`qtui/dialogs/LiveConnectionDialog.h/cpp`):**
     -   Create a `QDialog` with fields for Server Address, Port, Username, and Password.
     -   Load/save these fields from/to `appSettings` (e.g., `appSettings.getLiveServerAddress()`, `appSettings.setLiveServerAddress(...)`).

  **2. `MainWindow` Integration:**
     -   Add a menu action "Network > Connect to Server..." that opens `LiveConnectionDialog`.
     -   On dialog acceptance, retrieve details and call a method like `appContext.connectLiveSession(details)`.
     -   Add a "Network > Disconnect" action that calls `appContext.disconnectLiveSession()`.
     -   Display connection status (e.g., in status bar or a dedicated widget).

  **3. `AppContext` or a new `LiveSessionManager`:**
     -   `void connectLiveSession(ConnectionDetails details)`:
         -   Calls `liveClient.connect(details.address, details.port, details.username, details.password)`.
     -   `void disconnectLiveSession()`: Calls `liveClient.disconnect()`.
     -   Implement slots to connect to `liveClient` signals:
         -   `onLiveClientConnected()`: Update UI status.
         -   `onLiveClientDisconnected()`: Update UI status.
         -   `onLiveClientError(QString errorMsg)`: Show `QMessageBox`.
         -   `onMapUpdateReceived(MapUpdateData update)`:
             -   Parse `update` (format defined by `NET-01`).
             -   Create a command (e.g., `RemoteMapChangeCommand : QUndoCommand`) that applies these changes to `appContext.map()`.
             -   Push this command to `appContext.undoStack()`. (Consider implications for local undo history carefully).
             -   Trigger `MapViewport` refresh.
         -   `onUserActivity(UserData user, ActivityType type)`: Update UI (e.g., user list, log).
         -   `onCursorUpdate(UserData user, Position pos)`: Update visual representation of other users' cursors in `MapViewport`.

  **4. Sending Local Changes (If bidirectional editing is supported by `LiveClient`):**
     -   When local map-modifying commands are executed (pushed to `undoStack`), if connected, serialize the change and send via `liveClient.sendLocalChange(changeData)`.

  **5. Error Handling & UI Feedback:**
     -   Use `QMessageBox` for connection errors.
     -   Keep UI updated with connection status.
documentation_references:
  - "Qt Network Module (if direct Qt network calls were used, but LiveClient uses Boost.Asio): https://doc.qt.io/qt-6/qtnetwork-module.html"
  - "QDialog: https://doc.qt.io/qt-6/qdialog.html"
  - "QSettings (for connection details): https://doc.qt.io/qt-6/qsettings.html"
  - "QUndoStack (for remote changes): https://doc.qt.io/qt-6/qundostack.html"
  - "Boost.Asio documentation (for understanding LiveClient's underlying mechanism if needed): Relevant Boost.Asio docs."
