id: DOCS-02
section: Build, Deployment, & Documentation
title: Create User Manual and Feature Documentation
original_input_files:
  - XML/menubar.xml
  - wxwidgets/main_menubar.h
  - wxwidgets/main_menubar.cpp
analyzed_input_files:
  - file_path: XML/menubar.xml
    description: |
      This XML file defines the complete hierarchical structure of the application's main menu bar.
      It lists all top-level menus (e.g., "File", "Edit", "View"), sub-menus, and individual menu items.
      For each item, it specifies the display name, an 'action' attribute (linking to an internal ActionID),
      an optional 'hotkey' attribute (e.g., "Ctrl+O"), and a 'help' attribute (tooltip string).
      This file is the primary reference for identifying all user-facing features accessible through the menus
      and their intended organization, which directly informs the structure and content of the user manual.
  - file_path: wxwidgets/main_menubar.h
    description: |
      Declares the `MainMenuBar` C++ class (derived from `wxEvtHandler`) and the critical `MenuBar::ActionID` enum.
      The `MenuBar::ActionID` enum provides unique internal identifiers for every possible menu action in the application
      (e.g., `NEW`, `OPEN`, `SAVE`, `ZOOM_IN`, `BORDERIZE_MAP`). These IDs are referenced in `menubar.xml`.
      The `MainMenuBar` class interface includes methods for loading the menu from XML, updating its state (enabling/disabling items),
      and event handlers for each menu action.
      This file is useful for cross-referencing menu item names with their internal action identifiers to understand their purpose.
  - file_path: wxwidgets/main_menubar.cpp
    description: |
      Implements the `MainMenuBar` class.
      The `Load()` method is responsible for parsing `menubar.xml` (using pugixml in the legacy code) to dynamically construct the
      `wxMenuBar` object and all its menus and items based on the XML definition. It maps the string 'action' attributes from
      the XML to the `MenuBar::ActionID` enum values and connects these to specific `On...()` event handler methods within the class.
      The `Update()` method dynamically enables or disables menu items based on the current application and editor state
      (e.g., enabling "Save" only if a map is open and modified).
      This file shows how the menu structure is implemented and gives context to the functionality of each menu item.
dependencies:
  - BUILD-02  # For installation instructions
  - CORE-01  # For understanding basic data (items, tiles) users interact with
  - CORE-03  # For understanding map operations users perform
  - CORE-05  # For selection and copy/paste features
  - RENDER-01 # For documenting the map viewport
  - UI-01     # For main window UI
  - UI-02     # For menu bar, toolbar UI
  - FINAL-04  # Assumed to be a UI finalization task, ensuring stable UI for documentation
  # Add other specific UI (e.g., UI-PALETTE-ALL) or LOGIC tasks as they define user-facing features.
current_functionality_summary: |
  The `XML/menubar.xml` file defines the complete menu hierarchy, item names, hotkeys, and help strings for the application.
  The `wxwidgets/main_menubar.h/.cpp` files load this XML to dynamically construct the `wxMenuBar` and map menu items to internal `MenuBar::ActionID` enums, which trigger corresponding C++ handler functions.
  Currently, user documentation is likely non-existent or not formalized. This task is about creating the initial user manual based on the application's feature set as defined mainly by its menu structure.
qt6_migration_steps: |-
  1.  **Review `menubar.xml` and `MenuBar::ActionID`:**
      -   Thoroughly analyze `XML/menubar.xml` to list all user-accessible features and their menu paths.
      -   Cross-reference with `MenuBar::ActionID` in `wxwidgets/main_menubar.h` to understand the scope of each action.
  2.  **Choose Documentation Format and Tools:**
      -   Select a format (e.g., Markdown is suggested for ease of editing and version control).
      -   Select tools (e.g., a Markdown editor, static site generator like Sphinx if web-based documentation is desired later, or a help authoring tool). For this task, raw Markdown is sufficient.
  3.  **Outline User Manual Structure:**
      -   Create a logical structure for `UserManual.md`. Suggested sections:
          -   "1. Introduction": Brief overview of RME-Qt.
          -   "2. Installation": Instructions for Windows (MSI), macOS (DMG), Linux (.deb) based on `BUILD-02`.
          -   "3. Getting Started - UI Overview":
              -   Main Window layout (from `UI-01`, `UI-02`).
              -   Menu Bar and Toolbars (reflecting `menubar.xml` and `UI-02`).
              -   Map Viewport features (from `RENDER-01`).
              -   Palettes (Brush, Creature, Item, House, etc. - from relevant `UI-PALETTE-*` tasks).
              -   Status Bar information.
          -   "4. Basic Map Operations":
              -   Creating, Opening, Saving Maps (File menu from `menubar.xml`).
              -   Understanding Map Properties (Map menu).
              -   Undo/Redo functionality (Edit menu).
          -   "5. Drawing and Editing Tools":
              -   Overview of different brush types and their uses.
              -   Using the selection tools (Selection menu, `CORE-05`).
              -   Copy, Cut, Paste operations (Edit menu, `CORE-05`).
          -   "6. View Options":
              -   Navigating floors, zooming (Navigate/View menus).
              -   Controlling visibility of map elements (grid, creatures, spawns, lights - View/Show menus).
          -   "7. Advanced Features":
              -   Search functionalities (Search menu).
              -   Map cleanup tools (Map menu).
              -   Live/Multiplayer editing (if applicable).
          -   "Appendix A: Keyboard Shortcuts" (extracted from `hotkey` attributes in `menubar.xml`).
          -   "Appendix B: Troubleshooting / FAQ".
  4.  **Write Content:**
      -   For each section, write clear, concise, and user-friendly content.
      -   Explain the purpose of each feature and provide step-by-step instructions on how to use it.
      -   Define any specific terminology used in the application.
  5.  **Prepare for Screenshots:**
      -   Identify areas where screenshots of the Qt6 UI will be necessary to illustrate features. These will be added once the UI tasks (like `FINAL-04`) are sufficiently complete.
  6.  **Review and Iterate:**
      -   Have another person review the manual for clarity, accuracy, and completeness.
      -   Incorporate feedback and make revisions.
definition_of_done: |-
  An initial version of the User Manual (`UserManual.md`) is created and covers the core functionalities of the application.
  Key requirements:
  - The manual is written in well-formatted Markdown.
  - It includes an Installation section covering Windows, macOS, and Linux based on the outputs of `BUILD-02`.
  - It provides a comprehensive UI Overview of the Qt6 application, referencing relevant UI WBS tasks.
  - All major features accessible through the menu bar (as defined in `menubar.xml`) are documented with clear explanations and usage instructions.
  - A section for Keyboard Shortcuts, derived from `menubar.xml`, is included.
  - The language is user-friendly and suitable for users who may be new to this type of map editor.
  - Placeholders for future screenshots are noted where appropriate.
boilerplate_coder_ai_prompt: |-
  *This is a documentation task primarily for a technical writer, but an AI can assist in generating a draft or outline.*

  **Task: Create Initial User Manual for RME-Qt (Map Editor)**

  **Primary Inputs:**
  - `XML/menubar.xml`: This file defines the complete menu structure (menus, submenus, item names, hotkeys, tooltips) of the application. Use this as the main guide for features to document.
  - `wxwidgets/main_menubar.h`: Contains the `MenuBar::ActionID` enum, which can help map menu items to internal actions if clarification is needed on a feature's purpose.
  - General understanding of Tibia map editors and their common functionalities.
  - (Conceptual) UI designs and feature descriptions from other WBS tasks (assume core features from `CORE-*`, `UI-*`, `RENDER-*`, `LOGIC-*` series are being implemented).

  **Output:**
  - A Markdown file named `UserManual.md`.

  **Content Requirements - Structure and Detail:**

  1.  **Introduction:**
      -   Briefly describe what RME-Qt is and its main purpose (editing OTBM maps).
  2.  **Installation:**
      -   Provide basic installation steps for:
          -   Windows (assuming an MSI installer).
          -   macOS (assuming a DMG / .app bundle).
          -   Linux (assuming a .deb package).
  3.  **Getting Started - UI Overview:**
      -   Describe the main components of the application window:
          -   Main Menu Bar (list top-level menus from `menubar.xml`).
          -   Main Toolbar (describe common buttons if known, e.g., New, Open, Save, Undo, Redo, Brushes).
          -   Map Viewport (where the map is displayed and edited).
          -   Palettes (mention common ones like Terrain, Doodad, Item, Creature, House - explain their general purpose).
          -   Status Bar (what kind of information it shows).
  4.  **Core Map Operations (based on "File" and "Edit" menus in `menubar.xml`):**
      -   Creating a New Map (`File > New`).
      -   Opening an Existing Map (`File > Open`).
      -   Saving a Map (`File > Save`, `File > Save As`).
      -   Closing a Map (`File > Close`).
      -   Undo/Redo (`Edit > Undo`, `Edit > Redo`).
  5.  **Drawing & Editing Basics (based on "Edit", "View", "Show", and palette-related menus):**
      -   **Brushes:** Briefly explain the concept of brushes. How to select a brush type from palettes (Terrain, Doodad, Item, etc.). Mention brush size/shape if this is a known UI feature.
      -   **Selection:** How to enter selection mode. Basic selection of tiles or areas.
      -   **Copy/Cut/Paste:** Explain `Edit > Cut`, `Copy`, `Paste`.
      -   **Deleting:** How to delete selected elements.
  6.  **Navigating the Map (based on "Navigate" and "View" menus):**
      -   Changing Floors.
      -   Zooming In/Out/Normal.
      -   Going to a specific XYZ position.
  7.  **Viewing Options (based on "View" and "Show" menus):**
      -   Explain key visual toggles like Show Grid, Show Creatures, Show Spawns, Show Lights, Show Houses, etc. Use the help strings from `menubar.xml` as a guide.
  8.  **Map Tools (based on "Map" and "Search" menus):**
      -   Briefly describe tools like Find Item, Map Properties, Map Statistics, and any cleanup/validation tools.
  9.  **(Appendix) Keyboard Shortcuts:**
      -   Create a table listing features and their corresponding hotkeys as defined in `menubar.xml`.

  **Style and Tone:**
  -   Write in clear, simple language suitable for end-users, some of whom may be new to map editing.
  -   Use headings, subheadings, bullet points, and bold text to structure the content and improve readability.
  -   Be concise but comprehensive for core features.
  -   Indicate where screenshots would be beneficial (e.g., `[Screenshot of Main Window UI]`).
documentation_references:
  - "Markdown Guide: https://www.markdownguide.org/"
  - "Sphinx (if considering for future web-based docs): https://www.sphinx-doc.org/"
  - "Qt Help Framework (for integrated help): https://doc.qt.io/qt-6/qthelp-framework.html"
