wbs_item_id: UI-05
name: Port Brush & Material Editor
description: Recreate the UI for editing brush and material properties. This involves
  dialogs/panels for defining new brushes (ground, wall, doodad, border) and modifying
  existing: ones.
dependencies:
- 'CORE-04 # Brush/Material system being edited. XML parsing/saving logic is key.'
- 'UI-02   # Palettes might launch parts of this editor or provide context.'
- 'UI-06   # Item finder dialog will be used for selecting item IDs.'
input_files:
- wxwidgets/border_editor_window.cpp
- wxwidgets/border_editor_window.h
- wxwidgets/add_item_window.cpp
- wxwidgets/add_item_window.h
- wxwidgets/add_tileset_window.cpp
- wxwidgets/add_tileset_window.h
- wxwidgets/palette_brushlist.cpp # For context on how editor/dialogs are invoked
analyzed_input_files:
- file_path: wxwidgets/border_editor_window.cpp
  description: |-
    Implements: 'BorderEditorDialog', a wxDialog with a wxNotebook.
    - **Border Tab:** Edits auto-border configurations (saved to 'borders.xml').
      Features 'BorderGridPanel' (custom wxPanel for visual assignment of item IDs to 12 border positions: N, E, S, W, CNW, CNE, CSE, CSW, DNW, DNE, DSE, DSW) and 'BorderPreviewPanel' (custom wxPanel for preview).
      Allows: setting border ID (wxSpinCtrl), name (wxTextCtrl, stored as XML comment), group ID (wxSpinCtrl), and type (wxCheckBox for "Optional", "Ground").
      Loads: existing borders from 'borders.xml' into a wxComboBox. Uses 'FindItemDialog' for item selection.
    - **Ground Tab:** Edits ground brush definitions (saved to 'grounds.xml', with a reference added to 'tilesets.xml').
      Features: inputs for brush name (wxTextCtrl), server look ID (wxSpinCtrl), Z-order (wxSpinCtrl).
      A: wxChoice allows selecting the target tileset category.
      A: wxListBox ('m_groundItemsList') manages items (ID and chance) for the brush.
      Associates: a Border ID (from the "Common Properties" ID control, also used by Border Tab) with alignment properties (wxChoice for "outer"/"inner") and options (wxCheckBox for "To None", "Inner Border").
      Loads: existing ground brushes from 'grounds.xml' into a wxComboBox. Uses 'FindItemDialog' for item selection.
    Saves: configurations by parsing and rewriting 'borders.xml' and 'grounds.xml' using pugixml, and also updates 'tilesets.xml'.
- file_path: wxwidgets/border_editor_window.h
  description: |-
    Header: for 'BorderEditorDialog'. Defines the dialog class, 'BorderItem' struct (position, itemId), 'GroundItem' struct (itemId, chance), and enums like 'BorderEdgePosition'.
    Declares custom controls: 'BorderGridPanel' (manages the 12-position grid for border item assignment) and 'BorderPreviewPanel' (shows a 5x5 preview of the border).
- file_path: wxwidgets/add_item_window.cpp
  description: |-
    Implements: 'AddItemWindow', a wxDialog for adding one or a range of items to a specific tileset category.
    Features: an item ID input (wxSpinCtrl 'item_id_field') with a preview (DCButton 'item_button'), and a wxChoice ('tileset_choice') populated with existing tileset categories relevant to the 'category_type' passed in the constructor.
    A: wxCheckBox ('range_checkbox') enables range mode, revealing wxSpinCtrl inputs for range start and end ('range_start_field', 'range_end_field').
    Includes: helper buttons like "Quick +10 Range" and "Use Current Item" (sets range end from 'item_id_field').
    The: "Add Selection from Palette" button is present but its specific multi-selection logic from palette isn't fully detailed here.
    On: OK, it retrieves the selected tileset name, and either adds the single item ID or iterates through the range, calling 'g_materials.addToTileset()' for each valid item. Finally, calls 'g_materials.modify()' to save changes to 'tilesets.xml'.
- file_path: wxwidgets/add_item_window.h
  description: Header for 'AddItemWindow'. Declares the dialog class and its UI elements, including controls for single item ID, range selection, and tileset choice.
- file_path: wxwidgets/add_tileset_window.cpp
  description: |-
    Implements: 'AddTilesetWindow', a wxDialog for creating a new tileset category.
    Features: a wxTextCtrl ('tileset_name_field') for the new tileset name and a wxSpinCtrl ('item_id_field') to specify the ID of the first item to be added to this new tileset, along with a DCButton ('item_button') for preview.
    On: OK, it retrieves the tileset name and item ID, then calls 'g_materials.addToTileset()' (which handles creation if the tileset doesn't exist) and 'g_materials.modify()' to save to 'tilesets.xml'.
- file_path: wxwidgets/add_tileset_window.h
  description: Header for 'AddTilesetWindow'. Declares the dialog class and its UI elements for tileset name and initial item ID.
- file_path: wxwidgets/palette_brushlist.cpp
  description: |-
    Defines: 'BrushPalettePanel' which hosts the wxChoicebook of tilesets and 'BrushPanel' for displaying brushes within each tileset.
    Key relevance to UI-05:
    - 'BrushPalettePanel::OnClickAddTileset': Creates and shows an 'AddTilesetWindow'.
    - 'BrushPalettePanel::OnClickAddItemTileset': Creates and shows an 'AddItemWindow', passing the selected tileset context.
    - 'BrushPalettePanel::OnClickCreateBorder': Creates and shows a 'BorderEditorDialog'.
    The: detailed brush display mechanisms (like 'SeamlessGridPanel', 'DirectDrawBrushPanel') within 'BrushPanel' are more directly related to UI-02 (Palette System).
documentation_references:
- 'QDialog: https://doc.qt.io/qt-6/qdialog.html'
- 'QTabWidget: https://doc.qt.io/qt-6/qtabwidget.html'
- QSpinBox, QLineEdit, QCheckBox, QComboBox for input fields.
- QTableWidget or QTreeView with QAbstractItemModel for lists/grids of properties.
- 'QGraphicsView (for potential visual doodad editor): https://doc.qt.io/qt-6/qgraphicsview.html'
- QXmlStreamWriter / QXmlStreamReader (or other XML library like TinyXML2) for reading/writing
  definition: files.
current_functionality_summary: 'The wxWidgets version has a 'BorderEditorDialog' which
  is a tabbed dialog:

  - **Border Tab:** Edits auto-border configurations (items assigned to 12 border positions N, E, S, W, CNW, CNE, CSE, CSW, DNW, DNE, DSE, DSW). Includes a visual grid editor ('BorderGridPanel') and preview ('BorderPreviewPanel'). Saves to 'borders.xml'.
  - **Ground Tab:** Edits ground brush definitions (name, server look ID, Z-order, list of items with chances). Associates a Border ID (from common properties) with alignment options. Saves to 'grounds.xml' and adds a reference to the selected tileset category in 'tilesets.xml'.
  Functionality: for creating new tileset categories is handled by 'AddTilesetWindow'.
  Functionality: for adding new items (single or range) to existing tileset categories is handled by 'AddItemWindow'.
  These: dialogs are invoked from 'BrushPalettePanel' (defined in 'palette_brushlist.cpp').
  The: legacy editor does not have dedicated UI within 'BorderEditorDialog' for Wall or Doodad brush compositions beyond what 'PropertiesWindow' might offer; the WBS implies these will be new tabs in the Qt version.
definition_of_done:
- A Qt6 'Brush & Material Editor' (e.g., a 'QDialog' or dockable 'QWidget') is implemented.
- 'The editor uses a 'QTabWidget' for separate sections: ''Borders'', ''Ground Brushes'',
  ''Wall Brushes'', ''Doodad Brushes''.'
- '**Borders Tab:**'
- '  - Allows creating new and editing existing border definitions (ID, name, optional/ground
  type, group ID).'
- '  - Provides a visual grid to assign item IDs to each border part (N, S, E, W,
  corners, diagonals).'
- '  - Includes an item selector (using 'UI-06`''s item finder) and a preview panel.'
- '  - Saves definitions to 'borders.xml' (or the Qt6 equivalent data store), including
  the: name as an XML comment.'
- '**Ground Brushes Tab:**'
- '  - Allows creating/editing ground brushes (name, server look ID, Z-order).'
- '  - Manages a list of items (with chances) for the ground brush.'
- '  - Allows associating a Border ID (defined in Border Editor) and alignment properties.'
- '  - 'QComboBox' to select target tileset for listing the brush.'
- '  - Saves definitions to 'grounds.xml' and updates 'tilesets.xml' with the brush
  reference.'
- '**Wall Brushes Tab (Basic):**'
- '  - Allows creating/editing wall brushes (name, server look ID).'
- '  - 'QComboBox' for target tileset.'
- '  - Input fields for specifying item IDs for essential wall parts (e.g., horizontal,
  vertical, pole).'
- '  - Saves to 'walls.xml' and updates 'tilesets.xml'.'
- '**Doodad Brushes Tab (Basic):**'
- '  - Allows creating/editing doodad brushes (name, server look ID, common properties
  like: draggable, blocking).'
- '  - 'QComboBox' for target tileset.'
- '  - A 'QTableWidget' to manage a list of items with their relative X, Y, Z offsets
  for: composite doodads.'
- '  - Saves to 'doodads.xml' and updates 'tilesets.xml'.'
- Helper dialogs for creating new tileset categories and adding items/brushes to tileset
  categories: are implemented and accessible.
boilerplate_coder_ai_prompt: "Your task is to design and implement a 'Brush & Material\
  \ Editor' using Qt6. This editor will allow users to define and modify auto-borders,\
  \ ground brushes, and provide basic editing for wall and doodad brushes. These definitions\
  \ are typically stored in XML files ('borders.xml', 'grounds.xml', 'walls.xml',\
  \ 'doodads.xml', and 'tilesets.xml').\n\n**Reference Files:** 'wxwidgets/border_editor_window.*'\
  \ (for border and ground brush editing), 'wxwidgets/palette_brushlist.*' (for how\
  \ tilesets/categories are added/items added to them).\n\n**Main Editor Structure\
  \ (e.g., 'BrushMaterialEditorDialog : QDialog'):**\nUse a 'QTabWidget' for the following\
  \ sections:\n\n**1. 'Borders' Tab (based on 'BorderEditorDialog' - Border Tab):**\n\
  \   - Inputs: 'QLineEdit' for Border Name (stored as comment in XML), 'QSpinBox'\
  \ for Border ID (1-1000), 'QSpinBox' for Group ID (0-1000), 'QCheckBox' \"Optional\"\
  , 'QCheckBox' \"Is Ground Border\".\n   - 'QComboBox' to load existing border definitions\
  \ from 'borders.xml' for editing.\n   - **Visual Grid Editor:** Create a custom\
  \ 'QWidget' (e.g., 'BorderGridEditorWidget').\n     - It should display 12 clickable\
  \ cells representing: N, E, S, W, CNW, CNE, CSE, CSW, DNW, DNE, DSE, DSW.\n    \
  \ - Clicking a cell makes it active for item assignment.\n   - **Item Assignment:**\n\
  \     - 'QSpinBox' for Item ID (for the active grid cell).\n     - 'QPushButton'\
  \ \"Browse...\" (opens item finder - 'UI-06').\n     - 'QPushButton' \"Apply Item\
  \ to Selected Cell\".\n   - **Preview Panel:** A custom 'QWidget' ('BorderPreviewWidget')\
  \ that renders a 5x5 grid showing how the current border items would look around\
  \ a central tile.\n   - **Actions:** 'QPushButton' \"Save Border\" (writes changes\
  \ to 'borders.xml', including name as a comment), 'QPushButton' \"Clear Grid\",\
  \ 'QPushButton' \"Load Selected Border\".\n\n**2. 'Ground Brushes' Tab (based on\
  \ 'BorderEditorDialog' - Ground Tab):**\n   - Inputs: 'QLineEdit' for Brush Name,\
  \ 'QSpinBox' for Server Look ID, 'QSpinBox' for Z-Order.\n   - 'QComboBox' to load\
  \ existing ground brushes from 'grounds.xml'.\n   - 'QComboBox' 'm_tilesetChoice'\
  \ to select the target tileset category (from 'tilesets.xml') where this brush will\
  \ be listed.\n   - **Item List:** 'QTableWidget' (columns: \"Item ID\", \"Chance\"\
  ). Buttons: \"Add Item\" (uses item finder 'UI-06' + 'QInputDialog' for chance),\
  \ \"Remove Item\".\n   - **Border Association:**\n     - 'QSpinBox' 'm_idCtrl' (from\
  \ common properties section, or a dedicated one here) to specify the Border ID (defined\
  \ in 'Borders' Tab) for this ground brush.\n     - 'QComboBox' 'm_borderAlignmentChoice'\
  \ for Border Alignment (\"outer\", \"inner\").\n     - 'QCheckBox' 'm_includeToNoneCheck'\
  \ for \"Add 'to=none' border variant\".\n     - 'QCheckBox' 'm_includeInnerCheck'\
  \ for \"Add inner border variant (uses same ID as main)\".\n   - **Actions:** 'QPushButton'\
  \ \"Save Ground Brush\" (writes to 'grounds.xml', adds '<brush name=\"...\"/>' to\
  \ selected category in 'tilesets.xml').\n\n**3. 'Wall Brushes' Tab (Basic):**\n\
  \   - Inputs: 'QLineEdit' for Brush Name, 'QSpinBox' for Server Look ID.\n   - 'QComboBox'\
  \ to load existing wall brushes from 'walls.xml'.\n   - 'QComboBox' for target Tileset.\n\
  \   - Input fields ('QSpinBox'+Browse) for Item IDs for: Horizontal Wall, Vertical\
  \ Wall, Pole.\n   - (Future: Expand to cover all 12+ wall segment types and add\
  \ door/window definitions within them. A visual grid editor here would be ideal.)\n\
  \   - **Actions:** 'QPushButton' \"Save Wall Brush\" (writes to 'walls.xml', updates\
  \ 'tilesets.xml').\n\n**4. 'Doodad Brushes' Tab (Basic):**\n   - Inputs: 'QLineEdit'\
  \ for Brush Name, 'QSpinBox' for Server Look ID.\n   - 'QComboBox' to load existing\
  \ doodad brushes from 'doodads.xml'.\n   - 'QComboBox' for target Tileset.\n   -\
  \ 'QCheckBox'es for properties (Draggable, Blocking, etc.).\n   - **Composite Items:**\
  \ 'QTableWidget' (columns: \"Item ID\", \"X-Offset\", \"Y-Offset\", \"Z-Offset\"\
  ). Buttons to Add/Remove/Edit items (Item ID uses item finder).\n   - (Future: 'QGraphicsView'-based\
  \ visual editor to place items relative to an origin for composite doodads.)\n \
  \  - **Actions:** 'QPushButton' \"Save Doodad Brush\" (writes to 'doodads.xml',\
  \ updates 'tilesets.xml').\n\n**Helper Dialogs (can be simple 'QDialog's, possibly\
  \ invoked from palettes or this editor):**\n-   'NewTilesetDialog': 'QLineEdit'\
  \ for new tileset name. Logic to add a new '<tileset name=\"...\"><terrain/></tileset>'\
  \ (or appropriate inner tags like '<items/>', '<doodad/>') to 'tilesets.xml'.\n\
  -   'AddItemToTilesetDialog': 'QComboBox' for tileset selection, 'QSpinBox'+Browse\
  \ for item ID (or brush name if adding brushes). Logic to add '<item id=\"...\"\
  />' or '<brush name=\"...\"/>' to the chosen category within 'tilesets.xml'.\n\n\
  **XML Handling:**\n- Implement robust parsing and saving for 'borders.xml', 'grounds.xml',\
  \ 'walls.xml', 'doodads.xml', and 'tilesets.xml' using 'QXmlStreamReader' and 'QXmlStreamWriter'\
  \ or an equivalent library.\n- When saving, try to preserve comments and existing\
  \ structure. For 'borders.xml', save the \"Name\" field as an XML comment before\
  \ the '<border>' tag.\n"
