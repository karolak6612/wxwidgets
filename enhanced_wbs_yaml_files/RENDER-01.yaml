id: RENDER-01
section: Core Migration Tasks
title: Implement OpenGL Viewport
original_input_files: map_display.h/cpp
analyzed_input_files:
- wxwidgets/map_display.h
- wxwidgets/map_display.cpp
dependencies:
- UI-01
- CORE-03
current_functionality_summary: '`MapCanvas` (a `wxGLCanvas` in `map_display.h/cpp`) is the primary rendering widget. It manages view parameters like current floor, zoom level, and scroll position (view center). It handles user input for navigation: panning via middle-mouse drag, zooming via the mouse wheel, and floor changes via keyboard shortcuts. It also includes methods for coordinate transformations (screen to map and vice-versa). The actual drawing of map content is delegated to a `MapDrawer` class.'
qt6_migration_steps: |-
  1. Create a new C++ class `MapView` which inherits from `QOpenGLWidget` and an appropriate version of `QOpenGLFunctions` (e.g., `QOpenGLFunctions_3_3_Core` or a version suitable for the required OpenGL features).
  2. This `MapView` widget will be established as the central display area within the `MainWindow` (created in task `UI-01`).
  3. Implement the standard `QOpenGLWidget` virtual methods:
     - `initializeGL()`: Called once when the widget is created. Initialize `QOpenGLFunctions` (by calling `initializeOpenGLFunctions()`). Set up initial OpenGL states like clear color (`glClearColor`), enable depth testing if needed for 3D aspects or layers.
     - `resizeGL(int w, int h)`: Called when the widget is resized. Set the OpenGL viewport using `glViewport(0, 0, w, h)`. Update the projection matrix (typically an orthographic projection for a 2D map view, e.g., using `QMatrix4x4::ortho`).
     - `paintGL()`: Called whenever the widget needs to be redrawn. Initially, this will just clear the color and depth buffers (`glClear`). Actual map content rendering will be added in task `RENDER-02`.
  4. Implement a camera/view model within the `MapView` class to manage the current viewing state:
     - Member variables: `int m_currentFloor`, `double m_zoomFactor` (e.g., 1.0 for 32px tiles), `QPointF m_viewCenterMapCoords` (stores the map X,Y coordinates at the center of the view, can be fractional for smooth scrolling).
     - Helper methods for coordinate transformation: `Position screenToMapCoords(const QPoint& screenPoint) const;` and `QPoint mapCoordsToScreen(const Position& mapPoint) const;`. These will use `m_zoomFactor` and `m_viewCenterMapCoords`.
  5. Implement Pan controls by overriding mouse event handlers:
     - `mousePressEvent(QMouseEvent* event)`: If the middle mouse button is pressed, store the initial mouse position (`m_lastPanMousePos = event->pos();`) and set a boolean flag `m_isPanning = true;`.
     - `mouseMoveEvent(QMouseEvent* event)`: If `m_isPanning` is true, calculate the delta movement from `m_lastPanMousePos`. Adjust `m_viewCenterMapCoords` based on this delta, scaled by `1.0 / m_zoomFactor` (and tile size if map coords are tile units). Update `m_lastPanMousePos = event->pos();`. Call `update()` to schedule a repaint.
     - `mouseReleaseEvent(QMouseEvent* event)`: If the middle mouse button is released, set `m_isPanning = false;`.
  6. Implement Zoom controls by overriding `wheelEvent(QWheelEvent* event)`:
     - Get the scroll delta using `event->angleDelta().y()`.
     - Adjust `m_zoomFactor` (e.g., `m_zoomFactor *= std::pow(1.001, event->angleDelta().y());`). Clamp `m_zoomFactor` to reasonable minimum/maximum values.
     - Implement zoom-to-cursor: Calculate the map coordinate under the mouse cursor *before* changing the zoom. After updating `m_zoomFactor`, adjust `m_viewCenterMapCoords` so that the same map coordinate remains under the mouse cursor's screen position. Call `update()`.
  7. Implement Floor change controls:
     - Provide public slots in `MapView`: `void setCurrentFloor(int floor)`, `void floorUp()`, `void floorDown()`. These methods will update `m_currentFloor` (clamping to valid range 0-15) and call `update()`.
     - These slots will be connected to `QAction`s (e.g., from menus or toolbars in `MainWindow`) or can be called directly from `MapView::keyPressEvent` if handling keyboard shortcuts like PageUp/PageDown.
  8. Add an instance of `MapView` as the central widget in `MainWindow`'s layout.
definition_of_done: |-
  A `MapView` class, derived from `QOpenGLWidget` and `QOpenGLFunctions`, is created and serves as the central map display widget within the `MainWindow`.
  Key requirements:
  - `MapView` is successfully integrated as a central widget in the `MainWindow` layout.
  - Basic OpenGL initialization (setting clear color, viewport, and an appropriate orthographic projection matrix) is functional within `MapView`.
  - Panning: Dragging with the middle mouse button smoothly scrolls the map view by updating the view's center map coordinates.
  - Zooming: Using the mouse wheel zooms the view in and out, maintaining the point under the mouse cursor as the zoom center.
  - Floor Changing: Public slots in `MapView` allow changing the displayed floor (`m_currentFloor`), and these changes trigger a repaint.
  - Coordinate conversion methods (`screenToMapCoords`, `mapCoordsToScreen`) are implemented and function correctly based on the current view parameters (zoom, center).
  - The `paintGL()` method is correctly set up to clear the screen (actual drawing of map content is deferred to `RENDER-02`).
boilerplate_coder_ai_prompt: |-
  Create `MapView.h` and `MapView.cpp`. `MapView` must inherit from `QOpenGLWidget` and an appropriate `QOpenGLFunctions` version (e.g., `QOpenGLFunctions_3_3_Core`). This widget will be the central display in `MainWindow` (from `UI-01`) and will use `Position` from `mapcore` (`CORE-01`).
  1.  **Member Variables in `MapView.h`:**
      ```cpp
      private:
          int m_currentFloor = 7; // Default floor
          double m_zoomFactor = 1.0; // 1.0 means 1 screen pixel = 1 texture pixel for a 32x32 tile sprite
          QPointF m_viewCenterMapCoords; // Center of the view in map tile coordinates (float for smooth scroll)
          QPoint m_lastPanMousePos;
          bool m_isPanning = false;
          QMatrix4x4 m_projectionMatrix;
      ```
  2.  **Override `QOpenGLWidget` virtual methods in `MapView.cpp`:**
      -   `initializeGL()`: Call `initializeOpenGLFunctions();glClearColor(0.2f, 0.2f, 0.2f, 1.0f);`
      -   `resizeGL(int w, int h)`: `glViewport(0, 0, w, h); updateProjectionMatrix(w,h);`
      -   `paintGL()`: `glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // More drawing in RENDER-02`
  3.  **Implement `updateProjectionMatrix(int w, int h)`:**
      -   `m_projectionMatrix.setToIdentity();`
      -   `float aspect = float(w) / float(h ? h : 1);`
      -   `float worldWidth = w / (32.0 * m_zoomFactor); // Width of visible map area in tile units`
      -   `float worldHeight = h / (32.0 * m_zoomFactor); // Height of visible map area in tile units`
      -   `m_projectionMatrix.ortho(-worldWidth / 2.0f, worldWidth / 2.0f, worldHeight / 2.0f, -worldHeight / 2.0f, -1.0f, 1.0f);`
          (This sets up projection so (0,0) in world space is center of screen. Adjust if `m_viewCenterMapCoords` is top-left).
  4.  **Implement Coordinate Conversion (methods in `MapView`):**
      -   `Position screenToMapCoords(const QPoint& screenPos) const;`
      -   `QPoint mapCoordsToScreen(const Position& mapPos) const;`
      (These will use `m_viewCenterMapCoords`, `m_zoomFactor`, widget size, and tile size (32)).
  5.  **Implement Mouse Event Handlers in `MapView.cpp`:**
      -   `mousePressEvent(QMouseEvent* ev)`: If `ev->button() == Qt::MiddleButton`, set `m_isPanning = true; m_lastPanMousePos = ev->pos();`.
      -   `mouseMoveEvent(QMouseEvent* ev)`: If `m_isPanning`:
          `QPoint delta = ev->pos() - m_lastPanMousePos;`
          `m_viewCenterMapCoords -= QPointF(delta.x() / (32.0 * m_zoomFactor), delta.y() / (32.0 * m_zoomFactor));`
          `m_lastPanMousePos = ev->pos(); update();`
      -   `mouseReleaseEvent(QMouseEvent* ev)`: If `ev->button() == Qt::MiddleButton`, `m_isPanning = false;`.
      -   `wheelEvent(QWheelEvent* ev)`:
          `Position mapPosUnderMouse = screenToMapCoords(ev->position().toPoint());`
          `double oldZoom = m_zoomFactor;`
          `int numDegrees = ev->angleDelta().y() / 8; int numSteps = numDegrees / 15;`
          `m_zoomFactor *= std::pow(1.1, numSteps); // Adjust sensitivity`
          `m_zoomFactor = qBound(0.125, m_zoomFactor, 16.0); // Clamp zoom`
          `updateProjectionMatrix(width(), height()); // Update projection due to zoom change`
          `// Recalculate m_viewCenterMapCoords to keep mapPosUnderMouse at the same screen pixel: `
          `// QPointF screenPosOfMapPoint = mapCoordsToScreen(mapPosUnderMouse); // Before zoom, using OLD view center`
          `// m_viewCenterMapCoords = mapPosUnderMouse - (QPointF(ev->position().x() - width()/2.0, ev->position().y() - height()/2.0) / (32.0 * m_zoomFactor) );`
          `update(); // Trigger repaint`
  6.  **Implement Public Slots in `MapView.h` and `MapView.cpp`:**
      -   `void setCurrentFloor(int floor);` (updates `m_currentFloor`, clamps 0-15, calls `update()`)
      -   `void floorUp();` (`setCurrentFloor(m_currentFloor - 1)`)
      -   `void floorDown();` (`setCurrentFloor(m_currentFloor + 1)`)
  7.  In `MainWindow` (from `UI-01`), create an instance of `MapView` and set it as the central widget or part of the main layout. Connect menu actions/toolbar buttons for floor changes to `MapView`'s slots.
