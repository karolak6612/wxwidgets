<?xml version="1.0" ?>
<UI-11-ItemFinderDialog>
  <id>UI-11</id>
  <section>UI Elements</section>
  <title>Port Item Finder Dialog</title>
  <original_task_id>N/A (New Task)</original_task_id>
  <description>Recreate the 'Find Item' dialog (originally 'FindItemDialog' in wxWidgets) using Qt6. This dialog allows users to search for and select item types based on various criteria like ID, name, type, or properties.</description>
  <dependencies>
    <dependencie>CORE-02</dependencie>
    <dependencie>LOGIC-01</dependencie>
    <dependencie>REFACTOR-01</dependencie>
    <dependencie>BUILD-01</dependencie>
  </dependencies>
  <input_files>
    <input_file>wxwidgets/find_item_window.cpp</input_file>
    <input_file>wxwidgets/find_item_window.h</input_file>
  </input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <filepath>wxwidgets/find_item_window.h</filepath>
      <description>Declares 'FindItemDialog'. It includes enums for 'SearchMode' (ServerIDs, ClientIDs, Names, Types, Properties) and 'SearchItemType' (Depot, Mailbox, etc.). Contains controls like 'wxRadioBox' for search mode and item type, 'wxSpinCtrl' for IDs, 'wxTextCtrl' for name and ID ranges/ignored IDs, many 'wxCheckBox' controls for item properties (often 3-state), and a 'FindDialogListBox' for results. Can be initialized to show only pickupable items.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/find_item_window.cpp</filepath>
      <description>Implements 'FindItemDialog'. Handles UI logic for enabling/disabling input fields based on search mode. 'RefreshContentsInternal' is the core search logic, iterating through items from 'g_items' based on selected criteria (ID, name, type, properties), applying filters (pickupable, ignored IDs, ID ranges, invalid item flag), and populating the results list up to a 'Max Results' limit. Property searches use 3-state checkboxes (must have, must not have, ignore). Returns the selected item's brush or ID.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <documentation_references>
    <documentation_reference>QDialog: https://doc.qt.io/qt-6/qdialog.html</documentation_reference>
    <documentation_reference>QRadioButton: https://doc.qt.io/qt-6/qradiobutton.html</documentation_reference>
    <documentation_reference>QGroupBox: https://doc.qt.io/qt-6/qgroupbox.html</documentation_reference>
    <documentation_reference>QSpinBox: https://doc.qt.io/qt-6/qspinbox.html</documentation_reference>
    <documentation_reference>QLineEdit: https://doc.qt.io/qt-6/qlineedit.html</documentation_reference>
    <documentation_reference>QCheckBox: https://doc.qt.io/qt-6/qcheckbox.html#triState-prop</documentation_reference>
    <documentation_reference>QListWidget: https://doc.qt.io/qt-6/qlistwidget.html (or QListView with custom model)</documentation_reference>
    <documentation_reference>QDialogButtonBox: https://doc.qt.io/qt-6/qdialogbuttonbox.html</documentation_reference>
    <documentation_reference>QScrollArea: https://doc.qt.io/qt-6/qscrollarea.html (for property checkboxes)</documentation_reference>
  </documentation_references>
  <current_functionality_summary>The wxWidgets 'FindItemDialog' provides a comprehensive way to search for items:
- &quot;Search Criteria: Users can search by Server ID (single or range, with 'Invalid Item' option), Client ID (single or range), item name (substring), specific item functional types (e.g., Container, Door, Teleport), or a combination of many item properties (e.g., Passable, Movable, Pickupable, Stackable, Light, Slot Type).&quot;
- &quot;Property Matching: Property checkboxes support three states: 'Ignore', 'Must Have', and 'Must Not Have'.&quot;
- &quot;Filtering:&quot;
- &quot;  - An 'Only Pickupables' mode can be set on dialog initialization.&quot;
- &quot;  - Users can specify a list of Server/Client IDs or ID ranges to ignore in search results.&quot;
- &quot;Results Display:&quot;
- &quot;  - Matching items are displayed in a listbox showing their sprites and names.&quot;
- &quot;  - A 'Max Results' setting limits the number of items displayed.&quot;
- &quot;  - Manual 'Refresh' button and an 'Auto Refresh' option (on input change) are available.&quot;
- &quot;Output: The dialog returns the selected 'ItemType' (or its associated brush/ID).&quot;
</current_functionality_summary>
  <definition_of_done>
    <element>A Qt6 'ItemFinderDialogQt' (subclass of 'QDialog') is implemented.</element>
    <element>The dialog layout is organized, possibly with 'QGroupBox' sections for Search Mode, ID/Name Inputs, Type Selection, Properties, Ignored IDs, and Results.</element>
    <element>Search Mode Selection: 'QRadioButton's for &quot;By Server ID&quot;, &quot;By Client ID&quot;, &quot;By Name&quot;, &quot;By Type&quot;, &quot;By Properties&quot;.</element>
    <element>ID/Name Inputs:</element>
    <element>  - 'QSpinBox' for Server ID (100 - max server ID). 'QCheckBox' for &quot;Invalid Item&quot;.</element>
    <element>  - 'QSpinBox' for Client ID (1 - max client/sprite ID).</element>
    <element>  - 'QLineEdit' for Name.</element>
    <element>  - 'QCheckBox' &quot;Search by Range&quot; enables 'QLineEdit' for ID ranges (e.g., &quot;2222,2244-2266&quot;). Tooltip explains format. This range input applies to Server ID or Client ID mode.</element>
    <element>Type Selection: 'QRadioButton' group for item types (Depot, Mailbox, Container, Door, Teleport, Bed, Key, Podium, etc.). Enabled when &quot;By Type&quot; search mode is active.</element>
    <element>Properties Selection:</element>
    <element>  - A 'QScrollArea' contains multiple 'QCheckBox'es for item properties (Unpassable, Unmovable, Block Missiles, Pickupable, Stackable, Rotatable, Hangable, Has Elevation, Ignore Look, Has Light, Slot_Head, Slot_Necklace, Slot_Backpack, Slot_Armor, Slot_Legs, Slot_Feet, Slot_Ring, Slot_Ammo, etc.).</element>
    <element>  - These 'QCheckBox'es are tri-state (Qt::Unchecked for ignore, Qt::PartiallyChecked for must NOT have, Qt::Checked for must have). Right-click or custom cycling could toggle states. Tooltips explain states. Enabled when &quot;By Properties&quot; search mode is active.</element>
    <element>Ignored IDs: 'QCheckBox' &quot;Enable Ignored IDs&quot; enables 'QLineEdit' for ignored IDs/ranges (e.g., &quot;1212,1256-1261&quot;). Tooltip explains format.</element>
    <element>Results Display:</element>
    <element>  - 'QListWidget' (or 'QListView' with a custom model) to display item sprites and names. Each item in the list should store its associated 'mapcore::ItemType*'.</element>
    <element>  - 'QSpinBox' &quot;Max Results&quot; (default e.g., 100, configurable via 'AppSettings').</element>
    <element>  - 'QPushButton' &quot;Refresh&quot; and 'QCheckBox' &quot;Auto Refresh&quot; (triggers refresh on input changes after a short delay).</element>
    <element>Dialog Controls: 'QDialogButtonBox' with &quot;OK&quot; and &quot;Cancel&quot; buttons. &quot;OK&quot; is enabled only if a valid item is selected in the results list or if specific ID search yields a single valid item.</element>
    <element>Functionality:</element>
    <element>  - Dialog can be initialized with an 'onlyPickupable' flag, which checks and disables the 'Pickupable' property checkbox accordingly.</element>
    <element>  - UI controls (ID inputs, name input, type selection, properties) are enabled/disabled based on the selected Search Mode.</element>
    <element>  - 'Refresh' logic queries 'mapcore::ItemManager' based on active criteria, applies all filters (pickupable, ignored IDs, ID ranges), and populates the results list.</element>
    <element>  - Selecting an item in the list enables the &quot;OK&quot; button.</element>
    <element>  - Clicking &quot;OK&quot; returns the selected 'mapcore::ItemType*' (e.g., via a public getter method like 'getSelectedItemType()'). Dialog closes with 'QDialog::Accepted'.</element>
    <element>  - Clicking &quot;Cancel&quot; closes with 'QDialog::Rejected'.</element>
    <element>All UI elements have 'objectName' properties for testability.</element>
  </definition_of_done>
  <estimation_effort>High (15-20 developer days due to the numerous search options, 3-state checkboxes, filtering logic, and UI organization for clarity).</estimation_effort>
  <boilerplate_coder_ai_prompt>Your task is to implement 'ItemFinderDialogQt', a Qt6 dialog for searching and selecting item types. It should replicate the functionality of the wxWidgets 'FindItemDialog'.

I. Dialog Setup ('ItemFinderDialogQt' inherits 'QDialog'):
- &quot;Constructor: 'ItemFinderDialogQt(QWidget* parent, mapcore::ItemManager* itemManager, bool onlyPickupable = false);' (Store 'itemManager' and 'onlyPickupable').&quot;
- &quot;Main Layout: 'QVBoxLayout'. Add 'QDialogButtonBox' (OK, Cancel). OK initially disabled.&quot;

II. UI Sections (use 'QGroupBox' for each):

1.  'Search Mode' GroupBox ('QHBoxLayout'):
    - &quot;'QRadioButton* m_searchByServerIdRadio;' (Checked by default)&quot;
    - &quot;'QRadioButton* m_searchByClientIdRadio;'&quot;
    - &quot;'QRadioButton* m_searchByNameRadio;'&quot;
    - &quot;'QRadioButton* m_searchByTypeRadio;'&quot;
    - &quot;'QRadioButton* m_searchByPropertiesRadio;'&quot;
    - &quot;Connect 'toggled' signals to a slot 'void onSearchModeChanged();'.&quot;

2.  'Search Inputs' GroupBox ('QFormLayout'):
    - &quot;Server ID: 'QSpinBox* m_serverIdSpin;' (Range 100 - ItemManager::getMaxServerId()), 'QCheckBox* m_invalidItemCheck;'.&quot;
    - &quot;Client ID: 'QSpinBox* m_clientIdSpin;' (Range 1 - ItemManager::getMaxSpriteId()).&quot;
    - &quot;Name: 'QLineEdit* m_nameEdit;'.&quot;
    - &quot;Common for Server/Client ID:&quot;
    - &quot;    - 'QCheckBox* m_searchByRangeCheck;'&quot;
    - &quot;    - 'QLineEdit* m_idRangeEdit;' (Tooltip: \&quot;e.g., 2222,2244-2266\&quot;). Initially disabled.&quot;

3.  'Item Type' GroupBox ('QVBoxLayout' or 'QGridLayout'):
    - &quot;'QRadioButton* m_typeDepotRadio;', 'm_typeMailboxRadio;', 'm_typeContainerRadio;', etc. for all relevant 'SearchItemType's from wx version. Initially all disabled.&quot;

4.  'Item Properties' GroupBox (contains a 'QScrollArea' which contains a 'QWidget' with 'QGridLayout' or 'QVBoxLayout'):
    - &quot;'QCheckBox* m_propUnpassableCheck;', 'm_propUnmovableCheck;', ... for all properties from wx version.&quot;
    - &quot;All checkboxes must be tri-state ('setTristate(true);'). Implement custom click handling if needed to cycle Unchecked -&gt; Checked -&gt; PartiallyChecked -&gt; Unchecked, or use right-click to cycle backwards. Tooltip: \&quot;[ ] Ignore, [V] Must Have, [-] Must NOT Have\&quot;. Initially all disabled and Qt::Unchecked.&quot;
    - &quot;If 'onlyPickupable' is true in constructor, 'm_propPickupableCheck' should be set to Qt::Checked and disabled.&quot;

5.  'Filters' GroupBox ('QFormLayout'):
    - &quot;'QCheckBox* m_enableIgnoredIdsCheck;'&quot;
    - &quot;'QLineEdit* m_ignoredIdsEdit;' (Tooltip: \&quot;e.g., 1212,1256-1261\&quot;). Initially disabled.&quot;

6.  'Results' GroupBox ('QVBoxLayout'):
    - &quot;Controls ('QHBoxLayout'): 'QPushButton* m_refreshButton;', 'QCheckBox* m_autoRefreshCheck;' (checked by default), 'QLabel(\&quot;Max Results:\&quot;)', 'QSpinBox* m_maxResultsSpin;' (default 100, range 10-1000).&quot;
    - &quot;'QListWidget* m_resultsListWidget;' (Configure for icons and text: 'setViewMode(QListView::IconMode)', 'setIconSize()', 'setWordWrap(true)'). Each 'QListWidgetItem' should store 'mapcore::ItemType*' using 'setData(Qt::UserRole, QVariant::fromValue(itemTypePtr))'.&quot;
    - &quot;Connect 'm_resultsListWidget-&gt;currentItemChanged' to 'void onResultSelectionChanged();'.&quot;

III. Functionality:

1.  'void onSearchModeChanged()':
    - &quot;Enable/disable relevant GroupBoxes and input fields based on selected search mode radio button.&quot;
    - &quot;E.g., if 'm_searchByServerIdRadio' is checked, enable 'm_serverIdSpin', 'm_invalidItemCheck', 'm_searchByRangeCheck'. Disable others like 'm_nameEdit', 'Item Type' group, 'Item Properties' group.&quot;
    - &quot;If 'm_searchByRangeCheck' is checked (and server/client ID mode), enable 'm_idRangeEdit'.&quot;
    - &quot;If 'm_enableIgnoredIdsCheck' is checked, enable 'm_ignoredIdsEdit'.&quot;
    - &quot;Call 'triggerRefresh()' if 'm_autoRefreshCheck' is checked.&quot;

2.  &quot;Input Field Changes: Connect 'valueChanged'/'textChanged'/'toggled' signals of all input spin boxes, line edits, and checkboxes (Server ID, Client ID, Name, Range, Ignored IDs, Type radios, Property checks) to 'void onFilterCriteriaChanged()'.&quot;
3.  &quot;'void onFilterCriteriaChanged()': Call 'triggerRefresh()' if 'm_autoRefreshCheck' is checked.&quot;
4.  &quot;'void triggerRefresh()': Use a 'QTimer::singleShot(250, this, SLOT(performSearch()));' to avoid too frequent updates.&quot;
5.  'void performSearch()': This is the main search logic.
    - &quot;Clear 'm_resultsListWidget'. Disable OK button.&quot;
    - &quot;Get 'searchMode', 'maxResults', 'onlyPickupable', 'ignoredIdsText', 'idRangeText', etc.&quot;
    - &quot;Parse 'ignoredIdsText' and 'idRangeText' into lists/ranges of integers.&quot;
    - &quot;Iterate through 'm_itemManager-&gt;getItemTypes()'. For each 'ItemType* it':&quot;
    - &quot;    - Apply 'onlyPickupable' filter if applicable.&quot;
    - &quot;    - Apply ignored IDs filter (check against parsed 'ignoredIdsText').&quot;
    - &quot;    - Based on 'searchMode':&quot;
    - &quot;        - Server ID: Check 'it-&gt;id'. If range search, check against 'idRangeText'. Check 'm_invalidItemCheck'.&quot;
    - &quot;        - Client ID: Check 'it-&gt;spriteId' or 'it-&gt;getSprite(0)-&gt;id' (or however client ID is obtained). If range search, check against 'idRangeText'.&quot;
    - &quot;        - Name: Check 'it-&gt;name' (case-insensitive substring).&quot;
    - &quot;        - Type: Check 'it-&gt;isContainer()', 'it-&gt;isDoor()', etc., based on selected type radio.&quot;
    - &quot;        - Properties: For each property checkbox that is not Qt::Unchecked:&quot;
    - &quot;            - If Qt::Checked, item must have the property (e.g., 'it-&gt;isPassable').&quot;
    - &quot;            - If Qt::PartiallyChecked, item must NOT have the property.&quot;
    - &quot;            - If any property fails, continue to next item.&quot;
    - &quot;    - If item passes all filters:&quot;
    - &quot;        - Create 'QListWidgetItem'. Set text ('it-&gt;name'), icon ('m_itemManager-&gt;getSpriteManager()-&gt;getSpritePixmap(it-&gt;getSprite(0)-&gt;id, 0, 0, 0, 0, false)' or similar). Store 'it' using 'setData()'.&quot;
    - &quot;        - Add to 'm_resultsListWidget'.&quot;
    - &quot;        - If 'm_resultsListWidget-&gt;count() &gt;= maxResults', break.&quot;
    - &quot;    - If 'm_resultsListWidget-&gt;count() &gt; 0', select the first item.&quot;
6.  &quot;'void onResultSelectionChanged()': Enable OK button if 'm_resultsListWidget-&gt;currentItem()' is not null.&quot;
7.  &quot;'mapcore::ItemType* getSelectedItemType() const': If OK clicked, return the 'ItemType*' stored in 'm_resultsListWidget-&gt;currentItem()-&gt;data(Qt::UserRole)'.&quot;
8.  &quot;Connect 'm_refreshButton::clicked' to 'performSearch()'.&quot;
9.  &quot;Connect 'm_searchByRangeCheck::toggled' and 'm_enableIgnoredIdsCheck::toggled' to enable/disable their respective 'QLineEdit's and call 'triggerRefresh()' if auto-refresh is on.&quot;
10. &quot;Initialize 'm_propPickupableCheck' state and enabled status based on 'onlyPickupable' constructor argument.&quot;
11. &quot;Helper methods for parsing ID ranges/lists and for 3-state checkbox cycling might be useful.&quot;</boilerplate_coder_ai_prompt>
</UI-11-ItemFinderDialog>
