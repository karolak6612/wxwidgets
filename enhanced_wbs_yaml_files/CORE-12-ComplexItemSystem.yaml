id: CORE-12-ComplexItemSystem
section: Core Migration Tasks
title: Port Complex Item System Data Structures
original_input_files:
  - wxwidgets/complexitem.h
  - wxwidgets/complexitem.cpp
  # Contextual files:
  # - wxwidgets/item.h (Base Item class) - CORE-01
  # - wxwidgets/map.h (Map might manage or interact with ComplexItems) - CORE-03
  # - wxwidgets/iomap_otbm.cpp (Map loading/saving might include ComplexItem data) - CORE-07-MapIO
analyzed_input_files:
  - file_path: wxwidgets/complexitem.h
    description: |
      Likely defines a `ComplexItem` class, possibly derived from the base `Item` class.
      This class would be for items that have more intricate behaviors, multiple states, or require more specialized data than standard items.
      Examples could include items that change over time, interact with other items in specific ways, or have unique scripted behaviors.
      May store additional attributes or state information not covered by the standard `ItemAttributes`.
  - file_path: wxwidgets/complexitem.cpp
    description: |
      Implementation of the `ComplexItem` class.
      Would contain the logic for the specialized behaviors and state management of these items.
      If `ComplexItem` instances are distinct from base `Item` objects, this file would also handle their creation, possibly via a factory method or as part of `Item::Create` logic if certain item IDs are always complex.
dependencies:
  - BUILD-01
  - CORE-01  # For base Item class, Position
  - CORE-02  # For AssetManager (ItemDatabase, for base item properties)
  # CORE-03 (Map) and CORE-07-MapIO (Map I/O) might be relevant if complex items are stored specially or managed at the map level.
current_functionality_summary: |
  - A `ComplexItem` class (`complexitem.h/cpp`) likely exists for items requiring more specialized data or behavior than the standard `Item` class.
  - These items might have unique scripted interactions, multiple states, or complex attributes beyond the standard `ItemAttributes`.
  - It's unclear if these are loaded as distinct types from OTBM or if standard items can be "upgraded" to `ComplexItem` status based on their ID or other properties.
qt6_migration_steps: |
  1.  **Investigate and Define `ComplexItemData` (in `mapcore/items/ComplexItemData.h/cpp`):**
      -   The first step is to understand what makes an item "complex" in the original codebase by closely examining `complexitem.h/cpp`.
      -   If `ComplexItem` primarily stores additional static data (not covered by `ItemData` from `CORE-02`), define a `ComplexItemData` structure to hold this. This might be managed by `AssetManager`.
      -   If `ComplexItem` is about dynamic state that's part of an item *instance* on the map, then these dynamic properties should be added to the `Item` class (from `CORE-01`) itself, perhaps using a `QVariantMap` for arbitrary extra properties, or specific members if the complex state is well-defined (e.g., `charges`, `currentAnimationState`).

  2.  **Option A: `ComplexItem` as a distinct class derived from `Item`:**
      -   If complex items have significantly different behavior encapsulated in methods, define a `ComplexItem` class deriving from `Item` (from `CORE-01`).
      -   `class ComplexItem : public Item { /* specialized methods and data */ };`
      -   The `Item::create` factory (from `CORE-01`) would need to be updated to instantiate `ComplexItem` for specific item IDs if applicable.
      -   Map I/O (`CORE-07-MapIO`) would need to handle instantiation of `ComplexItem` if they are stored as distinct types in OTBM.

  3.  **Option B: Integrate "complex" properties into base `Item` class:**
      -   If "complexity" refers to additional dynamic attributes or states that many item instances might have, extend the `Item` class (from `CORE-01`):
          -   Add a `QMap<QString, QVariant> extendedProperties;` to `Item`.
          -   Or, if the complex attributes are fixed (e.g., a specific energy level, a text field for a book), add these as direct members to `Item`.
      -   This approach avoids a separate `ComplexItem` class if the behavior isn't fundamentally different but just involves more data.

  4.  **Determine Management and I/O:**
      -   How are complex items identified? By specific item IDs? By special attributes in `items.xml` or `.otb`?
      -   Update `ItemDatabase` (`CORE-02`) if `items.xml` or `.otb` parsing needs to extract extra data for complex items into `ItemData` or a new `ComplexItemData` structure.
      -   Update Map I/O (`CORE-07-MapIO`) if complex item state needs to be saved/loaded per instance. This typically involves serializing the `extendedProperties` map or specific members from the `Item` instance.

  5.  **Unit Tests:**
      -   If `ComplexItem` is a new class, test its specific functionality and interaction with the base `Item` class.
      -   If properties are added to `Item`, test setting/getting these extended properties.
      -   Test that map loading/saving correctly persists and restores complex item data/state.
definition_of_done: |
  - The nature and implementation of "complex items" from the original codebase are understood and documented.
  - A clear strategy for representing complex items in the new `mapcore` is implemented:
    - Either as a distinct `ComplexItem` class deriving from `Item` (if behavior is significantly different).
    - Or by extending the base `Item` class with additional data members or a flexible property map (if complexity relates to more instance-specific state).
  - Any associated static data for complex items (if not part of standard `ItemData`) is loaded and managed, likely via `AssetManager`.
  - The `Item::create` factory (from `CORE-01`) is updated if `ComplexItem` is a distinct class.
  - Map I/O (`CORE-07-MapIO`) is updated to correctly save and load any additional instance-specific data or type information for complex items.
  - Unit tests verify the functionality of complex items, including their specialized data/behavior and persistence.
  - The new structures compile successfully within the `mapcore` library.
boilerplate_coder_ai_prompt: |
  You are to port the "Complex Item" system from a legacy C++ codebase (based on `complexitem.h/cpp`) to a modern C++/Qt6 environment within the `mapcore` library. This requires understanding what makes an item "complex" and then integrating this concept into the existing `Item` class structure (`CORE-01`) and asset management (`CORE-02`).

  **1. Analyze `complexitem.h/cpp`:**
     -   Carefully review the provided `complexitem.h` and `complexitem.cpp` snippets.
     -   Determine:
         -   Does `ComplexItem` inherit from `Item`?
         -   What additional data members does `ComplexItem` have compared to a base `Item`?
         -   What unique methods or behaviors does `ComplexItem` implement?
         -   How are `ComplexItem` instances created or identified (e.g., specific item IDs)?

  **2. Design Decision (Choose one based on analysis):**

     **Option A: If `ComplexItem` has distinct behaviors and significant unique data, create a derived class:**
        -   Define `ComplexItem : public Item` in `mapcore/items/ComplexItem.h/cpp`.
        -   Add the specialized data members and methods to this class.
        -   Update the `Item::create(uint16_t id, ...)` factory (in `mapcore/items/Item.cpp` from `CORE-01`):
            -   Modify it to check if `id` corresponds to a known complex item type. If so, instantiate and return `new ComplexItem(...)` instead of `new Item(...)`. This might require data from `ItemData` (from `CORE-02`) to flag complex types.

     **Option B: If "complexity" is mostly additional instance-specific data without radically different core behavior:**
        -   Modify the base `Item` class (`mapcore/items/Item.h/cpp` from `CORE-01`).
        -   Add a member like `QMap<QString, QVariant> extendedProperties;` to store arbitrary additional data.
        -   Or, if the complex attributes are few and fixed (e.g., `chargeCount`, `inscriptionText`), add these as direct members to `Item`.
        -   Provide methods to access/modify these extended properties.

  **3. Update Asset Loading (`CORE-02` - `ItemDatabase`):**
     -   If `items.xml` or `.otb` files contain specific flags or attributes that identify an item as "complex" or provide default values for complex properties, update `ItemDatabase::loadFromXML` and/or `ItemDatabase::loadFromOTB` to parse this information into `ItemData`.
     -   `ItemData` might need a new flag `bool isComplexType;` or store default complex attributes.

  **4. Update Map I/O (`CORE-07-MapIO` - `OtbmMapIO`):**
     -   If complex items have instance-specific state that needs to be saved (e.g., `extendedProperties` from Option B, or specific members of a `ComplexItem` derived class), modify `OtbmMapIO`'s item saving/loading logic:
        -   When saving an item, check if it's a `ComplexItem` (if Option A) or has extended properties. Serialize this extra data into the OTBM item node.
        -   When loading an item, check for this extra data. If Option A, ensure the correct `ComplexItem` type is created. If Option B, populate the `extendedProperties` or specific members of the `Item`.

  **General Requirements:**
     -   Provide header and source files for any new or modified classes.
     -   Write basic Qt Test unit tests for the specialized aspects of complex items (data storage, unique methods, persistence).
documentation_references:
  - "QMap: https://doc.qt.io/qt-6/qmap.html"
  - "QVariant: https://doc.qt.io/qt-6/qvariant.html"
  - "Class Inheritance in C++"
estimation_effort: Medium
```
