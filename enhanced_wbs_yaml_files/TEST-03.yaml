wbs_item_id: TEST-03
name: Unit Test File I/O (OTBM/OTMM)
description: Create unit tests for saving and loading map files in OTBM (OpenTibia Binary Map) and OTMM (OpenTibia MiniMap) formats. This includes verifying that all map elements (tiles, items, creatures, spawns, waypoints, houses, etc.) are correctly serialized and deserialized.
dependencies:
- CORE-03
- TEST-01
- CORE-01
- CORE-02
- LOGIC-04
- LOGIC-05
- LOGIC-07
input_files: []
analyzed_input_files: []
documentation_references:
- 'Qt Test Framework: https://doc.qt.io/qt-6/qttest-index.html'
- OTBM Format Specification (e.g., from online resources like OTLand, for reference)
- 'QTemporaryFile for managing test files: https://doc.qt.io/qt-6/qtemporaryfile.html'
current_functionality_summary: This task is for creating new unit tests to validate the Qt6 implementation of OTBM (OpenTibia Binary Map) and OTMM (OpenTibia MiniMap) file saving and loading. These tests will ensure data integrity during serialization and deserialization processes.
definition_of_done:
- Unit tests using the Qt Test framework are created for both OTBM and OTMM file I/O operations.
- 'Comprehensive round-trip tests are implemented:'
- '  - A variety of `Map` objects are programmatically created in memory, featuring diverse elements: map attributes (version, description, dimensions), tiles with different ground/items, items with all attribute types (count, actionID, text, etc.), creatures, spawns (radius, creature lists, intervals), waypoints, and houses (including doors, beds, depots).'
- '  - Each test map is saved to an OTBM file using the implemented saver.'
- '  - The saved OTBM file is then loaded into a new `Map` object using the implemented loader.'
- '  - A thorough, deep comparison is performed between the original in-memory `Map` and the loaded `Map` to verify that all data (including all nested attributes of items, tile flags, house settings, etc.) is identical.'
- '  - Similar round-trip tests are implemented for OTMM minimap data, ensuring pixel data and any associated metadata are preserved.'
- 'Error handling for file loading is robustly tested, including attempts to load:'
- '  - Non-existent files.'
- '  - Corrupted or malformed OTBM/OTMM files (e.g., incorrect node types, invalid data sizes, truncated content).'
- '  - OTBM files specifying unsupported client versions or item data versions (if the loader is expected to handle such checks).'
- '  - The loader should report errors appropriately (e.g., return false, throw specific exceptions) and not crash.'
- Tests cover edge cases, such as saving/loading empty maps, maps with maximum dimensions, or maps with unusual item attribute combinations.
- All created unit tests pass successfully.
- Tests are integrated into the CMake build system for automated execution.
boilerplate_coder_ai_prompt: |-
  Your task is to create robust unit tests for the OTBM (OpenTibia Binary Map) and OTMM (OpenTibia MiniMap) file input/output operations using the Qt Test framework. These tests will primarily validate the map saver and loader functionalities developed in `CORE-03`.

  **General Strategy: Round-Trip Testing**
  The most effective way to test file I/O is through round-trip testing:
  1.  **Create Data:** Programmatically create a `Map` object (and its associated data like `Minimap` if separate). Populate this map with a specific, known set of features.
  2.  **Save Data:** Use your Qt6 OTBM saver (and OTMM saver) to write this `Map` (and minimap) to a temporary file(s).
  3.  **Load Data:** Use your Qt6 OTBM loader (and OTMM loader) to read the temporary file(s) into a *new* `Map` object (and `Minimap` object).
  4.  **Compare Data:** Perform a deep and thorough comparison between the original in-memory `Map` object and the newly loaded `Map` object. All aspects must be identical. Use helper functions for comparing complex objects like `Item`, `Tile`, `House`, etc.

  **Key Map Elements and Attributes to Verify During Round-Trip Tests:**

  *   **Map Header/Attributes:**
      - OTBM Version, Map Width, Height, Item Major Version, Item Minor Version.
      - Custom map description strings.
  *   **Tiles:**
      - Correct ground item ID.
      - Tile flags (e.g., `TILESTATE_PROTECTIONZONE`, `TILESTATE_NOLOGOUT`, `TILESTATE_HOUSE`).
      - **Items on Tiles:**
          - Correct item IDs.
          - For stackable items: correct count/subtype.
          - For all items: `ActionID`, `UniqueID`, `charges`/`subType` (for splash/fluid), `text`, `writtenDate`, `writer`, `description`.
          - For containers: Depot ID, items inside the container (recursive check).
          - For teleports: Destination position.
          - For doors: Door ID, and ensure house doors are correctly linked to houses.
          - All other relevant item attributes.
      - **Creatures on Tiles:** (If stored directly on tiles outside of spawns, or as part of initial map state)
          - Creature name.
      - **Spawns on Tiles:**
          - Spawn radius (`SpawnProperties::radius`).
          - `QList<QString>` of creature names for the spawn.
          - Spawn interval (`spawn_time_seconds`).
      - **Waypoints on Tiles:** (If individual waypoints are directly on tiles)
          - Waypoint name and position.
  *   **Map-Wide Waypoints (if stored in a separate list):**
      - List of all waypoints with their names and positions.
  *   **Houses:**
      - House ID, name (if applicable).
      - Entry position, exit position (if applicable).
      - List of all tile positions belonging to the house.
      - Correct association of doors with houses.
      - Rent, size, town ID.
  *   **Towns:**
      - Town ID, name, temple position.
      - List of house IDs belonging to the town.
  *   **Minimap (OTMM):**
      - Correct pixel data (colors) for each tile.
      - Any metadata stored in the OTMM file.

  **Error Handling for Loaders:**
  - Test loading non-existent files.
  - Test loading empty files.
  - Test loading truncated/corrupted OTBM/OTMM files (e.g., by manually altering a saved test file).
    - Invalid node types or unexpected data.
    - Data sizes inconsistent with headers.
  - Test loading OTBM files that might specify an unsupported client version or item data version (verify graceful failure or warning if the loader is designed for this).
  - Ensure the loader reports errors clearly (e.g., returns `false` or throws specific, catchable exceptions) and does not crash or lead to undefined behavior.

  **Test Setup:**
  - Use `QTemporaryDir` or `QTemporaryFile` to manage temporary map files created during tests, ensuring they are cleaned up.
  - Create helper functions to construct `Map` objects with predefined test scenarios (e.g., `createTestMapWithItems()`, `createTestMapWithHouseAndSpawns()`).
  - Create robust deep comparison functions for `Map`, `Tile`, `Item`, `House`, etc.

  Integrate all tests into the CMake build system for automated execution.
