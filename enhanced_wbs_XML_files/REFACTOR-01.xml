<?xml version="1.0" ?>
<REFACTOR-01>
  <id>REFACTOR-01</id>
  <section>Post-Migration Refactoring &amp; Optimization</section>
  <title>Decouple UI State and Services from Global Access (Refactor Conceptual GuiManager)</title>
  <original_task_id>REFACTOR-01</original_task_id>
  <original_input_files>
    <original_input_file>wxwidgets/gui.h</original_input_file>
    <original_input_file>wxwidgets/gui.cpp</original_input_file>
    <original_input_file>Conceptual: All ported Qt files that would previously interact with a global GuiManager or g_gui.</original_input_file>
  </original_input_files>
  <dependencies>
    <dependencie>FINAL-04</dependencie>
    <dependencie>UI-01</dependencie>
    <dependencie>UI-02</dependencie>
    <dependencie>RENDER-01</dependencie>
    <dependencie>UI-01</dependencie>
    <dependencie>UI-04</dependencie>
    <dependencie>UI-05</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>CORE-05</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>CORE-14-MaterialSystem</dependencie>
  </dependencies>
  <analyzed_input_files>
    <analyzed_input_file>
      <filepath>wxwidgets/gui.h</filepath>
      <description>Declares the global 'g_gui' object (class 'GUI'). This class acts as a central hub for managing the entire application's UI state and providing access to shared resources and services. Key responsibilities include: managing the active editor instance and its state (current map, floor, zoom), brush selection and parameters ('current_brush', 'brush_size', etc.), editor mode (drawing/selection), palette and minimap instances and their visibility, the copy/paste buffer, loaded client version data, OpenGL context, and various UI helper functions like showing dialogs, progress bars, and updating the main frame's title and status bar. It also holds references to many specific brush types.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/gui.cpp</filepath>
      <description>Implements the 'GUI' class. Contains logic for initializing and managing wxWidgets UI components like 'wxAuiManager' for docking, 'MapTabbook' for editor tabs. Handles loading/unloading of client versions (sprites, items, materials via 'g_items', 'g_creatures', 'g_materials'). Manages UI perspective saving/loading. Provides concrete implementations for brush selection, hotkey management, editor mode switching, autosave logic, detached view tracking, and interaction with various dialogs. Many methods directly access or modify the state of UI elements or editor components.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>Conceptual: All ported Qt files that would interact with a global GuiManager singleton (from UI-03)</filepath>
      <description>This task addresses the architectural decision made in UI-03 where a 'GuiManager' singleton was planned as a Qt replacement for g_gui. This WBS item (REFACTOR-01) aims to refactor that concept further by breaking down the monolithic GuiManager into smaller, focused services that are provided via dependency injection instead of global singleton access.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <current_functionality_summary>The wxWidgets application relied heavily on a global 'g_gui' object (class 'GUI') to manage almost all UI-related state and provide access to shared services. This included:
- **Editor Session Management:** Knowing the current 'Editor' instance, current 'Map', active 'MapCanvas', floor, zoom level.
- **Brush Management:** Storing the currently selected 'Brush', its size, shape, variation, and specific brush instances (e.g., 'eraser', 'house_brush'). Managing the 'doodad_buffer_map'.
- **Editor Mode:** Current mode (drawing, selection, pasting).
- **Data Management:** Loading and providing access to client version data ('ClientVersion', 'SpriteManager' via 'gfx', 'ItemManager' via 'g_items', 'MaterialManager' via 'g_materials').
- **UI Element Management:** Managing palettes ('PaletteWindow'), minimap ('MinimapWindow'), search results window, progress bars, and the main application frame ('MainFrame'). Handling AUI perspective.
- **User Interaction:** Displaying dialogs, managing hotkeys, updating status bar and window title.
- **Clipboard:** Providing access to the 'CopyBuffer'.
- **OpenGL Context:** Managing the shared 'wxGLContext'.
The: conceptual 'GuiManager' singleton (planned in 'UI-03') was intended to carry these responsibilities over to the Qt version. This refactoring task aims to break down this centralized global/singleton approach.
</current_functionality_summary>
  <refactoring_suggestions>The primary refactoring is the core of this task: replacing the global 'g_gui' (and its conceptual successor, the 'GuiManager' singleton) with multiple, focused service classes provided through dependency injection.
Key service classes to create could include:
- 'BrushManager': Handles active brush, brush properties (size, shape, variation), and specific brush data.
- 'EditorStateManager' (or 'ApplicationStateManager'): Manages current editor mode, active floor, potentially active 'EditorSession' if multiple maps can be open.
- 'PaletteService': Manages creation, registration, and state of different palettes.
- 'DialogService': Provides a consistent way to show application-specific dialogs.
- 'ClientVersionService': Manages the currently loaded client version and provides access to its data (items, sprites, materials). This would encapsulate 'g_items', 'g_creatures', 'g_materials', and 'gfx' access.
- 'ClipboardService': Wraps 'CopyBuffer' functionality.
- 'OpenGLContextManager' (if complex sharing is needed beyond QOpenGLWidget's capabilities, though likely not necessary).
- 'SettingsService': Provides typed access to application settings, replacing direct 'g_settings' calls for UI-related configurations.
</refactoring_suggestions>
  <qt6_migration_steps>
    <qt6_migration_step>1. Identify 'g_gui' Responsibilities: Exhaustively list all states managed and services provided by the original 'wxwidgets/gui.h/cpp' (as detailed in 'current_functionality_summary'). This list forms the requirements for the new service classes.</qt6_migration_step>
    <qt6_migration_step>2. Design Focused Service Classes: Based on the identified responsibilities, define a set of new service classes. Examples: 'BrushStateService' (or 'BrushManager') manages active brush, its type, size, shape, variation, and any brush-specific data (e.g., current raw item ID, current creature type). Emits signals when brush or settings change. 'EditorStateService' (or 'ApplicationStateManager') manages current editor mode (draw, select, fill), active map document/editor session, current floor, current zoom (if not solely per-view). Emits signals on state changes. 'ClientDataService' manages the loaded 'ClientVersion' and provides access to items ('ItemManager'), sprites ('SpriteManager'), materials ('MaterialManager'), and creatures ('CreatureManager'). This replaces direct access to 'g_items', 'g_gui.gfx', 'g_materials', 'g_creatures'. 'UIService' (or 'WindowManager'/'DialogManager') handles requests to show standard dialogs (open, save, message boxes), manages floating tool windows or palettes if not handled by 'QMainWindow's docking. 'ClipboardManager' manages 'CopyBuffer' functionality. 'SettingsManager' provides typed access to application settings relevant to UI and editor state.</qt6_migration_step>
    <qt6_migration_step>3. Instantiate Services in 'MainWindow': The 'MainWindow' (from 'UI-01') will create and own instances of these new service classes (e.g., 'm_brushStateService = new BrushStateService(this);').</qt6_migration_step>
    <qt6_migration_step>4. Implement Dependency Injection: Modify constructors of classes that need these services to accept them as parameters. For example: 'EditorController(mapcore::Map* map, mapcore::ActionQueue* queue, BrushStateService* brushService, EditorStateService* editorStateService, ...)', 'MapViewWidget(BrushStateService* brushService, EditorStateService* editorStateService, ...)', Palette UI classes will take 'BrushStateService*' and 'ClientDataService*', Toolbars will take 'EditorStateService*' and 'BrushStateService*'. 'MainWindow' will pass the owned service instances when creating these components.</qt6_migration_step>
    <qt6_migration_step>5. Codebase-Wide Refactoring: Remove all usages of the old 'g_gui' global object. Replace calls like 'g_gui.GetCurrentBrush()' with 'm_brushStateService-&gt;getActiveBrush()'. Replace 'g_gui.GetCurrentEditor()' logic: 'EditorStateService' might provide the active 'EditorSession', from which the 'EditorController' or 'Map' can be accessed. Replace direct access to 'g_items', 'g_gui.gfx' with calls to 'm_clientDataService-&gt;getItemManager()', 'm_clientDataService-&gt;getSpriteManager()', etc.</qt6_migration_step>
    <qt6_migration_step>6. Utilize Signals and Slots: Implement communication between services and UI components using Qt's signal/slot mechanism. E.g., Palettes emit signals when user changes brush settings, 'BrushStateService' receives this, updates its state, and emits its own signals that 'MapViewWidget' or 'EditorController' might be connected to.</qt6_migration_step>
    <qt6_migration_step>7. Phase out Conceptual 'GuiManager': Ensure that the 'GuiManager' singleton planned in 'UI-03' is not implemented. Instead, this WBS directly implements the fine-grained service classes and dependency injection.</qt6_migration_step>
    <qt6_migration_step>8. Update 'EditorController': 'EditorController' will become a primary consumer of many of these services to perform its orchestration tasks, interacting with 'mapcore' components based on UI state provided by these services.</qt6_migration_step>
  </qt6_migration_steps>
  <definition_of_done>
    <element>The global 'g_gui' object's functionalities are fully decomposed into multiple, focused service classes (e.g., 'BrushStateService', 'EditorStateService', 'ClientDataService', 'UIService', 'ClipboardManager', 'SettingsManager').</element>
    <element>These new service classes are instantiated and owned by 'MainWindow'.</element>
    <element>All components requiring these services (e.g., 'EditorController', 'MapViewWidget', palettes, toolbars) receive them via dependency injection (constructor or dedicated setters).</element>
    <element>All global access patterns related to 'g_gui' (and the conceptual 'GuiManager' singleton from 'UI-03') are eliminated from the Qt codebase.</element>
    <element>The application is fully functional, using the new service-based architecture.</element>
    <element>Communication between services and components is primarily managed through Qt's signal/slot mechanism.</element>
    <element>Modularity and testability are demonstrably improved by the removal of global state dependencies.</element>
  </definition_of_done>
  <estimation_effort>
    <element>Very High (35-50 developer days). This is a major architectural refactoring that touches a vast majority of the codebase. Identifying all responsibilities of 'g_gui', designing appropriate service class boundaries, and then updating all call sites across the entire application (UI, controller, potentially core interactions if 'g_gui' was improperly used there) is a massive undertaking. Extensive testing will be required to ensure no functionality is broken.</element>
  </estimation_effort>
  <known_missing_files/>
  <boilerplate_coder_ai_prompt>Your task is to refactor the Qt 6 application to eliminate any reliance on a global UI manager object (like the old 'g_gui' or the conceptual 'GuiManager' singleton from 'UI-03'). Replace this with a set of focused service classes owned by 'MainWindow' and provided to other components via dependency injection.

**1. Design and Implement Service Classes:**
   Based on the functionalities of the original 'wxwidgets/gui.cpp' ('g_gui'), define and implement the following service classes (place them in a suitable application-level directory like 'src/services/'):

   *   **'BrushStateService(QObject* parent)':**
       -   Manages: 'Brush* m_activeBrush', 'BrushShape m_currentShape', 'int m_currentSize', 'int m_brushVariation', 'bool m_drawLockedDoors', 'bool m_useCustomThickness', 'float m_customThicknessMod', current raw item ID, current creature type for brushes, 'BaseMap* m_doodadBufferMap'.
       -   Methods: 'setActiveBrush(Brush*)', 'setBrushShape(BrushShape)', 'setBrushSize(int)', 'getActiveBrush()', 'getBrushShape()', 'getBrushSize()', etc.
       -   Signals: 'activeBrushChanged(Brush*)', 'brushSettingsChanged()'.

   *   **'EditorStateService(QObject* parent)':**
       -   Manages: 'EditorMode m_currentMode' (enum for DRAWING_MODE, SELECTION_MODE, etc.), 'int m_currentFloor', 'Editor* m_activeEditorSession' (pointer to the currently active editor instance, if applicable for multi-document).
       -   Methods: 'setEditorMode(EditorMode)', 'setCurrentFloor(int)', 'setActiveEditorSession(Editor*)', getters for these.
       -   Signals: 'editorModeChanged(EditorMode)', 'currentFloorChanged(int)', 'activeEditorChanged(Editor*)'.

   *   **'ClientDataService(QObject* parent)':**
       -   Manages: Loaded 'ClientVersion* m_clientVersion', 'ItemManager* m_itemManager', 'SpriteManager* m_spriteManager' (for 'gfx'), 'MaterialManager* m_materialManager', 'CreatureManager* m_creatureManager'.
       -   Methods: 'loadVersion(ClientVersionID)', 'unloadVersion()', 'getClientVersion()', 'getItemManager()', 'getSpriteManager()', etc.
       -   Signals: 'clientVersionChanged(ClientVersion*)'.

   *   **'WindowManagerService(QObject* parent)':** (Replaces 'g_gui`'s direct window/dialog management)
       -   Manages: 'MainFrame* m_mainWindow' (or 'QMainWindow*'), 'MapTabbook* m_tabbook', references to palettes, minimap if they are independent windows/docks.
       -   Methods: 'showErrorDialog(QString title, QString text)', 'showInfoDialog(...)', 'getActiveMapCanvas()', 'getCurrentEditor()', 'getCurrentMapTab()', 'refreshPalettes()', 'updateTitle()', 'updateMenubar()', 'updateStatusText(QString)'.
       -   Manages AUI-like perspective loading/saving conceptually (actual docking is 'QMainWindow').

   *   **'ClipboardService(QObject* parent)':**
       -   Manages: 'mapcore::CopyBuffer m_copyBuffer'.
       -   Methods: 'copy()', 'cut()', 'paste()', 'canPaste()'. Interacts with 'EditorStateService' to get active editor for operations.

   *   **'ApplicationSettingsService(QObject* parent)':**
       -   Provides typed access to UI-related settings currently managed by 'g_settings' but accessed via 'g_gui' (e.g., 'g_gui.HasDoorLocked()', 'g_gui.IsPasting()').

**2. Instantiate Services in 'MainWindow':**
   - In 'MainWindow.h', declare member pointers for these services.
   - In 'MainWindow.cpp' constructor, instantiate them (e.g., 'm_brushStateService = new BrushStateService(this);').

**3. Dependency Injection:**
   - Modify constructors of 'EditorController', 'MapViewWidget', palette widgets, toolbars, and any other relevant classes to accept pointers to the service instances they need.
   - 'MainWindow' will pass its owned service instances when creating these components.
   - For example: 'm_editorController = new EditorController(m_mapInstance, m_actionQueue, m_selection, m_brushStateService, m_editorStateService, m_clipboardService, ...);'
   - 'm_mapViewWidget = new MapViewWidget(m_editorController, m_brushStateService, m_editorStateService, ...);'

**4. Codebase Refactoring:**
   - Globally replace calls to 'g_gui.someMethod()' or 'GuiManager::instance()-&gt;someMethod()' with calls to the appropriate injected service instance (e.g., 'm_brushStateService-&gt;getActiveBrush()').
   - This includes replacing direct access to 'g_items', 'g_gui.gfx', 'g_materials', 'g_creatures' with 'm_clientDataService-&gt;getItemManager()', etc.
   - Update UI elements (toolbars, menus, palettes) to interact with these services, primarily using signals and slots. For example, a brush palette, when a brush is selected, would call 'm_brushStateService-&gt;setActiveBrush(newBrush);'. 'MapViewWidget' would connect to 'm_brushStateService-&gt;activeBrushChanged(...)' to update its display.

**5. Remove Global Singleton:**
   - Delete 'GuiManager.h/.cpp' (if it was created based on UI-03) and remove any global instance.
   - Ensure no static 'instance()' methods or global pointers to these new services exist.
</boilerplate_coder_ai_prompt>
</REFACTOR-01>
