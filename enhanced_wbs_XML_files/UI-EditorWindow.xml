<?xml version="1.0" ?>
<UI-EditorWindow>
  <id>UI-EditorWindow</id>
  <section>UI Elements</section>
  <title>Implement Editor Window / Map Document Area</title>
  <original_input_files>
    <original_input_file>wxwidgets/application.cpp</original_input_file>
    <original_input_file>wxwidgets/editor_tabs.cpp</original_input_file>
    <original_input_file>wxwidgets/editor_tabs.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/application.cpp</file_path>
      <description>The `MainFrame` created here hosts a `MapTabbook`. This `MapTabbook` is the
container for individual map editor instances.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/editor_tabs.h</file_path>
      <description>Declares `MapTabbook` (derived from `wxAuiNotebook`), which manages multiple
editor instances (`EditorPanel`, each containing a `MapCanvas`) as tabs.
Handles adding, removing, and selecting editor tabs.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/editor_tabs.cpp</file_path>
      <description>Implements `MapTabbook`. Manages creation of `EditorPanel` for new tabs.
Handles tab change events to set the active editor.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>UI-01</dependencie>
    <dependencie>RENDER-01</dependencie>
    <dependencie>LOGIC-01</dependencie>
    <dependencie>FINAL-01</dependencie>
  </dependencies>
  <current_functionality_summary>The legacy application uses `MapTabbook` (a `wxAuiNotebook` subclass) to manage
multiple open map editors in a tabbed interface. Each tab represents an instance
of an editor for a map.
</current_functionality_summary>
  <qt6_migration_steps>1. Design the main editor area within `MainWindow` (from `UI-01`). This will likely be a `QTabWidget` set as the central widget.
2. Create `EditorInstanceWidget` (or similar name) class, which will be the widget placed in each tab. This widget would contain:
   - An instance of `MapViewWidget` (from `RENDER-01`).
   - Potentially other UI elements specific to a single editor session (e.g., local status bar, specific tool options).
   - An instance of or reference to an `EditorController` (from `LOGIC-01`) specific to this map instance.
3. Implement logic in `MainWindow` or a dedicated `EditorSessionManager` to:
   - Create a new `EditorInstanceWidget` (and its associated `Map`, `EditorController`, `QUndoStack`) when a new map is created or an existing one is opened (`FINAL-02`).
   - Add this widget as a new tab to the central `QTabWidget`.
   - Handle tab closing (prompting for save if map is modified).
   - Handle tab switching (notifying relevant services like `EditorStateService` of the active editor/map).
4. Ensure window title in `MainWindow` updates to reflect the name of the map in the active tab.
</qt6_migration_steps>
  <definition_of_done>- A `QTabWidget` (or similar MDI mechanism) is implemented as the central area of `MainWindow` for hosting map editors.
- New maps or opened maps each appear in a new tab within this `QTabWidget`.
- Each tab contains a fully functional `MapViewWidget` for its respective map.
- Users can switch between open map tabs.
- Closing a map tab correctly prompts for saving unsaved changes and disposes of the editor instance.
- The main application window title reflects the currently active map tab.
</definition_of_done>
  <boilerplate_coder_ai_prompt>Implement the tabbed document interface for managing multiple map editors within the `MainWindow`.

1.  **In `MainWindow.h` (from `UI-01`):**
    -   Add `QTabWidget* m_editorTabWidget;`
2.  **In `MainWindow.cpp` constructor:**
    -   `m_editorTabWidget = new QTabWidget(this);`
    -   `m_editorTabWidget-&gt;setTabsClosable(true);`
    -   `m_editorTabWidget-&gt;setMovable(true);`
    -   `setCentralWidget(m_editorTabWidget);`
    -   `connect(m_editorTabWidget, &amp;QTabWidget::currentChanged, this, &amp;MainWindow::onActiveEditorTabChanged);`
    -   `connect(m_editorTabWidget, &amp;QTabWidget::tabCloseRequested, this, &amp;MainWindow::onEditorTabCloseRequested);`
3.  **Create `EditorInstanceWidget : QWidget` (new class):**
    -   **Header:** Store `MapViewWidget* mapView; EditorController* editorController; mapcore::Map* mapData; QUndoStack* undoStack; QString filePath;`
    -   **Constructor:** Takes `mapcore::Map* map, QString path, AppContext* appContext, QWidget* parent`. Creates its own `MapViewWidget`, `EditorController`, `QUndoStack`.
    -   Provide public accessors for its components.
4.  **In `MainWindow` methods for file operations (from `FINAL-02`):**
    -   `slotFileNew()`: After creating new `mapcore::Map`, create `EditorInstanceWidget* editorWidget = new EditorInstanceWidget(newMap, &quot;Untitled&quot;, m_appContext, m_editorTabWidget);`
                       `int newIndex = m_editorTabWidget-&gt;addTab(editorWidget, &quot;Untitled*&quot;); m_editorTabWidget-&gt;setCurrentIndex(newIndex);`
    -   `slotFileOpen(filePath)`: After loading `mapcore::Map`, create `EditorInstanceWidget* editorWidget = new EditorInstanceWidget(loadedMap, filePath, m_appContext, m_editorTabWidget);`
                             `int newIndex = m_editorTabWidget-&gt;addTab(editorWidget, QFileInfo(filePath).fileName()); m_editorTabWidget-&gt;setCurrentIndex(newIndex);`
5.  **In `MainWindow` slots for tab management:**
    -   `onActiveEditorTabChanged(int index)`: Get current `EditorInstanceWidget*`. Update `EditorStateService` (from `REFACTOR-01`) with active map/editor. Update window title.
    -   `onEditorTabCloseRequested(int index)`: Get `EditorInstanceWidget*`. Check its map for unsaved changes (prompt to save). If not cancelled, remove tab, delete `EditorInstanceWidget` and its associated map/controller/undostack.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>QTabWidget</documentation_reference>
    <documentation_reference>QMainWindow</documentation_reference>
    <documentation_reference>UI-01</documentation_reference>
    <documentation_reference>RENDER-01</documentation_reference>
    <documentation_reference>LOGIC-01</documentation_reference>
    <documentation_reference>FINAL-02</documentation_reference>
  </documentation_references>
  <estimation_effort>Large</estimation_effort>
</UI-EditorWindow>
