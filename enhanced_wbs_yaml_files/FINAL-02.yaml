id: FINAL-02
section: Integration & Finalization
title: Implement File Menu Operations (New, Open, Save, Save As, Close)
original_input_files:
  - "Integrated `Map` class, `AssetManager`, `QUndoStack` and `MainWindow` from `FINAL-01`"
  - "File menu actions (New, Open, Save, Save As, Close, Exit, Recent Files) defined in `UI-02` (Toolbar & Menubar Setup)"
  - "Map saving/loading logic within `Map` class (from `CORE-03` and potentially `CORE-IOMAP` if I/O was separated)"
analyzed_input_files:
  - file_path: "mapcore::Map (from FINAL-01/CORE-03)"
    description: |
      The integrated `Map` class which now needs its file I/O methods (e.g., `createNew()`, `loadFromFile(filePath)`, `saveToFile(filePath)`, `hasChanged()`)
      to be connected to UI actions. It also manages the map's file name and description.
  - file_path: "mapcore::AssetManager (from FINAL-01/CORE-02)"
    description: |
      The integrated `AssetManager` used to load necessary game assets (items, creatures, sprites)
      before a map can be fully loaded or a new map can be meaningfully created.
  - file_path: "QUndoStack (from FINAL-01/CORE-04)"
    description: |
      The undo stack that needs to be managed during file operations (e.g., cleared on 'New' or 'Load',
      set to clean state on 'Save').
  - file_path: "qtui::MainWindow (from FINAL-01/UI-01)"
    description: |
      The main application window containing the File menu. Its actions (QAction instances for New, Open, Save, etc.)
      need to be connected to handler slots that implement the file operations.
      It also needs to manage the window title based on the current map's name and modified state, and potentially a recent files list.
  - file_path: "File Menu QActions (from UI-02)"
    description: |
      The `QAction` objects for "New", "Open", "Save", "Save As", "Close", "Exit", and "Recent Files"
      created during the menubar setup. These actions need their `triggered()` signals connected to implementing slots.
dependencies:
  - FINAL-01  # Core Map Logic and Main UI Integration
  - CORE-03  # Specifically for Map::load/save and metadata methods
  - CORE-04  # For QUndoStack interaction (clearing, setClean)
  - CORE-07-MapIO # For map I/O operations
current_functionality_summary: |
  Following `FINAL-01`, the core map logic is minimally integrated with the Qt UI shell.
  Basic map data might be displayable. Undo/Redo and Selection/Clipboard systems are conceptually wired up.
  However, the File menu operations (New, Open, Save, Save As, Close, Exit) are not yet implemented.
  Users cannot create new maps, load existing maps from disk, or save their work through the UI.
  The application might load a default map or start empty, but full file lifecycle management is missing.
  A recent files menu might exist in the UI but is not functional.
qt6_migration_steps: |
  1.  **Implement `MainWindow::slotFileNew()`:**
      -   Check for unsaved changes in the current map (call `promptToSaveChanges()`). If user cancels, abort.
      -   Call `AppContext::map().createNew()` (this method should initialize an empty map and set default properties).
      -   Clear the `QUndoStack` and set its clean state.
      -   Update `MapViewport` to display the new empty map.
      -   Update window title to "Untitled" or similar.
      -   Update recent files list if applicable.
  2.  **Implement `MainWindow::slotFileOpen()`:**
      -   Check for unsaved changes (`promptToSaveChanges()`). If user cancels, abort.
      -   Use `QFileDialog::getOpenFileName()` to let the user select an .otbm file.
      -   If a file is selected:
          -   (Ensure `AssetManager` has loaded client data if not already done globally).
          -   Call `AppContext::map().loadFromFile(selectedFilePath)`.
          -   If loading fails, show an error message (`QMessageBox`).
          -   If successful, clear and reset the `QUndoStack`.
          -   Update `MapViewport` to display the loaded map.
          -   Update window title with the map name.
          -   Add the file to the recent files list (`QSettings` or custom manager).
  3.  **Implement `MainWindow::slotFileSave()`:**
      -   If the current map has no associated filename (is "Untitled") or was never saved, call `slotFileSaveAs()`.
      -   Otherwise, call `AppContext::map().saveToFile(currentFilePath)`.
      -   If saving fails, show an error message.
      -   If successful, set `QUndoStack` to clean state. Update window title (remove `*`).
  4.  **Implement `MainWindow::slotFileSaveAs()`:**
      -   Use `QFileDialog::getSaveFileName()` to let the user choose a filename and location.
      -   If a file is chosen:
          -   Call `AppContext::map().saveToFile(chosenFilePath)`.
          -   If saving fails, show an error message.
          -   If successful, update the current map's filename in `AppContext::map()`. Set `QUndoStack` to clean. Update window title. Add to recent files.
  5.  **Implement `MainWindow::slotFileClose()`:**
      -   Check for unsaved changes (`promptToSaveChanges()`). If user cancels, abort.
      -   Call `AppContext::map().close()` or `createNew()` to effectively close the current map.
      -   Clear `MapViewport`.
      -   Clear `QUndoStack`.
      -   Update window title.
      -   Disable menu/toolbar actions that require an open map.
  6.  **Implement `MainWindow::promptToSaveChanges()` helper:**
      -   Checks `AppContext::map().hasChanged()` or `!QUndoStack::isClean()`.
      -   If changes exist, show a `QMessageBox` with "Save", "Don't Save", "Cancel" options.
      -   Handle return values: if "Save", call `slotFileSave()` and return true if successful (or not cancelled by save dialog). If "Don't Save", return true. If "Cancel", return false.
  7.  **Implement `MainWindow::slotFileExit()`:**
      -   Call `promptToSaveChanges()`. If it returns false (user cancelled), abort exit.
      -   Otherwise, call `QApplication::quit()`.
  8.  **Recent Files Menu:**
      -   Use `QSettings` to store a list of recently opened file paths.
      -   Dynamically populate a "Recent Files" submenu in the File menu.
      -   When a recent file is selected, it should call a handler similar to `slotFileOpen()` but with the path provided.
  9.  **Connect Menu Actions:**
      -   In `MainWindow` (or where menu actions from `UI-02` are set up), connect the `triggered()` signal of each `QAction` (New, Open, Save, Save As, Close, Exit, and recent file actions) to its corresponding slot.
definition_of_done: |
  - User can create a new, empty map via `File > New`.
  - User can open an existing .otbm map file via `File > Open` using `QFileDialog`.
  - User can save the current map to its existing file via `File > Save`. If the map is new, it prompts for "Save As".
  - User can save the current map to a new file via `File > Save As` using `QFileDialog`.
  - User is prompted to save unsaved changes before creating a new map, opening another map, closing the map, or exiting the application.
  - Closing a map (`File > Close`) clears the view and disables relevant UI actions.
  - `File > Exit` correctly prompts for saving and then closes the application.
  - The main window title updates to reflect the current map's filename and modified status (e.g., "map.otbm[*]" if modified).
  - The `QUndoStack` is appropriately cleared or marked clean after New, Open, and Save operations.
  - A functional "Recent Files" list is maintained (e.g., in `QSettings`) and displayed in the File menu, allowing users to reopen maps from this list.
  - Basic error handling (e.g., `QMessageBox` for file I/O errors) is implemented for file operations.
boilerplate_coder_ai_prompt: |
  Implement the File menu operations (New, Open, Save, Save As, Close, Exit, Recent Files) for the Qt6 map editor.
  Assume an `AppContext` provides access to `mapcore::Map& mapManager`, `QUndoStack& undoStack`, and potentially a `RecentFilesManager`.
  The `MainWindow` has `QAction` members for these menu items.

  **1. New File (`MainWindow::slotFileNew()`):**
     - Prompt to save unsaved changes (use a helper `promptToSaveChanges() -> bool`).
     - If not cancelled, call `mapManager.createNewMap()`.
     - Clear `undoStack` and set it to clean.
     - Update UI (viewport, window title).

  **2. Open File (`MainWindow::slotFileOpen()`):**
     - Prompt to save unsaved changes.
     - Use `QFileDialog::getOpenFileName()` for OTBM files.
     - If a file is selected, call `mapManager.loadFromFile(filePath)`.
     - On success: clear `undoStack`, update UI, add to recent files.
     - On failure: `QMessageBox::warning()`.

  **3. Save File (`MainWindow::slotFileSave()`):**
     - If `mapManager.currentFilePath()` is empty or map is new, call `slotFileSaveAs()`.
     - Else, call `mapManager.saveToFile(mapManager.currentFilePath())`.
     - On success: `undoStack->setClean()`, update window title.
     - On failure: `QMessageBox::warning()`.

  **4. Save As File (`MainWindow::slotFileSaveAs()`):**
     - Use `QFileDialog::getSaveFileName()`.
     - If a file is selected, call `mapManager.saveToFile(chosenPath)`.
     - On success: `mapManager.setCurrentFilePath(chosenPath)`, `undoStack->setClean()`, update window title, add to recent files.
     - On failure: `QMessageBox::warning()`.

  **5. Close File (`MainWindow::slotFileClose()`):**
     - Prompt to save unsaved changes.
     - If not cancelled, call `mapManager.closeMap()` (or `createNewMap()` to reset state).
     - Clear `undoStack`, update UI (clear viewport, disable map-specific actions).

  **6. Exit Application (`MainWindow::slotFileExit()` or `MainWindow::closeEvent()`):**
     - Call `promptToSaveChanges()`. If it returns `false` (user cancelled), ignore the exit request.
     - Else, proceed with `QApplication::quit()`.

  **7. `promptToSaveChanges() -> bool` Helper:**
     - Checks `!undoStack->isClean()`.
     - If dirty, shows `QMessageBox` with Save/Don't Save/Cancel.
     - Handles user's choice, potentially calling `slotFileSave()`. Returns `false` if user cancels, `true` otherwise.

  **8. Recent Files:**
     - Store recent file paths in `QSettings`.
     - Create `QAction`s dynamically for a "Recent Files" submenu.
     - Connect these actions to a slot that calls `mapManager.loadFromFile(filePath)` (after prompting to save current).

  **9. Connect Signals:** Connect `triggered()` signals of menu `QAction`s to these slots. Update window title based on `mapManager.currentFilePath()` and `undoStack->isClean()`.
documentation_references:
  - "QFileDialog: https://doc.qt.io/qt-6/qfiledialog.html"
  - "QSettings: https://doc.qt.io/qt-6/qsettings.html"
  - "QMessageBox: https://doc.qt.io/qt-6/qmessagebox.html"
  - "QApplication::quit(): https://doc.qt.io/qt-6/qapplication.html#quit"
  - "QMainWindow::closeEvent(): https://doc.qt.io/qt-6/qmainwindow.html#closeEvent"
  - "QUndoStack::isClean(): https://doc.qt.io/qt-6/qundostack.html#isClean"
  - "QUndoStack::setClean(): https://doc.qt.io/qt-6/qundostack.html#setClean"
  - "QUndoStack::clear(): https://doc.qt.io/qt-6/qundostack.html#clear"
