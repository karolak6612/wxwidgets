wbs_item_id: UI-06
name: Port Creature Editor & Tools
description: Recreate UI for creature palette (selection, spawn settings, search,
  loading) and a dialog for editing properties of creatures placed on the map.
dependencies:
- 'UI-02 # Creature palette is a tab in the main palette system'
- 'CORE-02 # For CreatureDatabase and CreatureType information'
- '# XML files like creatures.xml, creature_palette.xml, tilesets.xml are data sources.'
input_files:
- wxwidgets/palette_creature.cpp
- wxwidgets/palette_creature.h
- wxwidgets/old_properties_window.cpp
- wxwidgets/old_properties_window.h
analyzed_input_files:
- file_path: wxwidgets/palette_creature.cpp
  description: Implements `CreaturePalettePanel`, which includes a wxChoice for creature
    tilesets, a SortableListBox or CreatureSpritePanel for display, search functionality,
    spawn time/size controls, creature/spawn brush toggles, and buttons for loading
    NPC/Monster XML folders.
- file_path: wxwidgets/palette_creature.h
  description: Header for `CreaturePalettePanel` and its helper classes `CreatureSpritePanel`
    and `CreatureSeamlessGridPanel`.
- file_path: wxwidgets/old_properties_window.cpp
  description: (Partially relevant) Contains a constructor variant for `OldPropertiesWindow(Creature*
    creature)` allowing editing of creature's spawn interval and direction. Does not
    provide full outfit editing for map creatures directly.
- file_path: wxwidgets/old_properties_window.h
  description: Header for `OldPropertiesWindow`.
documentation_references:
- 'QComboBox: https://doc.qt.io/qt-6/qcombobox.html'
- 'QLineEdit: https://doc.qt.io/qt-6/qlineedit.html'
- 'QListView / QListWidget: https://doc.qt.io/qt-6/qlistwidget.html'
- 'QSpinBox: https://doc.qt.io/qt-6/qspinbox.html'
- 'QRadioButton / QActionGroup: https://doc.qt.io/qt-6/qradiobutton.html'
- 'QFileDialog::getExistingDirectory: https://doc.qt.io/qt-6/qfiledialog.html#getExistingDirectory'
current_functionality_summary: 'The creature tooling in wxWidgets is primarily centered
  around the `CreaturePalettePanel`. This panel allows:

  - Selection of creature types from different tilesets/categories (loaded from XML).

  - Searching for creatures by name.

  - Displaying creatures in a list or a sprite grid.

  - Toggling between a "Creature Brush" (for placing single instances) and a "Spawn
  Brush".

  - When "Spawn Brush" is active, controls for "Spawn Time" and "Spawn Radius" become
  relevant.

  - Buttons to load creatures from external NPC/Monster XML definition folders.

  - A button to purge all loaded creature definitions.

  Separately, the `OldPropertiesWindow` has a mode for editing an existing `Creature*`
  on the map, which allows changing its spawn interval (if part of a spawn) and its
  facing direction. Full outfit editing for individual map creatures is not a standard
  feature here (outfits are usually type-defined, except for podiums).'
definition_of_done:
- The 'Creature' tab within the main palette system (`UI-02`) is implemented.
- 'This palette tab includes:'
- '  - A `QComboBox` for selecting creature categories/tilesets (e.g., ''All Creatures'',
  ''NPCs'', ''Monsters'').'
- '  - A `QLineEdit` for searching/filtering creatures by name or by ''lt:<looktype_id>''.'
- '  - A `QListView` (with custom delegate for icon+name) or a custom sprite grid
  widget to display the filtered list of creatures.'
- '  - `QSpinBox` controls for ''Spawn Time (seconds)'' and ''Spawn Radius''.'
- '  - `QRadioButton`s (or a `QActionGroup`) to toggle between ''Place Single Creature''
  mode and ''Place Spawn Area'' mode.'
- '  - `QPushButton`s for ''Load NPCs Folder'', ''Load Monsters Folder'', and ''Purge
  All Creatures''. These interact with the core creature data management (`Creatures`
  class from `CORE-02`).'
- Selecting a creature in the palette updates the application's current brush to either
  a `CreatureBrush` or a `SpawnBrush` based on the mode toggle.
- When 'Place Spawn Area' mode is active and used on the map, the tile's spawn data
  is configured with the selected creature, and the current Spawn Time and Radius
  from the palette.
- A new `EditMapCreatureDialog` (subclass of `QDialog`) is created.
- '  - This dialog is used to edit properties of an existing creature instance on
  the map.'
- '  - It displays the creature''s name (read-only).'
- '  - It provides a `QSpinBox` to edit the ''Spawn Interval'' (if the creature''s
  tile is a spawn point for this creature).'
- '  - It provides a `QComboBox` to edit the creature''s ''Direction''.'
- '  - (Optional, if decided by core data structure design): If individual creatures
  on the map can have their outfits customized (beyond their type definition), controls
  for `lookType`, `head`, `body`, `legs`, `feet`, `addons` are included.'
- The `EditMapCreatureDialog` loads data from a copy of the `Creature` object and
  applies changes back to the copy upon 'OK', with the caller managing undo actions.
boilerplate_coder_ai_prompt: "Your task is to implement the UI components for creature\
  \ management in Qt6. This includes the 'Creature' tab within the main application\
  \ palette and a dialog for editing properties of creature instances already placed\
  \ on the map.\n\n**Reference Files:** `wxwidgets/palette_creature.cpp`, `wxwidgets/palette_creature.h`,\
  \ and relevant sections of `wxwidgets/old_properties_window.cpp` (for editing creature\
  \ instances).\n\n**1. Creature Palette Tab (within `paletteTabWidget` from `UI-02`):**\n\
  \   - **Layout:**\n     - `QComboBox` (`creatureTilesetCombo`): For selecting creature\
  \ categories (e.g., \"All Creatures\", \"NPCs\", \"Forest Monsters\"). Populate\
  \ from `g_materials.tilesets` where category is `TILESET_CREATURE`.\n     - `QLineEdit`\
  \ (`creatureSearchEdit`): For filtering creatures by name or \"lt:<looktype_id>\"\
  .\n     - Display Area: `QListView` (`creatureListView`) with a custom model/delegate\
  \ to show creature sprites and names, or a custom `CreatureSpriteGridWidget`.\n\
  \     - `QSpinBox` (`spawnTimeSpin`): Label \"Spawn Time (s):\", range e.g., 1-3600.\n\
  \     - `QSpinBox` (`spawnRadiusSpin`): Label \"Spawn Radius:\", range e.g., 1-15.\n\
  \     - `QRadioButton` (`placeSingleCreatureRadio`): Text \"Place Single Creature\"\
  \ (checked by default).\n     - `QRadioButton` (`placeSpawnAreaRadio`): Text \"\
  Place Spawn Area\". Group these two.\n     - `QPushButton` (`loadNpcsButton`): Text\
  \ \"Load NPCs Folder...\".\n     - `QPushButton` (`loadMonstersButton`): Text \"\
  Load Monsters Folder...\".\n     - `QPushButton` (`purgeCreaturesButton`): Text\
  \ \"Purge All Creatures\".\n     - (Optional: Toggles for \"Sprite View\" vs \"\
  List View\", \"64x64 Sprites\", \"Zoom\" if implementing advanced sprite views from\
  \ `CreaturePalettePanel`).\n   - **Functionality:**\n     - Populate `creatureTilesetCombo`.\
  \ Selecting a tileset filters the `creatureListView`.\n     - `creatureSearchEdit`\
  \ text changes filter `creatureListView` (case-insensitive name search, or looktype\
  \ search if \"lt:\" prefix).\n     - Selecting a creature in `creatureListView`\
  \ sets it as the active creature for the brush.\n     - If `placeSingleCreatureRadio`\
  \ is checked, the active brush becomes a `CreatureBrush` for the selected creature.\n\
  \     - If `placeSpawnAreaRadio` is checked, the active brush becomes a `SpawnBrush`.\
  \ When applied to a tile, it uses the selected creature, `spawnTimeSpin->value()`,\
  \ and `spawnRadiusSpin->value()` to configure the tile's spawn data.\n     - \"\
  Load NPCs/Monsters\" buttons: Open `QFileDialog::getExistingDirectory`. Iterate\
  \ XML files, call `g_creatures.importXMLFromOT()`. Refresh palette and current list.\n\
  \     - \"Purge All Creatures\": Confirm with `QMessageBox`. Clear `g_creatures`,\
  \ clear relevant `TilesetCategory` entries in `g_materials`, refresh palettes.\n\
  \n**2. `EditMapCreatureDialog` (inherits `QDialog`):**\n   - Constructor: `EditMapCreatureDialog(QWidget*\
  \ parent, Map* map, Creature* creatureToEditCopy)`.\n   - **Layout:**\n     - `QLabel`\
  \ for Creature Name (read-only, from `creatureToEditCopy->getName()`).\n     - `QSpinBox`\
  \ (`spawnIntervalEdit`): Label \"Spawn Interval (s):\". Load from `creatureToEditCopy->getSpawnTime()`.\n\
  \     - `QComboBox` (`directionCombo`): Label \"Direction:\". Populate with \"North\"\
  , \"East\", \"South\", \"West\", etc. Set current from `creatureToEditCopy->getDirection()`.\n\
  \     - **Outfit Section (Conditional - only if core `Creature` object on map stores\
  \ its own outfit overrides):**\n       - `QSpinBox` `lookTypeEdit`, `lookHeadEdit`,\
  \ `lookBodyEdit`, `lookLegsEdit`, `lookFeetEdit`, `lookAddonsEdit`.\n   - **Functionality:**\n\
  \     - On \"OK\": Validate inputs. Update `creatureToEditCopy` with new spawn interval\
  \ and direction (and outfit if applicable). `accept()` the dialog.\n\n**Data Interaction:**\n\
  - Creature definitions are managed by `g_creatures` (see `CORE-02`).\n- Palettes\
  \ display `CreatureBrush` objects, which reference `CreatureType` from `g_creatures`.\n\
  - When placing a spawn, the `Tile` object on the map stores the creature name (or\
  \ list of names), spawn radius, and spawn time.\n- The `EditMapCreatureDialog` modifies\
  \ an existing `Creature` object (a copy for undo purposes).\n"
