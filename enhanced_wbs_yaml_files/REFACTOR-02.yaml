id: REFACTOR-02
section: Post-Migration Refactoring & Optimization
title: "Define and Execute Performance & Memory Profiling Strategy for Qt Application"
original_task_id: REFACTOR-02 # Keep original ID
original_input_files:
  - "Conceptual: The new, fully functional Qt application."
dependencies:
  - "FINAL-04" # Theming and Final Application Assembly
  - "TEST-04"  # Manual Regression Testing (ensures application is stable enough for profiling)
analyzed_input_files:
  - filepath: "Conceptual: The complete RME-Qt application executable and its source code."
    description: "This task focuses on analyzing the performance and memory characteristics of the nearly complete RME-Qt application. The input is the application itself, which will be subjected to various profiling tools and scenarios rather than porting specific legacy source files."
current_functionality_summary: |
  This WBS item outlines an essential analysis phase to be performed on the RME-Qt application once it is substantially complete and functional. It does not involve porting existing wxWidgets code. Instead, it defines the strategy for systematically profiling the new Qt-based application to identify performance bottlenecks (CPU usage) and memory management issues (memory consumption, leaks). The outcome of this task is a detailed report that will guide targeted optimization efforts in subsequent refactoring tasks (specifically 'REFACTOR-03').
qt6_migration_steps: |
  1.  **Tool Selection and Setup:**
      *   Identify and prepare appropriate, industry-standard profiling tools for each target operating system:
          *   **Windows:** Visual Studio Profiling Tools (CPU Usage, Memory Usage), Intel VTune Profiler, AMD uProf, or other suitable alternatives.
          *   **Linux:** Valgrind (specifically 'callgrind' for CPU profiling and 'massif' for heap memory analysis), 'perf' utility, 'gprof'.
          *   **macOS:** Xcode Instruments (Time Profiler for CPU analysis, Allocations and Leaks tools for memory diagnostics).
      *   Ensure profiling tools are correctly installed and configured in the development/testing environments for each platform.

  2.  **Define Comprehensive Profiling Scenarios:**
      *   Develop a list of representative test cases that cover a wide range of application usage, focusing on potentially demanding operations:
          *   **Application Lifecycle:** Startup time, shutdown time.
          *   **Data Handling:** Loading small, medium, and very large/complex OTBM maps. Saving maps.
          *   **Rendering Performance:**
              - Rapid panning and zooming across dense and sparse map areas.
              - Rendering with all visual features enabled (lighting, transparency, creature icons, item details, special tile indicators, etc.).
              - Rendering at various zoom levels.
          *   **Memory Usage & Management:**
              - Performing multiple large copy-paste operations.
              - Executing extensive undo/redo sequences.
              - Opening, editing, and closing multiple map tabs/documents over an extended session.
              - Stress testing with continuous item placement/deletion.
          *   **CPU-Intensive Operations:**
              - Using area fill tools (flood fill) on large, complex regions.
              - Applying complex doodad brushes or large terrain brushes.
              - Executing map-wide cleanup utilities (e.g., "Validate Grounds," "Remove Duplicate Items").
              - Importing large external data files (e.g., monster definitions).

  3.  **Execute Profiling Runs:**
      *   Systematically run the RME-Qt application under the selected profilers for each defined scenario, on each target platform (Windows, Linux, macOS).
      *   **CPU Profiling:** Collect data on function execution times, call trees, hot paths, and identify functions or modules that consume the most CPU cycles.
      *   **Memory Profiling:**
          - Track overall memory allocation and deallocation patterns.
          - Monitor heap usage over time during different scenarios.
          - Utilize leak detection capabilities of the profiling tools to identify any memory leaks.
          - Analyze memory snapshots to identify objects or data structures contributing most significantly to memory footprint.

  4.  **Analyze Profiling Data:**
      *   **CPU Bottleneck Analysis:**
          - Review CPU profiling reports to identify functions or code sections that are major contributors to execution time, especially in interactive or long-running tasks.
          - Analyze call stacks to understand the context of these hotspots.
      *   **Memory Issue Analysis:**
          - Examine memory allocation reports and leak summaries. For any detected leaks, trace back to the allocation source.
          - Identify areas of excessive memory churn (frequent allocations/deallocations of temporary objects).
          - Pinpoint data structures or caches that might be growing unboundedly or using memory inefficiently.

  5.  **Compile Profiling Report:**
      *   Create a comprehensive document summarizing all findings.
      *   **Structure:**
          - Introduction: Profiling goals, methodology, tools used per platform.
          - CPU Performance Analysis: List identified bottlenecks, sorted by severity/impact. Include function names, percentage of execution time, relevant call stacks, and the scenarios under which they occur.
          - Memory Usage Analysis: Detail any memory leaks (with backtraces if available). List objects/data structures causing high memory usage. Describe any observed inefficient memory patterns (e.g., fragmentation, excessive churn).
          - Platform-Specific Observations: Note any significant performance differences or issues unique to Windows, Linux, or macOS.
      *   **Prioritization:** Rank the identified issues based on their perceived impact on user experience (responsiveness, stability) and resource consumption.
      *   **Recommendations:** Provide initial, high-level hypotheses or specific areas of code to investigate for optimization in the 'REFACTOR-03' task.
definition_of_done:
  - A detailed profiling strategy, including tool selection and scenario definition, is documented.
  - The RME-Qt application has been profiled according to this strategy on all primary target platforms (Windows, Linux, macOS).
  - A comprehensive profiling report is generated, which includes:
    - Clear identification of CPU performance bottlenecks, with supporting data from profiling tools (e.g., hot function lists, call graphs).
    - Clear identification of memory usage issues, including any leaks, areas of high consumption, or inefficient patterns, with supporting data (e.g., allocation traces, heap dumps).
    - A prioritized list of these identified issues, based on their impact.
    - Actionable initial recommendations for areas of the codebase to target for optimization in 'REFACTOR-03'.
estimation_effort:
  - "Medium (10-15 developer days). This involves setting up multiple profiling environments, carefully executing numerous test scenarios, and then thoroughly analyzing the potentially large datasets generated by profilers. Writing a comprehensive and actionable report also takes significant time. The effort is more about meticulous investigation and analysis than coding."
known_missing_files: []
boilerplate_coder_ai_prompt: |
  *This WBS item is an **analysis and reporting task** to be performed by a senior developer or performance engineer, not a direct code generation task for a Coder AI. The AI's role here is to understand the process and the expected output (the profiling report structure).*

  **Objective:**
  To: define and execute a comprehensive performance and memory profiling strategy for the RME-Qt application, and to produce a detailed report identifying bottlenecks and areas for optimization.

  **Inputs for the Developer Performing Profiling:**
  - The RME-Qt application, assumed to be functionally complete and stable (post 'FINAL-04' and 'TEST-04').
  - Access to and expertise with profiling tools for Windows (Visual Studio Profiler), Linux (Valgrind, perf), and macOS (Xcode Instruments).

  **Procedure to be Followed by the Developer:**

  1.  **Finalize Profiling Toolset:** Confirm the specific profiling tools to be used for CPU and memory analysis on each target platform.
  2.  **Detail Profiling Scenarios:** Expand on the general scenarios listed in 'qt6_migration_steps' with specific map files, brush types, item counts, and user action sequences to ensure reproducibility and comprehensive coverage. Scenarios should include:
      *   Application startup with no map, a small map, and a large map.
      *   Loading and rendering various complex map features.
      *   Sustained drawing/editing operations (e.g., placing 1000s of items, large area fills).
      *   Memory stress tests: multiple large copy/pastes, rapid tab opening/closing, long editing sessions.
      *   Execution of all major map-wide tools and utilities.
  3.  **Execute Profiling Runs:**
      *   For each scenario on each platform, conduct separate profiling runs for CPU usage and memory analysis (including leak detection).
      *   Collect raw profiling data, snapshots, and any relevant logs.
  4.  **Analyze Data and Compile Report:**
      *   **Report Structure:**
          *   'Executive Summary': High-level overview of key findings and top priority issues.
          *   'Methodology': Tools used, platforms tested, scenarios executed.
          *   'CPU Performance Analysis':
              - Identification of top CPU-consuming functions/modules for each critical scenario.
              - Call stack excerpts for major bottlenecks.
              - Analysis of algorithms or operations causing high CPU load.
          *   'Memory Usage Analysis':
              - Report on any detected memory leaks, with backtraces and suspected causes.
              - Analysis of heap profiling data: identify largest objects, areas of high allocation rates, potential for memory churn.
              - Observations on overall memory footprint and growth over time.
          *   'Platform-Specific Issues': Any notable differences or problems observed on specific OS.
          *   'Prioritized List of Issues': Rank all findings by severity and impact.
          *   'Recommendations for REFACTOR-03': Suggest specific areas of code, data structures, or algorithms to investigate for optimization.

  The: Coder AI should understand that its role for *this specific WBS item* is to process this plan, not to execute the profiling itself. The output of this WBS is the refined plan and, eventually (after a developer performs the work), the profiling report.
