id: BUILD-01
section: Build, Deployment, & Documentation
title: Setup Initial CMake Build System for Qt6 Project
original_input_files:
  - wxwidgets/application.cpp
  - wxwidgets/editor.cpp
  - wxwidgets/map_display.cpp
  - XML/clients.xml
analyzed_input_files:
  - file_path: wxwidgets/application.cpp
    description: |
      Main entry point and core application logic.
      Defines `Application` (from `wxApp`) and `MainFrame` (from `wxFrame`) classes.
      Handles application lifecycle (OnInit, OnExit), event loop, global setup (art providers, image handlers, settings, single instance check, IPC), main window creation, and some platform-specific initializations (like GLUT for Linux/Windows).
      Key for CMake: Defines the main executable target. Shows dependencies on wxWidgets and other core project components (editor, sprites, map, items). Indicates potential OpenGL use.
  - file_path: wxwidgets/editor.cpp
    description: |
      Defines the `Editor` class, encapsulating logic for a single map instance.
      Manages map data (`Map` object), action history (undo/redo via `ActionQueue`), selection (`Selection` object), copy/paste buffer, and brush interactions.
      Handles map loading/saving (OTBM format), import/export, and operations like borderizing.
      Initiates and manages live editing (client/server) functionality.
      Key for CMake: Core source file to be compiled. Depends on numerous project headers (map, brush, live_server, live_client), establishing compile dependencies.
  - file_path: wxwidgets/map_display.cpp
    description: |
      Implements `MapCanvas` (a `wxGLCanvas`) for rendering the map using OpenGL.
      Handles mouse and keyboard events for map interaction (drawing, selection, navigation, zoom, floor changes).
      Manages painting the map via `MapDrawer` and interacts with `Editor` for data.
      Key for CMake: Essential for rendering. Requires OpenGL and wxWidgets. Establishes dependencies on `editor.h`, `map_drawer.h`, etc. (Note: Does not use SFML directly).
  - file_path: XML/clients.xml
    description: |
      XML configuration file defining supported Tibia client versions.
      Maps client version strings to OTB versions, data file signatures (.dat, .spr), data directories, and supported OTBM versions.
      Used by the application at runtime to understand different client asset versions.
      Key for CMake: Critical runtime data file. CMake must copy this (and other related XML/data files) to the build/install output directory for the application to function.
dependencies:
  - BUILD-00 # Assumes BUILD-00 creates the root CMakeLists.txt and basic project structure
current_functionality_summary: |
  Currently, there is no CMake build system for the project. The wxWidgets-based map editor relies on an unspecified build method (likely manual or a different build system).
  This WBS task builds upon BUILD-00 (which creates the root CMakeLists.txt) to further populate the CMake configuration for migrating the application to Qt6 and Qlementine.
  It involves adding package finding, defining the main executable with initial source files, linking libraries, and setting up resource handling to the existing root `CMakeLists.txt`.
qt6_migration_steps: |
  **The following steps modify the root `CMakeLists.txt` created in BUILD-00:**

  1. **Configure Project Paths (if needed):**
     - Add logic to set `CMAKE_PREFIX_PATH` to include paths where Qt6 and Qlementine might be installed, if not in standard locations. This helps `find_package` locate them.

  2. **Find Qt6 Package:**
     - Add `find_package(Qt6 REQUIRED COMPONENTS Widgets Gui OpenGL Core Concurrent)`. Adjust components as necessary based on a more detailed source analysis.
     - (Include directories for Qt6 will typically be handled by linking against Qt6::Components).

  3. **Integrate Local Qlementine Package:**
        - Add the Qlementine library, located in the `qlementine/` subdirectory of the project, to the CMake build.
          In your main `CMakeLists.txt` (assuming it's in the project root):
          ```cmake
          # Add the qlementine subdirectory. This will execute Qlementine's CMakeLists.txt
          # and make its targets available.
          add_subdirectory(qlementine)
          ```
        - This assumes the `qlementine` directory contains its own `CMakeLists.txt` that defines a library target (commonly named `qlementine`).

  4. **Find Other Dependencies (Placeholder - to be detailed in subsequent tasks):**
     - Add commands to find `ZLIB`, `OpenGL` (if Qt6::OpenGL is not sufficient), and `PugiXML` (if used directly and not vendored).

  5. **Define Executable Target:**
     - Define the main application executable: `add_executable(RME_Qt ${APP_SOURCES})`.
     - Create an `APP_SOURCES` variable listing essential .cpp files like:
       - `wxwidgets/application.cpp` (will need significant Qt-specific refactoring)
       - `wxwidgets/editor.cpp`
       - `wxwidgets/map_display.cpp` (will be replaced/refactored for Qt rendering)
       - Other core logic files identified.
     - (Note: Many wxWidgets specific UI files will be replaced by Qt versions in later tasks. This initial setup might include them temporarily if aiming for a phased build, or focus on non-UI core logic first.)

  6. **Link Libraries:**
     - Add `target_link_libraries(RME_Qt PRIVATE Qt6::Widgets Qt6::Gui Qt6::OpenGL Qt6::Core Qt6::Concurrent qlementine)`.
     - Add other dependencies like ZLIB if found.

  7. **Include Directories:**
     - Add `target_include_directories(RME_Qt PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}")`.
     - Add include paths for Qt, Qlementine, and other libraries if not handled by `target_link_libraries`.

  8. **Handle Resources:**
     - Define a variable `CRITICAL_XML_FILES` listing files like `XML/clients.xml` and other XMLs from the `XML/` directory that are essential at runtime.
     - Add `file(COPY ${CRITICAL_XML_FILES} DESTINATION ${CMAKE_BINARY_DIR}/data/XML)` to copy these files into a `data/XML` subdirectory within the build directory. This preserves their relative paths if the application expects `XML/...`.
     - For installation, add `install(DIRECTORY XML/ DESTINATION data/XML PATTERN "*.xml" PATTERN "*.otb" PATTERN "*.otfi")` to copy relevant files from the source `XML` directory to `data/XML` in the installation path. Adjust patterns as needed for other file types in `XML/`.
     - If using Qt's resource system for other assets (e.g., icons), define a `resources.qrc` file and use `qt_add_resources(RME_Qt_resources "resources.qrc")`.

  9. **Platform Specifics (Initial):**
     - Add basic settings for Windows (e.g., `if(WIN32)`, `add_executable(RME_Qt WIN32 ${APP_SOURCES})`, `endif()`).
     - Add basic settings for macOS (e.g., `MACOSX_BUNDLE`).

  10. **Generate Source Group (Optional but good practice):**
      - Add `source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/wxwidgets FILES ${APP_SOURCES})` to organize original wxwidgets files in IDEs if they are part of `APP_SOURCES` initially.

definition_of_done: |
  - The root `CMakeLists.txt` (from BUILD-00) is successfully modified and extended.
  - `find_package` successfully locates Qt6 (Widgets, Gui, OpenGL, Core, Concurrent) and Qlementine within the root `CMakeLists.txt`.
  - A basic executable target (e.g., `RME_Qt`) is defined in the root `CMakeLists.txt`, compiling a minimal set of core source files.
  - The executable links correctly against Qt6 and Qlementine libraries.
  - Critical data files (like `XML/clients.xml` and other XMLs) are copied to a `data/XML` subdirectory in the build output directory for runtime access.
  - The project can be configured by CMake (e.g., `cmake -B build -S .`) and built (e.g., `cmake --build build`) to produce an executable on the development platform using the modified root `CMakeLists.txt`.
  - Basic platform-specific settings for Windows/macOS are integrated into the root `CMakeLists.txt`.
boilerplate_coder_ai_prompt: |
  Modify the root `CMakeLists.txt` file (which was initially created by task BUILD-00), based on the analysis of `wxwidgets/application.cpp`, `wxwidgets/editor.cpp`, `wxwidgets/map_display.cpp`, and `XML/clients.xml`. This task continues the setup for a C++17 project migrating from wxWidgets to Qt6 and Qlementine by *adding* the following capabilities to the existing `CMakeLists.txt`:

  1.  Add logic to ensure `CMAKE_PREFIX_PATH` is correctly set if Qt6/Qlementine are in non-standard locations.
  2.  Add `find_package` calls for Qt6 (Components: Widgets, Gui, OpenGL, Core, Concurrent).
  3.  Add a `find_package` call for Qlementine.
  4.  Define an executable target named `RME_Qt`. For now, list these source files in a variable `APP_SOURCES`:
      - `wxwidgets/application.cpp` (this will be refactored to Qt later)
      - `wxwidgets/editor.cpp`
      - `wxwidgets/map_display.cpp` (this will be refactored to Qt later)
      (Assume these are placeholders for core logic; UI parts will change significantly).
  5.  Link `RME_Qt` against `Qt6::Widgets`, `Qt6::Gui`, `Qt6::OpenGL`, `Qt6::Core`, `Qt6::Concurrent`, and `Qlementine::Qlementine`.
  6.  Set up include directories for the project itself as needed (Qt6 and Qlementine includes are often handled by `target_link_libraries` with modern CMake).
  7.  Add commands to copy critical XML files from the `XML/` source directory (like `clients.xml`, `items.xml`, etc.) to a `data/XML/` subdirectory in the CMake binary directory (e.g., `${CMAKE_BINARY_DIR}/data/XML/`). Also, set up installation rules for these files.
  8.  Integrate basic platform settings for WIN32 (for `add_executable`) and MACOSX_BUNDLE if applicable.
  9.  Ensure all additions to the CMake script are well-commented.
documentation_references:
  - "https://doc.qt.io/qt-6/cmake-get-started.html"
  - "https://doc.qt.io/qt-6/cmake-build-systems.html"
  - "https://doc.qt.io/qt-6/cmake-manual.html"
  - "qlementine/README.md (local copy)"
  - "qlementine/docs/usage.md (local copy, for CMake integration and basic setup)"
  - "https://cmake.org/cmake/help/latest/manual/cmake-tutorial.7.html"
  - "https://cmake.org/cmake/help/latest/guide/tutorial/index.html"
