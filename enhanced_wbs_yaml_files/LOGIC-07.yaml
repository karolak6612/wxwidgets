wbs_item_id: LOGIC-07
name: Port Spawn & Group Management
description: Migrate the logic for creating, managing, and storing creature/item spawns
  and group definitions. This includes spawn areas, spawn times, creature/item lists
  within spawns, and how groups of spawns are defined and managed.
dependencies:
- CORE-03
- RENDER-02
- UI-08
input_files:
- wxwidgets/spawn.cpp
- wxwidgets/spawn.h
analyzed_input_files:
- file_path: wxwidgets/spawn.cpp
  description: Implements the `Spawns` class, which manages a set of tile positions
    that are designated as spawn points.
- file_path: wxwidgets/spawn.h
  description: Defines the `Spawn` class (primarily for spawn radius/size on a tile)
    and the `Spawns` class (a manager for `SpawnPositionList`). The actual list of
    creatures and spawn time are typically stored directly on the Tile object in RME.
documentation_references:
- 'Qt Data Structures: https://doc.qt.io/qt-6/qtcore-containers.html (e.g., QSet for
  positions)'
current_functionality_summary: 'The provided `spawn.h` defines a `Spawn` class that
  mainly stores a `size` (radius) and selection state. It does not store the list
  of creatures or spawn timings.

  The `Spawns` class manages a `std::set<Position>` (`SpawnPositionList`), effectively
  keeping track of which tile positions are considered spawn points.

  - `Spawns::addSpawn(Tile* tile)` adds a tile''s position to this set, assuming `tile->spawn`
  (the Spawn object with radius) is already set on the tile.

  - `Spawns::removeSpawn(Tile* tile)` removes a tile''s position from the set.

  The actual list of creatures to spawn and the spawn interval are typically attributes
  of the `Tile` object itself in the OTBM map format, rather than being managed by
  these specific `Spawn` or `Spawns` classes.

  "Group Management" in this context likely refers to managing the group of creatures
  within a single spawn definition on a tile.'
definition_of_done:
- A Qt6 `SpawnProperties` class/struct is defined (e.g., in `spawn.h` or `tile.h`)
  to store the spawn radius (integer) associated with a tile. (The original `Spawn`
  class mostly served this purpose).
- 'The main `Tile` class (or its Qt6 equivalent) is augmented to store:'
- '  - An optional `SpawnProperties` object (or `std::optional<SpawnProperties>`).'
- '  - A `QList<QString>` to hold the names of creatures in this tile''s spawn list.'
- '  - An `int` for the spawn time/interval in seconds.'
- A Qt6 `SpawnManager` class is implemented to maintain a registry of all tile positions
  that function as spawn points (e.g., using `QSet<Position>`).
- The `SpawnManager` provides methods `void registerSpawnTile(const Position& pos);`
  and `void unregisterSpawnTile(const Position& pos);` to update its registry.
- The logic for creating, reading, updating, and deleting the spawn radius, creature
  list, and spawn time is primarily handled by direct modifications to the `Tile`
  object's properties. The `SpawnManager` serves as a central point to quickly identify
  all spawn locations.
- The system is prepared for integration with OTBM loading/saving (CORE-03), where
  the tile attributes (radius, creature list, spawn time) will be read/written.
boilerplate_coder_ai_prompt: "Your task is to port the conceptual system for managing\
  \ spawn points to Qt6, based on the provided `wxwidgets/spawn.cpp` and `wxwidgets/spawn.h`.\
  \ The original system had a `Spawn` class for radius and a `Spawns` class to track\
  \ positions of spawn tiles. In OTBM, detailed spawn data (creatures, interval) is\
  \ typically stored directly on the tile.\n\n**1. `SpawnProperties` Data Structure\
  \ (e.g., in `spawn.h` or `tile.h`):**\n   - Define a simple C++ class or struct,\
  \ possibly named `SpawnProperties`.\n   - It should store: `int radius;` (the spawn\
  \ area size).\n   - (The `selected` member from the original `Spawn` class is more\
  \ of a UI concern and might be handled differently, e.g., by the selection system).\n\
  \n**2. Augmenting the `Tile` Class (Conceptual - actual changes in Tile's own task):**\n\
  \   - The main `Tile` class (or its Qt6 equivalent) will be the primary owner of\
  \ spawn data. Ensure it can store:\n     - `std::optional<SpawnProperties> spawn_props;`\
  \ (or a pointer `SpawnProperties* spawn_props = nullptr;`). This will hold the radius\
  \ if the tile is a spawn point.\n     - `QList<QString> creature_list;` // List\
  \ of creature names for this spawn.\n     - `int spawn_time_seconds;` // Respawn\
  \ interval.\n   - The `Tile` class should have methods like `bool isSpawn() const\
  \ { return spawn_props.has_value(); }`, `void setSpawn(int radius, const QList<QString>&\
  \ creatures, int time_secs)`, `void clearSpawn()`.\n\n**3. `SpawnManager` Class\
  \ (Registry of Spawn Locations):**\n   - Create a `SpawnManager` class.\n   - Its\
  \ main role is to keep a fast lookup of all tiles that are spawn points.\n   - Internally,\
  \ use `QSet<Position> m_spawn_locations;` (assuming `Position` is defined and hashable).\n\
  \   - **`void registerSpawnLocation(const Position& pos);`**: Adds `pos` to `m_spawn_locations`.\
  \ This would be called when a tile at `pos` is configured as a spawn (e.g., its\
  \ `spawn_props` are set).\n   - **`void unregisterSpawnLocation(const Position&\
  \ pos);`**: Removes `pos` from `m_spawn_locations`. This is called when a tile at\
  \ `pos` is no longer a spawn (e.g., `tile->clearSpawn()` is called).\n   - **`bool\
  \ isSpawnLocation(const Position& pos) const;`**: Checks if `pos` is in `m_spawn_locations`.\n\
  \   - Provide methods to iterate over all registered spawn locations (`const QSet<Position>&\
  \ getSpawnLocations() const;`).\n\n**4. Core Logic for Modifying Spawns:**\n   -\
  \ Creating a spawn on a tile: Set the `spawn_props` (radius), `creature_list`, and\
  \ `spawn_time_seconds` on the `Tile` object, then call `spawnManager.registerSpawnLocation(tile->getPosition())`.\n\
  \   - Modifying a spawn: Directly modify the properties on the `Tile` object.\n\
  \   - Removing a spawn from a tile: Clear the spawn properties on the `Tile` object\
  \ (e.g., `tile->clearSpawn()`) and then call `spawnManager.unregisterSpawnLocation(tile->getPosition())`.\n\
  \n**5. Group Management:**\n   - \"Group Management\" in this context refers to\
  \ managing the `QList<QString> creature_list` on each `Tile` that is a spawn point.\
  \ There's no indication of a system for grouping multiple distinct spawn areas together\
  \ under a common name in `spawn.cpp`/`.h`.\n\n**6. File I/O:**\n   - The `SpawnManager`\
  \ itself doesn't handle file I/O. The OTBM loader/saver (task `CORE-03`) will read/write\
  \ the spawn radius, creature list, and spawn time directly from/to each tile's attributes.\
  \ When a map is loaded, and tiles with spawn data are created, they should register\
  \ their positions with the `SpawnManager`.\n\nPopulate the `analyzed_input_files`\
  \ section by reading the first 200 lines of `wxwidgets/spawn.cpp` and `wxwidgets/spawn.h`\
  \ and calculating their MD5 hashes."
