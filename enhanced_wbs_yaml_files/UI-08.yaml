id: UI-08
section: UI Elements
title: "Port Spawn Creation Settings and Spawn Properties Editor"
original_task_id: UI-08
description: "Recreate UI components for setting parameters when creating new spawns via the Creature Palette, and implement a new dialog for viewing and editing properties (radius, creature list, respawn time) of existing spawn points on the map."
dependencies:
  - "UI-06"        # Creature Palette functionality (which includes controls for new spawn parameters) and a Creature Finder Dialog.
  - "LOGIC-07"     # Defines mapcore::SpawnProperties and tile attributes for spawns (e.g., creature_list, spawn_time_seconds).
  - "CORE-02"      # For mapcore::CreatureType definitions (used when adding creatures to a spawn).
  - "REFACTOR-01"  # For AppSettings, potentially for default spawn values.
  - "BUILD-01"     # CMake setup.
  - "LOGIC-01"
input_files:
  - "wxwidgets/palette_creature.cpp"
  - "wxwidgets/palette_creature.h"
  - "wxwidgets/old_properties_window.cpp"
  - "wxwidgets/old_properties_window.h"
analyzed_input_files:
  - filepath: "wxwidgets/palette_creature.h"
    description: "Declares `CreaturePalettePanel`. For UI-08, the relevant UI elements are `creature_spawntime_spin` (wxSpinCtrl for spawn time in seconds, applies to tile), `spawn_size_spin` (wxSpinCtrl for spawn radius), and `spawn_brush_button` (wxToggleButton to activate spawn placement mode). These controls are used to define parameters when the 'Spawn Brush' mode is active, affecting how new spawns are created when a creature from the palette is placed on the map."
  - filepath: "wxwidgets/palette_creature.cpp"
    description: "Implements `CreaturePalettePanel`. `OnClickSpawnBrushButton` activates the spawn placement mode. `OnChangeSpawnTime` and `OnChangeSpawnSize` handle updates from the spin controls. These values, along with the currently selected creature in the palette, are utilized by `g_gui` (presumably when `g_gui.SelectBrush()` is called or when a brush is applied to the map) to configure the properties of a *newly created* spawn or the tile it's placed on. The selected creature in the palette becomes the initial creature for a new spawn."
  - filepath: "wxwidgets/old_properties_window.h"
    description: "Declares `OldPropertiesWindow`. For UI-08, the key part is the constructor overload `OldPropertiesWindow(wxWindow* parent, const Map* map, const Tile* tile, Spawn* spawn, wxPoint pos)`. This constructor is invoked when properties of an existing spawn object (the visual radius indicator) are to be edited."
  - filepath: "wxwidgets/old_properties_window.cpp"
    description: "Implements `OldPropertiesWindow`. When the constructor is called with a `Spawn*` object (`edit_spawn`), it creates a very simple UI consisting of a `wxSpinCtrl` (named `count_field` in this context) that is used to display and edit the `edit_spawn->getSize()` (the spawn radius). It does *not* provide UI for editing the list of creatures within an existing spawn, nor for editing the respawn time associated with an existing spawn tile. These attributes are part of the `Tile` itself rather than the `Spawn` object."
documentation_references:
  - 'QDialog: https://doc.qt.io/qt-6/qdialog.html'
  - 'QSpinBox: https://doc.qt.io/qt-6/qspinbox.html'
  - 'QListWidget: https://doc.qt.io/qt-6/qlistwidget.html'
  - 'QPushButton: https://doc.qt.io/qt-6/qpushbutton.html'
  - 'QFormLayout: https://doc.qt.io/qt-6/qformlayout.html'
  - 'QLabel: https://doc.qt.io/qt-6/qlabel.html'
current_functionality_summary: |
  The legacy system handles spawn creation and editing of existing spawn properties as follows:
  1.  **Creating New Spawns**:
      *   The `CreaturePalettePanel` (part of the Creature Palette, UI-06) has a "Spawn Brush" mode toggle.
      *   When this mode is active, `wxSpinCtrl` controls within `CreaturePalettePanel` allow the user to set a "Spawntime" (which applies to the tile's specific respawn interval) and a "Size" (the spawn radius).
      *   When a creature is selected from the palette and placed on the map in this mode, a new spawn is effectively created on that tile. The selected creature is added to the tile's internal list of creatures for that spawn point. The tile's `SpawnProperties` are set with the chosen radius, and the tile's specific respawn time is set.
  2.  **Editing Existing Spawns**:
      *   If an existing `Spawn` object (the visual radius indicator, typically on the center tile of a spawn area) is selected and its properties are opened, the `OldPropertiesWindow` is displayed.
      *   This dialog *only* allows editing the spawn radius (`Spawn::getSize()`).
      *   It does **not** provide any mechanism to view or edit the list of creatures associated with that spawn point (which is stored on the `Tile` object, e.g., `tile->creature_spawn_list`).
      *   It also does **not** provide any mechanism to edit the respawn time for that specific spawn point (stored on the `Tile` object, e.g., `tile->spawn_time_seconds`).
  "Group Management" (managing the list of creatures within an existing spawn) is therefore not supported by the legacy properties dialogs for already placed spawns.
definition_of_done:
  - The existing 'Spawn Time' and 'Spawn Radius' controls in the `CreaturePaletteQt` (from `UI-06`, hosted in `UI-02`'s palette system) correctly configure parameters when the 'Place Spawn Area' mode is active. When a creature brush is applied in this mode:
    - The target tile's `mapcore::SpawnProperties` are set with the chosen radius.
    - The name of the selected creature from the palette is added to the target tile's creature spawn list (e.g., `tile->addCreatureToSpawnList(creatureName)`).
    - The target tile's specific respawn interval is set using the 'Spawn Time' value from the palette (e.g., `tile->setSpawnTimeSeconds(time)`).
    - The `SpawnManager` is notified of the new/updated spawn location if necessary.
  - A new `EditSpawnDialogQt` (subclass of `QDialog`) is implemented for editing properties of an *existing* spawn point (defined by a tile with spawn attributes).
  - The `EditSpawnDialogQt` is invokable (e.g., via a map context menu when a tile with spawn properties is selected).
  - The `EditSpawnDialogQt` allows viewing and modifying:
    - The spawn radius (`QSpinBox`), which will update the `mapcore::SpawnProperties` associated with the tile.
    - The list of creature names within the spawn (`QListWidget` with Add/Remove `QPushButton`s). The 'Add' button uses a creature selection dialog (e.g., `CreatureFinderDialogQt` from `UI-06`, or a new generic one if `UI-06` is too specific). This modifies the tile's creature spawn list data.
    - The overall respawn time for that specific spawn point/tile (`QSpinBox`), updating the tile's specific respawn time data.
  - Changes made in `EditSpawnDialogQt` operate on copies of the relevant data from the `mapcore::Tile`. Upon 'OK', the dialog emits a signal with the modified data (e.g., new radius, new creature list, new respawn time).
  - The calling code (e.g., `EditorController` or map context menu handler) connects to this signal and creates an undoable `Action` to apply these changes to the actual `mapcore::Tile` object.
  - The `EditSpawnDialogQt` correctly loads the existing spawn properties (radius, creature list, respawn time) from the selected tile's data when opened.
  - All UI elements in `EditSpawnDialogQt` have `objectName` properties set for testability.
estimation_effort: Medium (9-13 developer days)
known_missing_files: []
boilerplate_coder_ai_prompt: |
  Your task is to implement the Qt6 UI components for creating and editing creature spawns. This involves:
  1. Ensuring spawn parameter controls on the `CreaturePaletteQt` (from `UI-06`) correctly configure new spawns.
  2. Creating a new `EditSpawnDialogQt` for editing existing spawn points on map tiles.

  **I. `CreaturePaletteQt` Spawn Settings (Refinements for functionality in `UI-06`):**
  *   When the "Place Spawn Area" mode is active in `CreaturePaletteQt`:
      *   The existing `QSpinBox* m_spawnTimeSpin;` and `QSpinBox* m_spawnRadiusSpin;` values should be used.
      *   When a creature is selected from the palette and then placed on a map tile (this logic is likely in `MapCanvas` or `EditorController`):
          1.  An undoable `Action` should be created by the `EditorController`.
          2.  This action, when executed, will:
              a.  Retrieve the target `mapcore::Tile*`.
              b.  Set its spawn radius: `tile->getSpawnPropertiesForEdit()->setRadius(m_spawnRadiusSpin->value());` (or equivalent method in `mapcore::Tile`).
              c.  Clear any existing creatures in the tile's spawn list: `tile->getCreatureSpawnListForEdit().clear();` (or equivalent).
              d.  Add the name of the selected `mapcore::CreatureType` from the palette to the tile's spawn list: `tile->addCreatureToSpawnList(selectedCreatureType->getInternalName());` (or equivalent).
              e.  Set the tile's specific respawn time: `tile->setSpawnTimeSeconds(m_spawnTimeSpin->value());` (or equivalent).
              f.  Mark the map as changed.

  **II. `EditSpawnDialogQt : QDialog` (New Dialog Class):**
  *   This dialog edits an *existing* spawn point's properties on a specific tile.
  *   Header (`edit_spawn_dialog_qt.h`):
      ```cpp
      #pragma once
      #include <QDialog>
      #include <QStringList>
      // Forward declare Qt controls and mapcore types if not fully included
      class QSpinBox;
      class QListWidget;
      class QPushButton;
      class QDialogButtonBox;
      namespace mapcore { class Tile; class CreatureManager; /* or similar for finding creatures */ }

      class EditSpawnDialogQt : public QDialog {
          Q_OBJECT
      public:
          EditSpawnDialogQt(QWidget* parent, mapcore::Tile* tileDataSource, mapcore::CreatureManager* creatureManager); // Pass CreatureManager for finder
          ~EditSpawnDialogQt() override = default;

          int getSpawnRadius() const;
          int getRespawnTime() const;
          QStringList getCreatureList() const;

      private slots:
          void onAddItem();
          void onRemoveItem();
          void accept() override; // To perform validation before accepting

      private:
          void loadData();

          mapcore::Tile* m_tileDataSource; // To read initial data
          mapcore::CreatureManager* m_creatureManager; // For creature finder

          QSpinBox* m_radiusSpinBox;
          QSpinBox* m_respawnTimeSpinBox;
          QListWidget* m_creatureListWidget;
          QPushButton* m_addButton;
          QPushButton* m_removeButton;
          QDialogButtonBox* m_buttonBox;

          // Internal data copies for modification
          int m_currentRadius;
          int m_currentRespawnTime;
          QStringList m_currentCreatureList;
      };
      ```
  *   Source (`edit_spawn_dialog_qt.cpp`):
      -   Constructor: Initialize UI elements (labels, spin boxes, list widget, buttons). Store `tileDataSource` and `creatureManager`. Call `loadData()`. Connect button signals to slots.
      -   `loadData()`:
          -   `m_radiusSpinBox->setValue(m_tileDataSource->getSpawnProperties() ? m_tileDataSource->getSpawnProperties()->getRadius() : 0);`
          -   `m_respawnTimeSpinBox->setValue(m_tileDataSource->getSpawnTimeSeconds());`
          -   `m_creatureListWidget->clear();`
          -   `m_currentCreatureList = m_tileDataSource->getCreatureSpawnList();` // Assuming QStringList or adaptable
          -   `m_creatureListWidget->addItems(m_currentCreatureList);`
      -   `onAddItem()`:
          -   Open `CreatureFinderDialogQt` (assume available from `UI-06`, ensure it can be used for selecting a creature name/ID).
          -   If a creature is selected, add its name to `m_currentCreatureList` and `m_creatureListWidget`.
      -   `onRemoveItem()`: Remove selected item(s) from `m_currentCreatureList` and `m_creatureListWidget`.
      -   `accept()` (override):
          -   Validate radius (>0 if `m_currentCreatureList` is not empty, else can be 0).
          -   Validate respawn time (>=0).
          -   If valid, `m_currentRadius = m_radiusSpinBox->value(); m_currentRespawnTime = m_respawnTimeSpinBox->value();`
          -   Call `QDialog::accept();`.
          -   If invalid, show `QMessageBox::warning`.
      -   Getter methods: `getSpawnRadius()`, `getRespawnTime()`, `getCreatureList()` return the values from `m_currentRadius`, `m_currentRespawnTime`, `m_currentCreatureList`.

  **Integration:**
  *   The map context menu (right-click on a tile) should provide an "Edit Spawn..." option if `tile->getSpawnProperties() != nullptr` or `tile->hasSpawnCreatures()`.
  *   This option will instantiate `EditSpawnDialogQt(this, tile, &m_creatureManager)`.
  *   If `dialog.exec() == QDialog::Accepted`:
      -   Retrieve `newRadius = dialog.getSpawnRadius()`, `newCreatureList = dialog.getCreatureList()`, `newRespawnTime = dialog.getRespawnTime()`.
      -   Create an undoable `Action` that captures the old state of the tile's spawn radius, creature list, and respawn time.
      -   The `Action`'s `redo()` method will apply the `newRadius`, `newCreatureList`, and `newRespawnTime` to the actual `mapcore::Tile`.
      -   The `Action`'s `undo()` method will restore the old state.
      -   Push the action onto the `ActionQueue`.
