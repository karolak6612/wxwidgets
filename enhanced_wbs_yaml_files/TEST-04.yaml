wbs_item_id: TEST-04
name: Unit Test Brush & Material Logic
description: Develop unit tests for the brush and material system. This includes testing brush application logic (e.g., how ground, wall, item, doodad, creature brushes modify the map), border auto-tiling, and correct handling of material properties.
dependencies:
- CORE-03
- CORE-04
- TEST-01
input_files: []
analyzed_input_files: []
documentation_references:
- 'Qt Test Framework: https://doc.qt.io/qt-6/qttest-index.html'
- 'Data-Driven Testing with Qt Test: https://doc.qt.io/qt-6/qttest-datadriven-testing.html'
current_functionality_summary: This task is for creating new unit tests for the Qt6 brush and material system. The system itself, developed under CORE-04, handles the logic for how different brush types (ground, wall, item, doodad, creature, eraser) modify the map data. These tests will validate this application logic, including complex behaviors like auto-bordering for ground tiles and correct placement of multi-tile doodads.
definition_of_done:
- Unit tests using the Qt Test framework are created for the core application logic of each significant brush type (ground, wall, item/raw, doodad, creature, eraser).
- 'Ground brush tests thoroughly verify:'
- '  - Placement of correct ground item(s) based on brush definition (including variations/chances if applicable).'
- '  - Accurate auto-bordering logic: Correct border items are placed when a ground tile is painted next to tiles of different ground types or void tiles. Tests cover all edge and corner cases (N, S, E, W, NE, NW, SE, SW) and transitions between various material types, using (mocked) data from `borders.xml` definitions.'
- '  - Handling of ''friend'' brush rules in border determination.'
- 'Wall brush tests verify:'
- '  - Correct item IDs and placement for all wall segment types (horizontal, vertical, poles, corners, T-junctions, diagonals).'
- '  - Proper auto-connection of adjacent wall segments.'
- '  - Correct placement and properties of doors/windows embedded within wall segments.'
- 'Doodad brush tests verify:'
- '  - Accurate placement of all constituent items for multi-tile composite doodads, including their relative x, y, and z offsets from the application point.'
- '  - Correct behavior for simple (single-item) doodad brushes.'
- Creature brush tests confirm that applying the brush correctly assigns the specified creature to a tile (or its spawn list if that's the mechanism).
- Eraser brush tests validate the correct removal of different map elements.
- Tests use a controlled/mock `Map` environment to apply brushes and assert tile states.
- All created unit tests pass successfully.
- Tests are integrated into the CMake build system for automated execution.
boilerplate_coder_ai_prompt: |-
  Your task is to create unit tests for the brush and material application logic of the Qt6 Remere's Map Editor, using the Qt Test framework. This will primarily test the brush functionalities implemented in `CORE-04` (Port Brush & Materials System) and their interaction with the `Map` and `Tile` objects.

  **General Approach:**
  1.  For each brush type or specific logic (e.g., ground auto-bordering), create a dedicated test class inheriting from `QObject`.
  2.  In `initTestCase()` or per-test setup, create a small, manageable `Map` object. You may need to mock parts of the `Map` or `Tile` interface if they introduce too many dependencies for a unit test, or use simplified versions.
  3.  Load/create specific brush instances for testing. These brushes should be defined using minimal, focused XML data snippets (mocked versions of `grounds.xml`, `walls.xml`, `doodads.xml`, `borders.xml` etc.) rather than relying on full game data.
  4.  Programmatically "apply" the brush to specific tiles or areas on your test map. This might involve calling a method like `brush->apply(map, tile_position, parameters)`.
  5.  After brush application, query the state of the affected `Tile` objects and their contents (ground item, item stack, wall items, creature data, etc.) and assert that they match the expected outcome.

  **Specific Brush Behaviors to Test:**

  *   **Ground Brushes:**
      - **Basic Placement:** Applying a ground brush sets the correct ground item ID on the tile. If the brush has multiple items with chances, test that (over many iterations or by controlling randomness) the distribution is as expected, or at least that valid items are chosen.
      - **Auto-Bordering (Critical):**
          - Create scenarios with adjacent tiles having different ground types (e.g., Tile A with 'grass', Tile B with 'dirt'). Apply the 'grass' brush to Tile A. Verify that the correct border items (e.g., 'grass_dirt_edge_N', 'grass_dirt_corner_NE') are placed on Tile A and/or Tile B according to rules defined in a mock `borders.xml`.
          - Test all 8 directions for borders (N, S, E, W, NE, NW, SE, SW) plus internal corners if applicable.
          - Test transitions to 'void' or 'none' tiles.
          - Test "friend" brush logic: If 'grass' and 'meadow' are friends, ensure no border is drawn between them.
      - Test complex conditional borders from `grounds.xml` if any are particularly intricate.

  *   **Wall Brushes:**
      - **Segment Placement:** Test placing each wall type (horizontal, vertical, pole, corner, T-junction, diagonal). Verify the correct item ID for the segment is placed on the tile.
      - **Auto-Connection:** When placing a wall segment adjacent to an existing compatible wall, verify they connect correctly (e.g., forming a proper corner or extending a line).
      - **Doors/Windows:** Test applying a wall brush that includes door/window definitions. Verify the correct door/window item is placed with its properties like type/state.

  *   **Item/Raw Brushes (if distinct from Doodad Brushes for single items):**
      - Applying an item brush places the specified item on the target tile.
      - If the brush can place multiple items (like a palette selection), test this.

  *   **Doodad Brushes:**
      - **Single-Tile Doodads:** Verify the correct item ID is placed.
      - **Multi-Tile Composite Doodads:** This is crucial.
          - Define a test doodad with multiple items at different relative x, y, and z coordinates.
          - Apply the brush.
          - Verify that *each* item of the composite doodad is placed on the correct absolute tile position on the map, considering the brush application point as the origin for the doodad's local coordinates.
          - Verify items with z-offsets are handled correctly (e.g., placed on a higher effective layer or tile stack position).
      - Test doodad properties like `on_blocking` if they affect how the items are placed or tile properties are modified.

  *   **Creature Brushes:**
      - Applying a creature brush to a tile should result in that creature being associated with the tile (e.g., `tile->setCreature(creature_name)`).

  *   **Eraser Brushes:**
      - **Erase Item:** Remove top item, or all items of a certain type.
      - **Erase Wall:** Remove wall items. Test that adjacent walls correctly update their appearance (e.g., a T-junction becomes a straight wall).
      - **Erase Doodad:** Remove all parts of a multi-tile doodad.
      - **Erase Ground:** Revert tile's ground to a default 'void' or empty type. Ensure borders with adjacent tiles update.
      - **Erase Creature/Spawn:** Clear creature/spawn information from a tile.

  **Test Data Management:**
  - Create helper functions to generate mock XML strings for specific brushes or border definitions on the fly for each test, or load them from very small, dedicated test files. This keeps tests independent and focused.

  Integrate all Qt Test classes into your CMake build system.
