wbs_item_id: UI-07
name: Port House & Waypoint Tools
description: Recreate UI components for managing houses (palette, editor dialog) and
  waypoints (palette).
dependencies:
- 'UI-02   # House and Waypoint palettes are tabs in the main palette system.'
- 'CORE-03 # For map saving/loading which includes house and waypoint data.'
- 'LOGIC-04 # For Waypoint and WaypointManager data structures.'
- 'LOGIC-05 # For House and Town data structures and management.'
input_files:
- wxwidgets/palette_house.cpp
- wxwidgets/palette_house.h
- wxwidgets/palette_waypoints.cpp
- wxwidgets/palette_waypoints.h
analyzed_input_files:
- file_path: wxwidgets/palette_house.cpp
  description: Implements `HousePalettePanel` using wxChoice for towns, SortableListBox
    for houses, buttons for Add/Edit/Remove, and toggles for House/Exit brushes. Defines
    `EditHouseDialog` for house properties.
- file_path: wxwidgets/palette_house.h
  description: Header for `HousePalettePanel` and `EditHouseDialog`.
- file_path: wxwidgets/palette_waypoints.cpp
  description: Implements `WaypointPalettePanel` using wxListCtrl for displaying and
    editing waypoint names, with Add/Remove buttons.
- file_path: wxwidgets/palette_waypoints.h
  description: Header for `WaypointPalettePanel`.
documentation_references:
- 'QComboBox: https://doc.qt.io/qt-6/qcombobox.html'
- 'QListWidget: https://doc.qt.io/qt-6/qlistwidget.html'
- 'QDialog: https://doc.qt.io/qt-6/qdialog.html'
- QRadioButton / QActionGroup for brush mode selection.
current_functionality_summary: 'The `HousePalettePanel` provides a UI to:

  - Select a town using a `wxChoice` control.

  - List houses within that town in a `SortableListBox`.

  - Add, Edit (via `EditHouseDialog`), and Remove houses.

  - Implement a context menu for moving houses to different towns.

  - Toggle between a "House Tile Brush" and a "Set House Exit" brush mode, configuring
  a global house brush with the selected house.

  The `EditHouseDialog` allows editing a house''s name, town, rent, ID, and guildhall
  status.


  The `WaypointPalettePanel` provides a UI to:

  - List all waypoints in a `wxListCtrl` (names are editable).

  - Add new waypoints (name becomes editable).

  - Remove selected waypoints.

  - Selecting a waypoint sets a global waypoint brush.'
definition_of_done:
- 'The ''House'' tab in the main palette system (`UI-02`) is fully implemented:'
- '  - A `QComboBox` lists towns from the current map (plus a ''(No Town)'' option).
  Selecting a town filters the `QListWidget` of houses.'
- '  - The `QListWidget` displays houses for the selected town, showing house name,
  ID, and size. It supports multi-selection for removal or moving.'
- '  - An ''Add House'' `QPushButton` opens the `EditHouseDialogQt` for defining a
  new house.'
- '  - An ''Edit House'' `QPushButton` opens the `EditHouseDialogQt` for the single
  selected house.'
- '  - A ''Remove House'' `QPushButton` removes all selected house(s) after confirmation.'
- '  - A context menu on the house list offers ''Move to Town...'', which opens a
  dialog to select a new town for the selected house(s).'
- '  - `QRadioButton`s or a `QActionGroup` allows switching between ''Draw House Tiles''
  and ''Set House Exit'' brush modes, configuring the global house brush accordingly.'
- 'The `EditHouseDialogQt` (subclass of `QDialog`) is implemented:'
- '  - Allows editing/setting house name (`QLineEdit`), town (`QComboBox`), rent (`QSpinBox`),
  ID (`QSpinBox` with warnings for changes/duplicates), and guildhall status (`QCheckBox`).'
- '  - Loads data from a `House` object copy and applies validated changes back to
  the copy on ''OK''.'
- 'The ''Waypoint'' tab in the main palette system (`UI-02`) is fully implemented:'
- '  - A `QListWidget` displays all waypoints from the map. Waypoint names are editable
  in-place (`Qt::ItemIsEditable`).'
- '  - An ''Add Waypoint'' `QPushButton` creates a new waypoint with a default unique
  name in the map data and list, then initiates editing of the new item''s name.'
- '  - A ''Remove Waypoint'' `QPushButton` removes the selected waypoint(s) from the
  map data and list after confirmation.'
- Selecting a house (and brush mode) or a waypoint in their respective palettes correctly
  configures and activates the corresponding global brush (`HouseBrush`, `HouseExitBrush`,
  `WaypointBrush`) for use on the map canvas.
- All palette lists and controls are updated when the underlying map data (houses,
  towns, waypoints) changes.
boilerplate_coder_ai_prompt: "Your task is to implement the Qt6 UI components for\
  \ managing Houses and Waypoints, specifically their palette tabs and the House editing\
  \ dialog.\n\n**Reference Files:** `wxwidgets/palette_house.cpp`, `wxwidgets/palette_house.h`,\
  \ `wxwidgets/palette_waypoints.cpp`, `wxwidgets/palette_waypoints.h`.\n\n**1. House\
  \ Palette Tab (within main `paletteTabWidget` from `UI-02`):**\n   - **Controls:**\n\
  \     - `QComboBox* townCombo;`\n     - `QListWidget* houseList;` (Set `SelectionMode`\
  \ to `ExtendedSelection` for multi-delete/move)\n     - `QPushButton* addHouseButton;`\n\
  \     - `QPushButton* editHouseButton;`\n     - `QPushButton* removeHouseButton;`\n\
  \     - `QRadioButton* drawHouseTilesRadio;` (Text: \"Draw House Tiles\")\n    \
  \ - `QRadioButton* setHouseExitRadio;` (Text: \"Set House Exit\")\n     - (Group\
  \ the radio buttons)\n   - **Functionality:**\n     - Populate `townCombo` from\
  \ `g_map.towns`. Add a \"(No Town)\" item.\n     - When `townCombo` changes, filter\
  \ `houseList` to show houses matching `selectedTownId`. Display \"Name (ID: X, Size:\
  \ Y sqm)\". Store `House*` or ID with `QListWidgetItem::setData`.\n     - `addHouseButton`:\
  \ Create a new `House` object, open `EditHouseDialogQt` (pass it the new house object\
  \ and map). If dialog accepted, add house to `g_map.houses`, refresh `houseList`.\n\
  \     - `editHouseButton`: For selected house in `houseList`, create a copy, open\
  \ `EditHouseDialogQt`. If accepted, apply changes to original house (create Undo\
  \ action), refresh `houseList`. Disable if no selection or multiple selections.\n\
  \     - `removeHouseButton`: Confirm and remove selected house(s) from `g_map.houses`.\
  \ Refresh `houseList`. Create Undo action.\n     - `houseList` Context Menu: Action\
  \ \"Move to Town...\". Opens a `QInputDialog::getItem` to select a new town from\
  \ `g_map.towns`. Update `townid` for all selected houses. Refresh `houseList`. Create\
  \ Undo action.\n     - Radio buttons/selection in `houseList` update the global\
  \ house brush:\n       - If `drawHouseTilesRadio` checked: `g_houseBrush->setHouse(selectedHouse);\
  \ g_gui->setActiveBrush(g_houseBrush);`\n       - If `setHouseExitRadio` checked:\
  \ `g_houseExitBrush->setHouse(selectedHouse); g_gui->setActiveBrush(g_houseExitBrush);`\n\
  \n**2. `EditHouseDialogQt` (inherits `QDialog`):**\n   - Constructor: `EditHouseDialogQt(QWidget*\
  \ parent, Map* map, House* houseToEditCopy)`.\n   - Controls:\n     - `QLineEdit*\
  \ nameEdit;`\n     - `QComboBox* townCombo;` (Populate with `map->towns`, set current\
  \ based on `houseToEditCopy->townid`).\n     - `QSpinBox* rentSpinBox;`\n     -\
  \ `QSpinBox* idSpinBox;` (Range 1-65535).\n     - `QCheckBox* guildhallCheck;`\n\
  \   - Load initial values from `houseToEditCopy`.\n   - On \"OK\" (`accept()`):\
  \ Validate data (name not empty, ID unique if changed, rent >= 0). Update `houseToEditCopy`\
  \ fields.\n\n**3. Waypoint Palette Tab (within main `paletteTabWidget` from `UI-02`):**\n\
  \   - **Controls:**\n     - `QListWidget* waypointList;` (Set `Qt::ItemIsEditable`\
  \ for in-place renaming).\n     - `QPushButton* addWaypointButton;`\n     - `QPushButton*\
  \ removeWaypointButton;`\n   - **Functionality:**\n     - Populate `waypointList`\
  \ from `g_map.waypoints`. Store `Waypoint*` or name with `QListWidgetItem::setData`.\n\
  \     - `addWaypointButton`: Create new `Waypoint` (e.g., \"New Waypoint 1\") in\
  \ `g_map.waypoints`. Add to `waypointList`. Call `waypointList->editItem()` on the\
  \ new item.\n     - `removeWaypointButton`: Confirm and remove selected waypoint(s)\
  \ from `g_map.waypoints` and `waypointList`. Create Undo action.\n     - `waypointList::itemChanged(QListWidgetItem*\
  \ item)` signal:\n       - Get old name (stored in item data before edit) and new\
  \ name (item->text()).\n       - Validate new name (not empty, unique among waypoints).\
  \ If invalid, revert or show error.\n       - Update the `Waypoint` object in `g_map.waypoints`.\
  \ Create Undo action.\n     - `waypointList::currentItemChanged`: Sets `g_waypointBrush->setWaypoint(selectedWaypoint);\
  \ g_gui->setActiveBrush(g_waypointBrush);`.\n\n**General:**\n- Ensure all list/combo\
  \ boxes are updated if the underlying map data (towns, houses, waypoints) changes\
  \ due to other operations or file loading.\n- Connect signals from UI elements to\
  \ appropriate slots to implement the described functionality.\n"
