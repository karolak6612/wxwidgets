<?xml version="1.0" ?>
<BRUSH-LOGIC-Wall>
  <id>BRUSH-LOGIC-Wall</id>
  <section>Editor Behavior &amp; Logic</section>
  <title>Port Wall Brush Logic</title>
  <original_input_files>
    <original_input_file>wxwidgets/wall_brush.cpp</original_input_file>
    <original_input_file>wxwidgets/wall_brush.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/wall_brush.h</file_path>
      <description>Defines 'WallBrush' and 'WallDecorationBrush' (inheriting 'TerrainBrush'). 'WallBrush' includes structures for 'WallType' and 'DoorType'.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/wall_brush.cpp</file_path>
      <description>Implements 'WallBrush'. Handles loading definitions from XML, randomizing variations. 'doWalls' calculates and applies correct wall segment (vertical, horizontal, corners, poles, T-junctions, etc.) based on adjacent walls.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>CORE-BRUSH-FRAMEWORK</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>LOGIC-01</dependencie>
    <dependencie>CORE-04</dependencie>
    <dependencie>CORE-14-MaterialSystem</dependencie>
  </dependencies>
  <current_functionality_summary>The 'WallBrush' draws various wall types, automatically selecting segments (vertical, horizontal, corners, poles, T-junctions, diagonals, intersections) and handling associated door/window items. Logic includes randomizing variations and connecting to adjacent walls.
</current_functionality_summary>
  <qt6_migration_steps>1. Define `mapcore::WallBrush` class inheriting from `mapcore::Brush` (or `TerrainBrush`).
2. Store current wall brush definition (item IDs for alignments, door/window types) loaded from `MaterialManager`.
3. Implement `apply()`:
   - If erasing: Remove wall item. Trigger updates for neighbors.
   - If drawing: Implement 'doWalls' logic: Analyze neighbors to select correct wall segment/door/window item ID. Place item.
   - Record changes for undo.
</qt6_migration_steps>
  <definition_of_done>- `mapcore::WallBrush` is implemented.
- Wall brush definitions are loaded and used.
- Auto-connection logic correctly places wall segments, doors, and windows.
- Operations are undoable.
- Unit tests for wall placement and auto-connection pass.
</definition_of_done>
  <boilerplate_coder_ai_prompt>Port `WallBrush` from `wxwidgets/wall_brush.cpp/h` to `mapcore::WallBrush`.
1. Header: `mapcore::WallBrush : public mapcore::Brush` (or `TerrainBrush`). Store current wall definition (from `MaterialManager`).
2. Source: Implement `apply()`. This is very complex. The 'doWalls' logic needs to check 8 surrounding tiles to determine the correct wall piece (straight, corner, T-junction, cross, end-piece, etc.) and orientation. Handle door/window placement within walls. All changes via `EditorControllerInterface`.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>mapcore::Brush</documentation_reference>
    <documentation_reference>CORE-14-MaterialSystem</documentation_reference>
    <documentation_reference>mapcore::Tile</documentation_reference>
    <documentation_reference>mapcore::Item</documentation_reference>
  </documentation_references>
  <estimation_effort>X-Large</estimation_effort>
</BRUSH-LOGIC-Wall>
