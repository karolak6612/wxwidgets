<?xml version="1.0" ?>
<CORE-05>
  <id>CORE-05</id>
  <section>Core Migration Tasks</section>
  <title>Port Selection &amp; Copy/Paste System</title>
  <original_input_files>
    <original_input_file>wxwidgets/selection.h</original_input_file>
    <original_input_file>wxwidgets/selection.cpp</original_input_file>
    <original_input_file>wxwidgets/copybuffer.h</original_input_file>
    <original_input_file>wxwidgets/copybuffer.cpp</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/selection.h</file_path>
      <description>Defines the 'Selection' class and 'SelectionThread' for managing user selections.
- 'Selection': Manages a 'TileSet' (a 'std::set&lt;Tile*&gt;') of currently selected tiles.
  - 'add()'/'remove()' methods operate on tiles or specific elements (Items, Spawns, Creatures) within them. These methods require an active &quot;session&quot;. They work by creating a deep copy of the affected 'Tile', modifying the selection state on the copy, and then creating a 'Change' object (from 'CORE-04') with this modified copy. This 'Change' is added to the current 'Action' (named 'subsession').
  - 'addInternal()'/'removeInternal()' directly modify the 'TileSet' without creating undoable actions.
  - Session management ('start()', 'commit()', 'finish()'): 'start()' initializes a 'BatchAction* session' and an 'Action* subsession'. 'commit()' adds the current 'subsession' to 'session' and creates a new 'subsession'. 'finish()' adds the 'subsession' to 'session' and then adds the 'session' (BatchAction) to the 'ActionQueue'.
  - 'join(SelectionThread*)' merges an action created by a background thread.
- 'SelectionThread': A 'wxThread' subclass. Its 'Entry()' method performs selection over a specified area, creating an 'Action*' (result) containing the changes, which is then merged by the main thread's 'Selection' object.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/selection.cpp</file_path>
      <description>Implements 'Selection' and 'SelectionThread'.
- 'Selection::add(Tile* tile, Item* item)' (and similar for Spawn, Creature, whole Tile): Creates a deep copy of 'tile' using 'tile-&gt;deepCopy(editor.map)'. Sets the 'selected' flag on the target 'item' (or whole tile) *on the copy*. Adds 'new Change(copied_tile_with_modified_selection)' to 'subsession'.
- 'Selection::remove(...)': Similar to 'add', but deselects the element on the copied tile.
- 'Selection::clear()': If a session is active, creates 'Change' objects for deselecting all currently selected tiles. Otherwise, directly deselects and clears 'tiles'.
- Session methods ('start', 'commit', 'finish') manage the lifecycle of 'subsession' (Action) and 'session' (BatchAction) and their addition to 'editor.actionQueue'.
- 'SelectionThread::Entry()': Iterates a map area, calls 'selection.add(tile)' for each tile within its local 'Selection' object's session (started with 'SUBTHREAD' flag). The resulting 'Action*' is stored for the main thread.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/copybuffer.h</file_path>
      <description>Defines the 'CopyBuffer' class for internal clipboard functionality.
It: uses a 'BaseMap* tiles' to store deep copies of 'Tile' objects from a cut/copy operation.
'copyPos' stores the top-left reference 'Position' of the copied data.
Declares: 'copy()', 'cut()', 'paste()', 'canPaste()', 'clear()'.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/copybuffer.cpp</file_path>
      <description>Implements 'CopyBuffer'.
- 'copy()': Iterates selected tiles via 'editor.selection'. For each 'Tile', it creates a 'copied_tile' in the internal 'tiles' 'BaseMap'. Critically, it only includes *selected* elements: if 'tile-&gt;ground' is selected, its properties (house_id, flags) are copied. Then, 'tile-&gt;getSelectedItems()' is called, and only these selected items are deep-copied into 'copied_tile'. Selected creatures/spawns are also deep-copied. 'copyPos' is updated.
- 'cut()': Performs 'copy()'. Then, for each selected tile, it creates a 'newtile' (deep copy of original), calls 'popSelectedItems()' to remove selected items from this 'newtile' (and nils out creature/spawn if selected). This 'newtile' (representing the state *after* deletion) is used to create a 'Change' object for an 'Action' which is then added to the 'ActionQueue'. Automagic border updates can be triggered.
- 'paste()': Iterates 'buffer_tile's in its internal 'tiles' 'BaseMap'. Calculates target 'Position'. Creates a 'copy_tile' (deep copy of 'buffer_tile'). Based on 'Config::MERGE_PASTE', it either merges 'copy_tile' with the existing tile at the target (or a new empty tile) or replaces it. The resulting tile is used for a 'Change' object in an 'Action'. Automagic border updates can be triggered.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-03</dependencie>
    <dependencie>CORE-04</dependencie>
  </dependencies>
  <current_functionality_summary>The current system uses:
- 'Selection' class: Manages a 'TileSet' of selected tiles. Operations like adding/removing items or entire tiles from selection are recorded as 'Action' objects via a session mechanism ('start', 'commit', 'finish'). This ensures selection changes are undoable. It supports selecting individual items/creatures/spawns on a tile, or entire tiles. A 'SelectionThread' is used for potentially long-running area selections.
- 'CopyBuffer' class: Acts as an internal clipboard. It stores deep copies of selected tiles (including only the selected elements on those tiles) in an internal 'BaseMap'. 'cut()' operations also generate an action to delete the original selection. 'paste()' reconstructs the copied tiles at a new location, generating an action for this modification.
</current_functionality_summary>
  <qt6_migration_steps>1.  **Design 'SelectionManager' Class (in 'mapcore/selection/'):**
    -   This class will be responsible for managing the current selection state.
    -   It needs to store selected objects. Consider if selection is primarily tile-based or if individual items/creatures on unselected tiles can be selected. The current system seems to operate on 'Tile' granularity for selection storage, with selected sub-elements flagged within those tiles. A 'QSet&lt;Tile*&gt;' (pointing to live tiles in the 'Map') along with a mechanism to know which sub-elements are selected might work. Alternatively, a list of 'SelectionElement { Tile* tile; Item* item; Creature* creature; Spawn* spawn; }' could be used.
    -   Implement methods:
        -   'void startSelectionChange()': Begins a logical selection operation (like original 'start()').
        -   'void addToSelection(Tile* tile, Item* item = nullptr, Creature* creature = nullptr, Spawn* spawn = nullptr)': Modifies the tile state to mark objects as selected.
        -   'void removeFromSelection(Tile* tile, Item* item = nullptr, Creature* creature = nullptr, Spawn* spawn = nullptr)': Modifies tile state to unmark objects.
        -   'void clear()': Clears all selection.
        -   'void finishSelectionChange(const QString&amp; commandText)': Commits the accumulated selection changes as a single 'QUndoCommand' to the 'QUndoStack'. The command should store the &quot;before&quot; and &quot;after&quot; selection states or the set of tiles whose selection flags changed.
    -   Expose selection data: 'const QSet&lt;Tile*&gt;&amp; getSelectedTiles() const;', 'bool isSelected(Tile* tile, Item* item = nullptr) const;'.
    -   Handle bounding box calculation ('minPosition', 'maxPosition').

2.  **Design 'ClipboardManager' (or integrate into 'Map' or 'EditorContext'):**
    -   **Clipboard Data Format:** Define a robust format. Serializing deep copies of 'Tile' objects (including only selected elements) using 'QDataStream' into a 'QByteArray' with a custom MIME type is a good approach. This format must store relative positions, item IDs, subtypes, attributes, creature/spawn data, and tile flags.
    -   Implement 'void copySelection(const SelectionManager&amp; selectionManager, const Map&amp; map)':
        -   Gets selected tiles and their relevant contents from 'selectionManager' and 'map'.
        -   Calculates a reference point (e.g., top-left of selection bounding box).
        -   Serializes deep copies of these selected elements (with relative positions) into the defined format.
        -   Puts the 'QByteArray' onto 'QApplication::clipboard()' with the custom MIME type.
    -   Implement 'void cutSelection(SelectionManager&amp; selectionManager, Map&amp; map, QUndoStack* undoStack)':
        -   Calls 'copySelection()'.
        -   Creates and pushes a 'DeleteSelectionCommand' (see 'CORE-04') onto 'undoStack' to remove the selected elements from the 'map'.
    -   Implement 'void paste(Map&amp; map, const Position&amp; targetPosition, QUndoStack* undoStack)':
        -   Retrieves data from 'QApplication::clipboard()'. Checks for the custom MIME type.
        -   Deserializes the data back into a list of 'Tile' data (or equivalent structures).
        -   Creates and pushes a 'PasteCommand' onto 'undoStack'. This command, when executed, will add/merge the pasted tiles and their contents into the 'map' at the 'targetPosition', adjusting for relative offsets from the clipboard data.

3.  **Integrate with 'QUndoStack' (from 'CORE-04'):**
    -   All operations that change selection state ('addToSelection', 'removeFromSelection', 'clearSelection') or modify map data ('cutSelection', 'paste') must be implemented as 'QUndoCommand' subclasses and pushed onto the 'QUndoStack'.
    -   A 'SelectionCommand' would store the set of changes to selection flags on tiles.
    -   A 'PasteCommand' would store the data being pasted to allow its removal on undo.

4.  **Replace 'SelectionThread':**
    -   For large area selections, if performance becomes an issue, use 'QtConcurrent::run' or a 'QThread' to gather the list of affected tiles/objects, then apply the selection change as a single command on the main thread.

5.  **Unit Tests:**
    -   Test 'SelectionManager': adding various object types, removing, clearing, checking selection state.
    -   Test clipboard data serialization and deserialization.
    -   Test 'copy', 'cut', 'paste' operations with mock map data and 'QUndoStack', ensuring correct data transfer and command creation.
</qt6_migration_steps>
  <definition_of_done>
    <element>A 'SelectionManager' class is implemented in 'mapcore' using Qt/C++ to manage selected map objects (Tiles, and specific Items, Creatures, Spawns within them).</element>
    <element>'SelectionManager' supports adding objects to selection, removing objects, and clearing the selection.</element>
    <element>All selection modifications are integrated with the 'QUndoStack' (from 'CORE-04') via specific 'SelectionCommand' objects, ensuring undo/redo functionality for selection changes.</element>
    <element>
      <Clipboard_operations___copy____cut____paste___are_implemented>
        <element>
          <copySelection__>Serializes the currently selected map elements (tiles and their relevant contents) into a well-defined internal format (e.g., using 'QDataStream' and 'QByteArray') and places it on 'QApplication::clipboard()' with a custom MIME type.</copySelection__>
        </element>
        <element>
          <cutSelection__>Performs a copy, then creates and pushes a command to delete the selected elements from the map.</cutSelection__>
        </element>
        <element>
          <pasteSelection_Position_target_position_>Deserializes data from the clipboard and creates/pushes a command to add the elements to the map, maintaining relative positions.</pasteSelection_Position_target_position_>
        </element>
      </Clipboard_operations___copy____cut____paste___are_implemented>
    </element>
    <element>The clipboard data format correctly captures all necessary information (items, ground, creatures, spawns, tile flags, relative positions).</element>
    <element>Memory for copied data and command objects is managed correctly (e.g., via 'std::unique_ptr' or Qt's ownership).</element>
    <element>Basic unit tests are created for 'SelectionManager' operations and for copy/cut/paste functionality, verifying data integrity and undo/redo integration.</element>
    <element>The ported code compiles successfully within the 'mapcore' library.</element>
  </definition_of_done>
  <boilerplate_coder_ai_prompt>You are to port the selection and copy/paste system from an old C++ codebase (based on 'selection.h/cpp' and 'copybuffer.h/cpp') to a modern C++/Qt6 environment within a 'mapcore' library. This system should use the 'QUndoStack' and 'QUndoCommand' (from 'CORE-04') for undo/redo, and interact with 'Map', 'Tile', 'Item' classes (from 'CORE-01'/'CORE-03').

**1. 'SelectionManager' Class ('mapcore/selection/SelectionManager.h/cpp'):**
   -   Manages a collection of selected objects. The primary selected unit is 'Tile*', but individual items/creatures/spawns on those tiles can have a selected state.
   -   'void startSelectionChange()': Prepares for a series of selection modifications that will become one undo command.
   -   'void add(Tile* tile, Item* item = nullptr, Creature* creature = nullptr, Spawn* spawn = nullptr)': Marks the specified object(s) as selected within the 'tile'.
   -   'void remove(Tile* tile, Item* item = nullptr, Creature* creature = nullptr, Spawn* spawn = nullptr)': Unmarks object(s).
   -   'void clear()': Clears all selection.
   -   'void finishSelectionChange(const QString&amp; commandText)': Creates a 'SelectionCommand' (see below) encapsulating all changes made since 'startSelectionChange()' and pushes it to the 'QUndoStack'.
   -   'const QSet&lt;Tile*&gt;&amp; getSelectedTiles() const;' (returns tiles that have any selected element).
   -   'bool isSelected(const Tile* tile, const Item* item = nullptr, ...) const;'.

**2. 'SelectionCommand' (derived from 'QUndoCommand'):**
   -   Stores a list of 'Tile*' and their selection state *before* and *after* the command.
   -   'redo()': Applies the &quot;after&quot; selection state to the tiles.
   -   'undo()': Applies the &quot;before&quot; selection state to the tiles.

**3. Clipboard Data Format &amp; 'ClipboardManager' (or integrated logic):**
   -   Define a format for clipboard data: Use 'QDataStream' to serialize a 'QList' of lightweight 'TileData' objects (containing relative position, items, creatures, spawns, flags of selected elements only) into a 'QByteArray'.
   -   'void copySelection(const SelectionManager&amp; selMgr, const Map&amp; map)':
       -   Gets selected tiles/elements.
       -   Calculates a reference 'Position' (e.g., top-left).
       -   Creates 'TileData' for each selected tile, storing only selected elements and their data relative to the reference position.
       -   Serializes this 'QList&lt;TileData&gt;' to a 'QByteArray'.
       -   Puts it on 'QApplication::clipboard()-&gt;setMimeData()' with a custom MIME type.
   -   'void cutSelection(SelectionManager&amp; selMgr, Map&amp; map, QUndoStack* undoStack)': Calls 'copySelection', then creates and pushes a 'DeleteCommand' for the selection.
   -   'void paste(Map&amp; map, const Position&amp; targetPos, QUndoStack* undoStack)':
       -   Retrieves 'QByteArray' from clipboard, deserializes 'QList&lt;TileData&gt;'.
       -   Creates a 'PasteCommand'.
           -   'redo()': Adds/merges the 'TileData' into the 'map' at 'targetPos' (adjusting for relative positions).
           -   'undo()': Removes the pasted elements.
       -   Pushes the 'PasteCommand' to 'undoStack'.

**4. General:**
   -   Replace wxWidgets types. Use smart pointers for temporary 'Tile' copies if needed.
   -   Focus on data management and command structure. UI interaction is separate.
   -   Provide necessary headers and source files.
   -   Write basic Qt Test unit tests.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>QClipboard: https://doc.qt.io/qt-6/qclipboard.html</documentation_reference>
    <documentation_reference>QMimeData: https://doc.qt.io/qt-6/qmimedata.html</documentation_reference>
    <documentation_reference>QDataStream: https://doc.qt.io/qt-6/qdatastream.html</documentation_reference>
    <documentation_reference>QSet: https://doc.qt.io/qt-6/qset.html</documentation_reference>
    <documentation_reference>QUndoStack: https://doc.qt.io/qt-6/qundostack.html</documentation_reference>
    <documentation_reference>QUndoCommand: https://doc.qt.io/qt-6/qundocommand.html</documentation_reference>
  </documentation_references>
  <estimation_effort>X-Large</estimation_effort>
</CORE-05>
