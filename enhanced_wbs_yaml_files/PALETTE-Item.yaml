id: PALETTE-Item
section: UI Elements
title: Implement General Item Palette/Browser
original_input_files:
  # Conceptual: Based on general need for item selection and wxwidgets/palette_brushlist.h
  # for BrushIconBox or SeamlessGridPanel for displaying items.
  - wxwidgets/palette_brushlist.h
  - wxwidgets/palette_brushlist.cpp
  - wxwidgets/items.h # For g_items (ItemDB)
  - wxwidgets/palette_window.h # For overall palette container context
analyzed_input_files:
  - file_path: wxwidgets/palette_brushlist.h
    description: |
      Declares various views like `BrushIconBox` and `SeamlessGridPanel` that are suitable
      for displaying a large number of selectable items with their sprites.
      The 'Item' palette would use such a view to show game items.
  - file_path: wxwidgets/items.h
    description: |
      Defines `ItemType` and `ItemDatabase` (g_items), which holds all item definitions.
      This palette would source its content from this database.
dependencies:
  - UI-02                  # Main Palette System framework
  - CORE-02                # For ItemManager (formerly ItemDatabase) to get all ItemType definitions
  - CORE-BRUSH-FRAMEWORK   # For BrushManagerService (to set the active brush to a RAW-like brush)
  - REFACTOR-01            # For BrushStateService
  - RENDER-03              # For TextureManager (to render item sprites in the palette)
current_functionality_summary: |
  The legacy system likely had an item palette (or used parts of `BrushPalettePanel` for items)
  that displayed game items from `g_items` (ItemDatabase) for selection. Selecting an item
  would typically activate a RAW brush or a generic item brush with the selected item ID.
  `UI-10` covers a specific "RAW Items Palette". This `PALETTE-Item` could be a more comprehensive
  item browser, possibly with categorization and better previews than a simple RAW ID list.
qt6_migration_steps: |
  1. Create `ItemPaletteTab.h/.cpp` inheriting `QWidget`.
  2. Design UI:
     - Optional: `QComboBox` or `QTreeView` for item categories (if items have categories beyond 'All').
     - A `QLineEdit` for searching/filtering items by name or ID.
     - A main display area: `SeamlessGridPaletteView` (from `UI-02`'s definition, or a similar custom Qt widget) or `QListView` in IconMode to show item sprites and names.
     - Controls for sprite size/zoom if using a grid view.
  3. Populate the view:
     - Get all (or filtered) `ItemType` definitions from `ItemManager` (`CORE-02`).
     - For each `ItemType`, get its sprite using `TextureManager` (`RENDER-03`).
     - Create model items for the view, displaying the sprite and name. Store `ItemType::id`.
  4. Handle selection:
     - When an item is selected, notify `BrushStateService` to activate the RAW brush (`BRUSH-LOGIC-RAW`) and set its active item ID to the selected item's ID.
  5. Integrate this tab into the main palette system (`QTabWidget` in `UI-02`).
definition_of_done: |
  - An `ItemPaletteTab` widget is implemented and added to the main palette system.
  - The palette lists items from `ItemManager`, displaying their sprites and names.
  - Item searching/filtering by name/ID is functional.
  - Users can select an item, which activates the RAW brush with that item's ID.
  - The palette is reasonably performant for a large number of items (e.g., using progressive loading or good view virtualization).
boilerplate_coder_ai_prompt: |
  Implement an `ItemPaletteTab` Qt widget for browsing and selecting game items.

  1.  **`ItemPaletteTab.h`:**
      ```cpp
      #include <QWidget>
      // Forward declarations
      class QLineEdit;
      class QComboBox; // Optional for categories
      class SeamlessGridPaletteView; // Or QListView
      class ItemManager;           // From CORE-02
      class BrushStateService;     // From REFACTOR-01
      class TextureManagerQt;      // From RENDER-03

      class ItemPaletteTab : public QWidget {
          Q_OBJECT
      public:
          ItemPaletteTab(ItemManager* itemManager, BrushStateService* brushStateService, TextureManagerQt* texManager, QWidget* parent = nullptr);
          void populateItems(); // Or load initially and on filter changes
      private slots:
          void onFilterTextChanged(const QString& text);
          void onItemSelectionChanged(/* appropriate arguments from view */);
      private:
          QLineEdit* m_searchEdit;
          // QComboBox* m_categoryCombo; // Optional
          SeamlessGridPaletteView* m_itemView; // Or QListView with custom model/delegate
          ItemManager* m_itemManager;
          BrushStateService* m_brushStateService;
          TextureManagerQt* m_textureManager;
          // Store all item types or a filtered list
          // QList<const mapcore::ItemType*> m_allItems;
      };
      ```
  2.  **`ItemPaletteTab.cpp`:**
      - Constructor: Setup UI. Store managers. Call `populateItems()`. Connect signals from search edit and item view.
      - `populateItems()`: Get all items from `m_itemManager`. Filter if necessary. Populate `m_itemView`. For `SeamlessGridPaletteView` or custom model, this involves providing data (item ID, name, sprite from `m_textureManager`).
      - `onFilterTextChanged()`: Repopulate/filter items in `m_itemView`.
      - `onItemSelectionChanged()`: Get selected item's ID. Call `m_brushStateService->setActiveBrushByName("BRUSH-LOGIC-RAW");` (assuming RAW brush is registered with this name) and `m_brushStateService->setCurrentRawItemId(selectedItemId);` (method to be added to BrushStateService or directly configure RAW brush).
  Integrate this tab into the main palette `QTabWidget` (from `UI-02`).
documentation_references: ["UI-02", "CORE-02", "CORE-BRUSH-FRAMEWORK", "BRUSH-LOGIC-RAW", "RENDER-03", "QListView", "QAbstractItemModel"]
estimation_effort: Large
