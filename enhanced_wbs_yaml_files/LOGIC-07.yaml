wbs_item_id: LOGIC-07
name: Port Creature & Spawn System (Data and Brushes)
description: Migrate the logic for creating, managing, and storing creature spawns
  (including spawn areas/radius, creature lists, and spawn times) and the functionality
  of the Creature and Spawn brushes.
dependencies:
- CORE-01 # Tile class
- CORE-03 # Map structure, OTBM I/O for spawn data on tiles
- CORE-04 # Action system for undo/redo
- CORE-CREATURES # Creature type definitions from creatures.xml
- BRUSH-FRAMEWORK-CORE # Base brush class
- UI-CREATURE-SPAWN-PALETTE # UI for selecting creatures and setting spawn properties
original_input_files:
- wxwidgets/spawn.h
- wxwidgets/spawn.cpp
- wxwidgets/creature_brush.h
- wxwidgets/creature_brush.cpp
- wxwidgets/spawn_brush.h
- wxwidgets/spawn_brush.cpp
analyzed_input_files:
- file_path: wxwidgets/spawn.h
  description: "Defines `Spawn` class and `Spawns` manager class.\n- `Spawn` class:\
    \ Stores `size` (radius of the spawn area, default 3) and a boolean `selected`\
    \ state. Provides methods for deep copy, selection, comparison (by size), and\
    \ getting/setting size. Does not store creature lists or spawn times.\n- `Spawns`\
    \ class: Manages a `SpawnPositionList` (which is a `std::set<Position>`) to keep\
    \ track of all tile positions that are designated as spawn points. Provides methods\
    \ for adding and removing positions from this set."
- file_path: wxwidgets/spawn.cpp
  description: "Implements the `Spawns` class methods.\n- `Spawns::addSpawn(Tile* tile)`:\
    \ Asserts `tile->spawn` exists, then inserts the `tile->getPosition()` into its\
    \ set of spawn locations.\n- `Spawns::removeSpawn(Tile* tile)`: Asserts `tile->spawn`\
    \ exists, then erases the `tile->getPosition()` from its set."
- file_path: wxwidgets/creature_brush.h
  description: "Defines the `CreatureBrush` class, inheriting from `Brush`. It's\
    \ used to place specific creatures on the map.\n- Stores `CreatureType* creature_type`\
    \ representing the creature to be placed.\n- `canDraw()`: Checks if a creature\
    \ can be placed (tile exists, not blocking, is a spawn area or auto-create spawn\
    \ is enabled, considers PZ for NPCs).\n- `draw()`: Calls `draw_creature()`.\n\
    - `draw_creature()`: Places the creature on the tile, potentially creating a basic\
    \ spawn if `AUTO_CREATE_SPAWN` is on.\n- `undraw()`: Removes the creature from\
    \ the tile.\n- Supports smearing, does not support dragging, one size fits all."
- file_path: wxwidgets/creature_brush.cpp
  description: "Implements `CreatureBrush` methods.\n- Constructor: Takes `CreatureType*`,\
    \ links brush to type.\n- `getName()`: Returns `creature_type->name`.\n- `canDraw()`:\
    \ Logic as described in header. Checks `tile->getLocation()->getSpawnCount()`\
    \ or `g_settings.getInteger(Config::AUTO_CREATE_SPAWN)`.\n- `undraw()`: Sets\
    \ `tile->creature` to `nullptr` after deleting it.\n- `draw_creature()`: If `canDraw`,\
    \ calls `undraw`. If `tile->spawn` is null and no existing spawn area covers the\
    \ tile (`tile->getLocation()->getSpawnCount() == 0`), it creates a new `Spawn(1)`\
    \ for the tile. Creates a new `Creature(creature_type)`, sets its spawntime from\
    \ `g_gui.GetSpawnTime()`, and assigns it to `tile->creature`."
- file_path: wxwidgets/spawn_brush.h
  description: "Defines the `SpawnBrush` class, inheriting from `Brush`. Used to\
    \ designate tiles as spawn points and set their radius.\n- Does not store specific\
    \ data itself; radius is typically taken from global GUI settings at the time\
    \ of use.\n- `canDraw()`: Checks if a tile can be made a spawn point.\n- `draw()`:\
    \ Creates a `Spawn` object on the tile with a given radius.\n- `undraw()`: Removes\
    \ the `Spawn` object from a tile.\n- Supports dragging, does not support smearing,\
    \ one size fits all (radius is a parameter)."
- file_path: wxwidgets/spawn_brush.cpp
  description: "Implements `SpawnBrush` methods.\n- `getName()`: Returns \"Spawn\
    \ Brush\".\n- `canDraw()`: Returns true if `map->getTile(position)` exists and\
    \ does not already have a `tile->spawn` object.\n- `undraw()`: Deletes `tile->spawn`\
    \ and sets it to `nullptr`.\n- `draw()`: If `tile->spawn` is null, it creates\
    \ a `new Spawn(radius)` where radius is from `*(int*)parameter` (typically `g_gui.GetBrushSize()`)."
documentation_references:
- 'Qt Data Structures: https://doc.qt.io/qt-6/qtcore-containers.html (QSet for spawn
  locations, QList for creature names in a spawn)'
- 'std::optional (C++17): https://en.cppreference.com/w/cpp/utility/optional (For
  wrapping SpawnProperties on a Tile)'
current_functionality_summary: "The `Spawn` class (`spawn.h`) primarily defines the\
  \ radius of a spawn area on a tile. The `Spawns` class (`spawn.h/.cpp`) is a manager\
  \ that tracks the `Position` of all tiles that have a `Spawn` object associated\
  \ with them (i.e., are spawn points).\nActual spawn data, such as the list of creatures\
  \ to spawn and the spawn interval (spawntime), are not stored within these `Spawn`\
  \ or `Spawns` classes. Instead, this information is typically an attribute of the\
  \ `Tile` object itself, managed by the `CreatureBrush` when placing creatures or\
  \ modified through UI dialogs.\n- `CreatureBrush` (`creature_brush.h/.cpp`): Places\
  \ a specific type of creature on a tile. If `AUTO_CREATE_SPAWN` is enabled in settings\
  \ and the tile isn't part of an existing spawn area, it will also create a `Spawn`\
  \ object (radius 1) on that tile. It sets the creature's spawntime based on a global\
  \ GUI setting.\n- `SpawnBrush` (`spawn_brush.h/.cpp`): Designates a tile as a spawn\
  \ point by creating a `Spawn` object on it. The radius of this spawn is determined\
  \ by the current brush size selected in the GUI."
definition_of_done:
- A Qt6 `SpawnProperties` class/struct is defined (e.g., in `map/spawn_properties.h`)
  to store the spawn radius.
- The main `Tile` class (Qt6) is augmented to store:
  - `std::optional<SpawnProperties> spawnProperties;` (or a pointer).
  - `QList<QString> creatureSpawnList;`
  - `int spawnTimeSeconds;`
- `Tile` class has methods like `bool isSpawnPoint() const`, `void setSpawnData(int
  radius, const QList<QString>& creatures, int timeSecs)`, `void clearSpawnData()`,
  `int getSpawnRadius() const`, etc.
- A Qt6 `SpawnManager` class (e.g., in `map/spawn_manager.h`) uses `QSet<Position>`
  to register/unregister tile positions that are spawn points. This is updated when
  `Tile::setSpawnData` or `Tile::clearSpawnData` is called.
- `QtCreatureBrush` (inheriting `BaseBrush`):
  - Allows selection of a `CreatureType*` (from `CORE-CREATURES`).
  - On `apply()`: Places the selected creature on the target `Tile`. If settings dictate
    auto-creation of spawns, and the tile is not already a spawn point (checked via
    `SpawnManager` or `Tile::isSpawnPoint`), it calls `tile->setSpawnData()` with a
    default radius (e.g., 1), adds the placed creature's name to `creatureSpawnList`,
    and sets a default `spawnTimeSeconds`. Updates `SpawnManager`.
- `QtSpawnBrush` (inheriting `BaseBrush`):
  - On `apply()`: Calls `tile->setSpawnData()` with the current brush radius. If the
    tile was not previously a spawn, `creatureSpawnList` would be empty and `spawnTimeSeconds`
    defaulted. Updates `SpawnManager`.
- All spawn-modifying operations (placing creature with auto-spawn, placing spawn
  point, modifying spawn properties via UI) are undoable via `QUndoCommand`s that
  encapsulate changes to `Tile` properties and `SpawnManager` updates.
- OTBM loading/saving (CORE-03) correctly populates/persists `Tile`'s spawn radius,
  creature list, and spawn time. `SpawnManager` is rebuilt after map load.
boilerplate_coder_ai_prompt: "Port the spawn system and associated brushes (CreatureBrush,\
  \ SpawnBrush) to Qt6.\n\n1.  **`SpawnProperties` (New Data Structure):**\n    *   `int radius;`\n\
  \n2.  **`Tile` Class Augmentation (Conceptual - changes belong to Tile's task but\
  \ inform this design):\n    *   `std::optional<SpawnProperties> spawnProperties;`\n\
  \    *   `QList<QString> creatureSpawnList;`\n    *   `int spawnTimeSeconds;`\n\
  \    *   Methods: `setSpawnData(radius, list, time)`, `clearSpawnData()`, `addCreatureToSpawnList(name)`,\
  \ `getSpawnRadius()` etc.\n\n3.  **`SpawnManager` Class (New):**\n    *   `QSet<Position>\
  \ m_spawn_locations;`\n    *   `void registerSpawnLocation(const Position& pos);`\n\
  \    *   `void unregisterSpawnLocation(const Position& pos);`\n    *   `bool isSpawnLocation(const\
  \ Position& pos) const;`\n\n4.  **`QtCreatureBrush` (Inherits `BaseBrush`):\n\
  \    *   Member: `CreatureType* m_creatureType;`\n    *   `void apply(EditorController*\
  \ controller, const Position& pos);`\n        - Get `Tile* tile = map->getOrCreateTile(pos);`\n\
  \        - Create `QUndoCommand`.\n        - **redo()**: Store old creature/spawn\
  \ data. Create `Creature` object. `tile->setCreature(newCreature)`. If `AUTO_CREATE_SPAWN`\
  \ and `!tile->isSpawnPoint() && !spawnManager->isSpawnLocation(pos)`: `tile->setSpawnData(1,\
  \ {m_creatureType->name}, defaultSpawnTime); spawnManager->registerSpawnLocation(pos);`.\
  \ Else if `tile->isSpawnPoint()`: `tile->addCreatureToSpawnList(m_creatureType->name)`\
  \ (if not already present).\n        - **undo()**: Restore old state.\n\n5.  **`QtSpawnBrush`\
  \ (Inherits `BaseBrush`):\n    *   `void apply(EditorController* controller, const\
  \ Position& pos);`\n        - Get `Tile* tile = map->getOrCreateTile(pos);`\n   \
  \     - `int radius = editorController->getCurrentBrushSize();`\n        - Create\
  \ `QUndoCommand`.\n        - **redo()**: Store old spawn data. `tile->setSpawnData(radius,\
  \ existingOrEmptyList, existingOrDefaultTime); spawnManager->registerSpawnLocation(pos);`\n\
  \        - **undo()**: Restore old state (if was spawn, else `tile->clearSpawnData();\
  \ spawnManager->unregisterSpawnLocation(pos);`).\n\n6.  Ensure OTBM I/O reads/writes\
  \ spawn radius, creature list, and interval from/to Tile attributes. `SpawnManager`\
  \ should be populated after map load by iterating tiles."
qt_object_notes: "Use `std::optional` for `spawnProperties` on `Tile`. `QSet<Position>`
  for `SpawnManager` (ensure `Position` is hashable via `qHash`). `QList<QString>`
  for creature names on `Tile`."
additional_notes: "The core logic is that a `Tile` *is* a spawn point if it has spawn\
  \ properties (radius, creature list, time). The `SpawnManager` is a helper to quickly\
  \ find all such tiles. The `SpawnBrush` makes a tile a spawn point and sets its\
  \ radius. The `CreatureBrush` places creatures and, if settings allow, can also\
  \ make a tile a basic spawn point if it isn't one already."
estimation_effort: Large
[end of enhanced_wbs_yaml_files/LOGIC-07.yaml]
