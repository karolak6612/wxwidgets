<?xml version="1.0" ?>
<BRUSH-LOGIC-Eraser>
  <id>BRUSH-LOGIC-Eraser</id>
  <section>Editor Behavior &amp; Logic</section>
  <title>Port Eraser Brush Logic</title>
  <original_input_files>
    <original_input_file>wxwidgets/eraser_brush.cpp</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/eraser_brush.cpp</file_path>
      <description>Implements 'EraserBrush'. 'draw' removes most items, respecting settings for unique/complex items. 'undraw' (right-click) is more aggressive, removing borders and potentially unique items.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>CORE-BRUSH-FRAMEWORK</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>LOGIC-01</dependencie>
    <dependencie>CORE-04</dependencie>
    <dependencie>CORE-06</dependencie>
  </dependencies>
  <current_functionality_summary>The 'EraserBrush' removes map elements. A standard application (draw) removes most items but might leave unique/complex ones based on settings. An alternative application (undraw/right-click) performs a more thorough clearing.
</current_functionality_summary>
  <qt6_migration_steps>1. Define `mapcore::EraserBrush` class inheriting from `mapcore::Brush`.
2. Implement `apply()`:
   - Determine mode (normal erase vs. aggressive erase) based on `BrushSettings` (e.g., `isEraseMode` could mean aggressive).
   - Get target `Tile`.
   - Normal erase: Iterate items on tile. Remove items unless they are ground, or flagged as unique/complex and settings say to keep them.
   - Aggressive erase: Remove all items (except possibly ground if configured), creature, spawn info. Potentially trigger border re-calculation for adjacent tiles.
   - Record changes for undo.
</qt6_migration_steps>
  <definition_of_done>- `mapcore::EraserBrush` is implemented.
- Normal erase correctly removes appropriate items.
- Aggressive erase (if applicable via settings) performs a more thorough clear.
- Settings for preserving unique/complex items are respected.
- Operations are undoable.
- Unit tests for different erase scenarios pass.
</definition_of_done>
  <boilerplate_coder_ai_prompt>Port `EraserBrush` from `wxwidgets/eraser_brush.cpp` to `mapcore::EraserBrush`.
1. Header: `mapcore::EraserBrush : public mapcore::Brush`.
2. Source: Implement `apply()`. It should check `BrushSettings` (e.g. a flag for 'aggressiveErase' or if `isEraseMode` means aggressive). Based on the mode and `AppSettings` (e.g. &quot;leave unique items&quot;), iterate through the `Tile`'s contents (items, creature, spawn) and remove them. Use `EditorControllerInterface` to make changes undoable. Consider if erasing ground should be possible or if it should just clear items on top.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>mapcore::Brush</documentation_reference>
    <documentation_reference>mapcore::Tile</documentation_reference>
    <documentation_reference>mapcore::Item</documentation_reference>
    <documentation_reference>CORE-06 AppSettings</documentation_reference>
  </documentation_references>
  <estimation_effort>Medium</estimation_effort>
</BRUSH-LOGIC-Eraser>
