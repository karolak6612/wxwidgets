id: BUILD-01
section: Build, Deployment, & Documentation
title: Setup Initial CMake Build System for Qt6 Project
original_input_files:
  - wxwidgets/application.cpp
  - wxwidgets/editor.cpp
  - wxwidgets/map_display.cpp
  - XML/clients.xml
analyzed_input_files:
  - file_path: wxwidgets/application.cpp
    description: |
      Main entry point and core application logic.
      Defines `Application` (from `wxApp`) and `MainFrame` (from `wxFrame`) classes.
      Handles application lifecycle (OnInit, OnExit), event loop, global setup (art providers, image handlers, settings, single instance check, IPC), main window creation, and some platform-specific initializations (like GLUT for Linux/Windows).
      Key for CMake: Defines the main executable target. Shows dependencies on wxWidgets and other core project components (editor, sprites, map, items). Indicates potential OpenGL use.
  - file_path: wxwidgets/editor.cpp
    description: |
      Defines the `Editor` class, encapsulating logic for a single map instance.
      Manages map data (`Map` object), action history (undo/redo via `ActionQueue`), selection (`Selection` object), copy/paste buffer, and brush interactions.
      Handles map loading/saving (OTBM format), import/export, and operations like borderizing.
      Initiates and manages live editing (client/server) functionality.
      Key for CMake: Core source file to be compiled. Depends on numerous project headers (map, brush, live_server, live_client), establishing compile dependencies.
  - file_path: wxwidgets/map_display.cpp
    description: |
      Implements `MapCanvas` (a `wxGLCanvas`) for rendering the map using OpenGL.
      Handles mouse and keyboard events for map interaction (drawing, selection, navigation, zoom, floor changes).
      Manages painting the map via `MapDrawer` and interacts with `Editor` for data.
      Key for CMake: Essential for rendering. Requires OpenGL and wxWidgets. Establishes dependencies on `editor.h`, `map_drawer.h`, etc. (Note: Does not use SFML directly).
  - file_path: XML/clients.xml
    description: |
      XML configuration file defining supported Tibia client versions.
      Maps client version strings to OTB versions, data file signatures (.dat, .spr), data directories, and supported OTBM versions.
      Used by the application at runtime to understand different client asset versions.
      Key for CMake: Critical runtime data file. CMake must copy this (and other related XML/data files) to the build/install output directory for the application to function.
dependencies:
  - BUILD-00 # Assumes BUILD-00 creates the root CMakeLists.txt and basic project structure
current_functionality_summary: |
  Currently, there is no CMake build system for the project. The wxWidgets-based map editor relies on an unspecified build method (likely manual or a different build system).
  This WBS task aims to establish the foundational CMake build system structure for migrating the application to Qt6 and Qlementine.
  It will involve creating the main `CMakeLists.txt` (if not covered by BUILD-00 explicitly for this level of detail) or significantly populating it, setting up project properties, finding Qt6 and Qlementine, defining the main executable, and including core source files.
qt6_migration_steps: |
  1. **Initialize CMake Project:**
     - Define `cmake_minimum_required(VERSION 3.16)`.
     - Define the project name (e.g., `project(RME_Qt VERSION 1.0)`).
     - Set `CMAKE_CXX_STANDARD 17` and `CMAKE_CXX_STANDARD_REQUIRED True`.
     - Enable `CMAKE_AUTOMOC ON`, `CMAKE_AUTORCC ON`, `CMAKE_AUTOUIC ON` for Qt integration.
     - Set `CMAKE_PREFIX_PATH` to include paths where Qt6 and Qlementine might be installed, if not standard.

  2. **Find Qt6 Package:**
     - Use `find_package(Qt6 REQUIRED COMPONENTS Widgets Gui OpenGL Core Concurrent)`. Adjust components as necessary based on a more detailed source analysis.
     - Add `"${Qt6_Widget_INCLUDE_DIRS}"` etc. to include directories.

  3. **Find Qlementine Package:**
     - Use `find_package(Qlementine REQUIRED)`.
     - Add `"${QLEMENTINE_INCLUDE_DIRS}"` to include directories.
     - Link with `Qlementine::Qlementine`.

  4. **Find Other Dependencies (Placeholder - to be detailed in subsequent tasks):**
     - `find_package(ZLIB)` (if needed directly).
     - `find_package(OpenGL)` (if Qt6::OpenGL is not sufficient or for direct calls). Note: `map_display.cpp` uses `wxGLCanvas`, Qt6 also has OpenGL modules. The migration will use Qt's OpenGL.
     - `find_package(PugiXML)` (if used directly and not vendored).

  5. **Define Executable Target:**
     - `add_executable(RME_Qt ${APP_SOURCES})`.
     - Create a `APP_SOURCES` variable listing essential .cpp files like:
       - `wxwidgets/application.cpp` (will need significant Qt-specific refactoring)
       - `wxwidgets/editor.cpp`
       - `wxwidgets/map_display.cpp` (will be replaced/refactored for Qt rendering)
       - Other core logic files identified.
     - (Note: Many wxWidgets specific UI files will be replaced by Qt versions in later tasks. This initial setup might include them temporarily if aiming for a phased build, or focus on non-UI core logic first.)

  6. **Link Libraries:**
     - `target_link_libraries(RME_Qt PRIVATE Qt6::Widgets Qt6::Gui Qt6::OpenGL Qt6::Core Qt6::Concurrent Qlementine::Qlementine)`.
     - Add other dependencies like ZLIB if found.

  7. **Include Directories:**
     - `target_include_directories(RME_Qt PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}")`.
     - Add include paths for Qt, Qlementine, and other libraries.

  8. **Handle Resources:**
     - Define a variable `RESOURCE_FILES` for `XML/clients.xml` and other critical XML/data files.
     - Use `qt_add_resources(RME_Qt_resources "resources.qrc")` if using Qt's resource system for some assets.
     - For data files like `clients.xml` that need to be present relative to the executable, use `file(COPY ${RESOURCE_FILES} DESTINATION ${CMAKE_BINARY_DIR}/data)` (for build-time access) and `install(FILES ${RESOURCE_FILES} DESTINATION data)` (for installation). The application code will need to locate these files.

  9. **Platform Specifics (Initial):**
     - Basic settings for Windows (e.g., `WIN32` for `add_executable` if no console).
     - Basic settings for macOS (e.g., `MACOSX_BUNDLE`).

  10. **Generate Source Group (Optional but good practice):**
      - Use `source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/wxwidgets FILES ${APP_SOURCES})` to organize files in IDEs.

definition_of_done: |
  - A root `CMakeLists.txt` exists and is configured for a C++17 Qt6 project.
  - `find_package` successfully locates Qt6 (Widgets, Gui, OpenGL, Core, Concurrent) and Qlementine.
  - A basic executable target (e.g., `RME_Qt`) is defined, compiling a minimal set of core source files (e.g., a Qt-based main, stubs for application/editor logic).
  - The executable links correctly against Qt6 and Qlementine libraries.
  - Critical data files (like `XML/clients.xml`) are copied to the build output directory for runtime access.
  - The project can be configured by CMake (e.g., `cmake -B build -S .`) and built (e.g., `cmake --build build`) to produce an executable on the development platform.
  - Basic platform-specific settings for Windows/macOS are in place.
boilerplate_coder_ai_prompt: |
  Based on the analysis of `wxwidgets/application.cpp`, `wxwidgets/editor.cpp`, `wxwidgets/map_display.cpp`, and `XML/clients.xml`, create an initial `CMakeLists.txt` for a C++17 project migrating from wxWidgets to Qt6 and Qlementine.

  Your `CMakeLists.txt` should:
  1.  Initialize the project (cmake_minimum_required, project name, C++17 standard).
  2.  Enable CMAKE_AUTOMOC, CMAKE_AUTORCC, CMAKE_AUTOUIC.
  3.  Find Qt6 (Components: Widgets, Gui, OpenGL, Core, Concurrent) using `find_package`.
  4.  Find Qlementine using `find_package`.
  5.  Define an executable target named `RME_Qt`. For now, include these source files in a variable `APP_SOURCES`:
      - `wxwidgets/application.cpp` (this will be refactored to Qt later)
      - `wxwidgets/editor.cpp`
      - `wxwidgets/map_display.cpp` (this will be refactored to Qt later)
      (Assume these are placeholders for core logic; UI parts will change significantly).
  6.  Link `RME_Qt` against `Qt6::Widgets`, `Qt6::Gui`, `Qt6::OpenGL`, `Qt6::Core`, `Qt6::Concurrent`, and `Qlementine::Qlementine`.
  7.  Set up include directories for the project itself, Qt6, and Qlementine.
  8.  Copy `XML/clients.xml` to a `data/` subdirectory in the CMake binary directory (e.g., `${CMAKE_BINARY_DIR}/data/XML/clients.xml`).
  9.  Include basic platform settings for WIN32 and MACOSX_BUNDLE if applicable.
  10. Ensure the CMake script is well-commented.
documentation_references:
  - "https://doc.qt.io/qt-6/cmake-get-started.html"
  - "https://doc.qt.io/qt-6/cmake-build-systems.html"
  - "https://doc.qt.io/qt-6/cmake-manual.html"
  - "https://github.com/OlivierLDff/Qlementine/blob/main/README.md"
  - "https://cmake.org/cmake/help/latest/manual/cmake-tutorial.7.html"
  - "https://cmake.org/cmake/help/latest/guide/tutorial/index.html"
