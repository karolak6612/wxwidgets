<?xml version="1.0" ?>
<LOGIC-07>
  <id>LOGIC-07</id>
  <name>Port Creature &amp; Spawn System (Data and Brushes)</name>
  <description>Migrate the logic for creating, managing, and storing creature spawns (including spawn areas/radius, creature lists, and spawn times) and the functionality of the Creature and Spawn brushes.</description>
  <dependencies>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-03</dependencie>
    <dependencie>CORE-04</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>CORE-BRUSH-FRAMEWORK</dependencie>
    <dependencie>UI-06</dependencie>
  </dependencies>
  <original_input_files>
    <original_input_file>wxwidgets/spawn.h</original_input_file>
    <original_input_file>wxwidgets/spawn.cpp</original_input_file>
    <original_input_file>wxwidgets/creature_brush.h</original_input_file>
    <original_input_file>wxwidgets/creature_brush.cpp</original_input_file>
    <original_input_file>wxwidgets/spawn_brush.h</original_input_file>
    <original_input_file>wxwidgets/spawn_brush.cpp</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/spawn.h</file_path>
      <description>Defines 'Spawn' class and 'Spawns' manager class.
- 'Spawn' class: Stores 'size' (radius of the spawn area, default 3) and a boolean 'selected' state. Provides methods for deep copy, selection, comparison (by size), and getting/setting size. Does not store creature lists or spawn times.
- 'Spawns' class: Manages a 'SpawnPositionList' (which is a 'std::set&lt;Position&gt;') to keep track of all tile positions that are designated as spawn points. Provides methods for adding and removing positions from this set.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/spawn.cpp</file_path>
      <description>Implements the 'Spawns' class methods.
- 'Spawns::addSpawn(Tile* tile)': Asserts 'tile-&gt;spawn' exists, then inserts the 'tile-&gt;getPosition()' into its set of spawn locations.
- 'Spawns::removeSpawn(Tile* tile)': Asserts 'tile-&gt;spawn' exists, then erases the 'tile-&gt;getPosition()' from its set.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/creature_brush.h</file_path>
      <description>Defines the 'CreatureBrush' class, inheriting from 'Brush'. It's used to place specific creatures on the map.
- Stores 'CreatureType* creature_type' representing the creature to be placed.
- 'canDraw()': Checks if a creature can be placed (tile exists, not blocking, is a spawn area or auto-create spawn is enabled, considers PZ for NPCs).
- 'draw()': Calls 'draw_creature()'.
- 'draw_creature()': Places the creature on the tile, potentially creating a basic spawn if 'AUTO_CREATE_SPAWN' is on.
- 'undraw()': Removes the creature from the tile.
- Supports smearing, does not support dragging, one size fits all.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/creature_brush.cpp</file_path>
      <description>Implements 'CreatureBrush' methods.
- Constructor: Takes 'CreatureType*', links brush to type.
- 'getName()': Returns 'creature_type-&gt;name'.
- 'canDraw()': Logic as described in header. Checks 'tile-&gt;getLocation()-&gt;getSpawnCount()' or 'g_settings.getInteger(Config::AUTO_CREATE_SPAWN)'.
- 'undraw()': Sets 'tile-&gt;creature' to 'nullptr' after deleting it.
- 'draw_creature()': If 'canDraw', calls 'undraw'. If 'tile-&gt;spawn' is null and no existing spawn area covers the tile ('tile-&gt;getLocation()-&gt;getSpawnCount() == 0'), it creates a new 'Spawn(1)' for the tile. Creates a new 'Creature(creature_type)', sets its spawntime from 'g_gui.GetSpawnTime()', and assigns it to 'tile-&gt;creature'.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/spawn_brush.h</file_path>
      <description>Defines the 'SpawnBrush' class, inheriting from 'Brush'. Used to designate tiles as spawn points and set their radius.
- Does not store specific data itself; radius is typically taken from global GUI settings at the time of use.
- 'canDraw()': Checks if a tile can be made a spawn point.
- 'draw()': Creates a 'Spawn' object on the tile with a given radius.
- 'undraw()': Removes the 'Spawn' object from a tile.
- Supports dragging, does not support smearing, one size fits all (radius is a parameter).</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/spawn_brush.cpp</file_path>
      <description>Implements 'SpawnBrush' methods.
- 'getName()': Returns &quot;Spawn Brush&quot;.
- 'canDraw()': Returns true if 'map-&gt;getTile(position)' exists and does not already have a 'tile-&gt;spawn' object.
- 'undraw()': Deletes 'tile-&gt;spawn' and sets it to 'nullptr'.
- 'draw()': If 'tile-&gt;spawn' is null, it creates a 'new Spawn(radius)' where radius is from '*(int*)parameter' (typically 'g_gui.GetBrushSize()').</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <documentation_references>
    <documentation_reference>Qt Data Structures: https://doc.qt.io/qt-6/qtcore-containers.html (QSet for spawn locations, QList for creature names in a spawn)</documentation_reference>
    <documentation_reference>std::optional (C++17): https://en.cppreference.com/w/cpp/utility/optional (For wrapping: SpawnProperties on a Tile)</documentation_reference>
  </documentation_references>
  <current_functionality_summary>The 'Spawn' class ('spawn.h') primarily defines the radius of a spawn area on a tile. The 'Spawns' class ('spawn.h/.cpp') is a manager that tracks the 'Position' of all tiles that have a 'Spawn' object associated with them (i.e., are spawn points).
Actual spawn data, such as the list of creatures to spawn and the spawn interval (spawntime), are not stored within these 'Spawn' or 'Spawns' classes. Instead, this information is typically an attribute of the 'Tile' object itself, managed by the 'CreatureBrush' when placing creatures or modified through UI dialogs.
- 'CreatureBrush' ('creature_brush.h/.cpp'): Places a specific type of creature on a tile. If 'AUTO_CREATE_SPAWN' is enabled in settings and the tile isn't part of an existing spawn area, it will also create a 'Spawn' object (radius 1) on that tile. It sets the creature's spawntime based on a global GUI setting.
- 'SpawnBrush' ('spawn_brush.h/.cpp'): Designates a tile as a spawn point by creating a 'Spawn' object on it. The radius of this spawn is determined by the current brush size selected in the GUI.</current_functionality_summary>
  <definition_of_done>
    <element>A Qt6 'SpawnProperties' class/struct is defined (e.g., in 'map/spawn_properties.h') to store the spawn radius.</element>
    <element>The main 'Tile' class (Qt6) is augmented to store: 'std::optional&lt;SpawnProperties&gt; spawnProperties;' (or a pointer), 'QList&lt;QString&gt; creatureSpawnList;', 'int spawnTimeSeconds;'</element>
    <element>'Tile' class has methods like 'bool isSpawnPoint() const', 'void setSpawnData(int radius, const QList&lt;QString&gt;&amp; creatures, int timeSecs)', 'void clearSpawnData()', 'int getSpawnRadius() const', etc.</element>
    <element>A Qt6 'SpawnManager' class (e.g., in 'map/spawn_manager.h') uses 'QSet&lt;Position&gt;' to register/unregister tile positions that are spawn points. This is updated when 'Tile::setSpawnData' or 'Tile::clearSpawnData' is called.</element>
    <element>'QtCreatureBrush' (inheriting 'BaseBrush'): Allows selection of a 'CreatureType*' (from 'CORE-CREATURES'). On 'apply()': Places the selected creature on the target 'Tile'. If settings dictate auto-creation of spawns, and the tile is not already a spawn point (checked via 'SpawnManager' or 'Tile::isSpawnPoint'), it calls 'tile-&gt;setSpawnData()' with a default radius (e.g., 1), adds the placed creature's name to 'creatureSpawnList', and sets a default 'spawnTimeSeconds'. Updates 'SpawnManager'.</element>
    <element>'QtSpawnBrush' (inheriting 'BaseBrush'): On 'apply()': Calls 'tile-&gt;setSpawnData()' with the current brush radius. If the tile was not previously a spawn, 'creatureSpawnList' would be empty and 'spawnTimeSeconds' defaulted. Updates 'SpawnManager'.</element>
    <element>All spawn-modifying operations (placing creature with auto-spawn, placing spawn point, modifying spawn properties via UI) are undoable via 'QUndoCommand's that encapsulate changes to 'Tile' properties and 'SpawnManager' updates.</element>
    <element>OTBM loading/saving (CORE-03) correctly populates/persists 'Tile's spawn radius, creature list, and spawn time. 'SpawnManager' is rebuilt after map load.</element>
  </definition_of_done>
  <boilerplate_coder_ai_prompt>Port the spawn system and associated brushes (CreatureBrush, SpawnBrush) to Qt6.

1.  **'SpawnProperties' (New Data Structure):**
    *   'int radius;'

2.  **'Tile' Class Augmentation (Conceptual - changes belong to Tile's task but inform this design):
    *   'std::optional&lt;SpawnProperties&gt; spawnProperties;'
    *   'QList&lt;QString&gt; creatureSpawnList;'
    *   'int spawnTimeSeconds;'
    *   Methods: 'setSpawnData(radius, list, time)', 'clearSpawnData()', 'addCreatureToSpawnList(name)', 'getSpawnRadius()' etc.

3.  **'SpawnManager' Class (New):**
    *   'QSet&lt;Position&gt; m_spawn_locations;'
    *   'void registerSpawnLocation(const Position&amp; pos);'
    *   'void unregisterSpawnLocation(const Position&amp; pos);'
    *   'bool isSpawnLocation(const Position&amp; pos) const;'

4.  **'QtCreatureBrush' (Inherits 'BaseBrush'):
    *   Member: 'CreatureType* m_creatureType;'
    *   'void apply(EditorController* controller, const Position&amp; pos);'
        - Get 'Tile* tile = map-&gt;getOrCreateTile(pos);'
        - Create 'QUndoCommand'.
        - **redo()**: Store old creature/spawn data. Create 'Creature' object. 'tile-&gt;setCreature(newCreature)'. If 'AUTO_CREATE_SPAWN' and '!tile-&gt;isSpawnPoint() &amp;&amp; !spawnManager-&gt;isSpawnLocation(pos)': 'tile-&gt;setSpawnData(1, {m_creatureType-&gt;name}, defaultSpawnTime); spawnManager-&gt;registerSpawnLocation(pos);'. Else if 'tile-&gt;isSpawnPoint()': 'tile-&gt;addCreatureToSpawnList(m_creatureType-&gt;name)' (if not already present).
        - **undo()**: Restore old state.

5.  **'QtSpawnBrush' (Inherits 'BaseBrush'):
    *   'void apply(EditorController* controller, const Position&amp; pos);'
        - Get 'Tile* tile = map-&gt;getOrCreateTile(pos);'
        - 'int radius = editorController-&gt;getCurrentBrushSize();'
        - Create 'QUndoCommand'.
        - **redo()**: Store old spawn data. 'tile-&gt;setSpawnData(radius, existingOrEmptyList, existingOrDefaultTime); spawnManager-&gt;registerSpawnLocation(pos);'
        - **undo()**: Restore old state (if was spawn, else 'tile-&gt;clearSpawnData(); spawnManager-&gt;unregisterSpawnLocation(pos);').

6.  Ensure OTBM I/O reads/writes spawn radius, creature list, and interval from/to Tile attributes. 'SpawnManager' should be populated after map load by iterating tiles.</boilerplate_coder_ai_prompt>
  <qt_object_notes>Use 'std::optional' for 'spawnProperties' on 'Tile'. 'QSet&lt;Position&gt;' for: 'SpawnManager' (ensure 'Position' is hashable via 'qHash'). 'QList&lt;QString&gt;' for: creature names on 'Tile'.</qt_object_notes>
  <additional_notes>The core logic is that a 'Tile' *is* a spawn point if it has spawn properties (radius, creature list, time). The 'SpawnManager' is a helper to quickly find all such tiles. The 'SpawnBrush' makes a tile a spawn point and sets its radius. The 'CreatureBrush' places creatures and, if settings allow, can also make a tile a basic spawn point if it isn't one already.</additional_notes>
  <estimation_effort>Large</estimation_effort>
</LOGIC-07>
