<?xml version="1.0" ?>
<CORE-BRUSH-FRAMEWORK>
  <id>CORE-BRUSH-FRAMEWORK</id>
  <section>Core Migration Tasks</section>
  <title>Port Base Brush Class, Implement BrushManager, and Define BrushSettings</title>
  <original_input_files>
    <original_input_file>wxwidgets/brush.h</original_input_file>
    <original_input_file>wxwidgets/brush_enums.h</original_input_file>
    <original_input_file>wxwidgets/gui.h</original_input_file>
    <original_input_file>wxwidgets/gui.cpp</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/brush.h</file_path>
      <description>Defines the abstract base `Brush` class with pure virtual methods like `draw()`, `undraw()`, `canDraw()`, `getName()`, `getLookID()`, etc. Also includes common brush properties or helper methods if any.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/brush_enums.h</file_path>
      <description>Defines enumerations used by the brush system, such as `BrushShape` (e.g., `BRUSHSHAPE_SQUARE`, `BRUSHSHAPE_CIRCLE`), `BrushFlags`, and potentially others related to brush behavior or type.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/gui.h</file_path>
      <description>Declares the global `g_gui` object. Relevant parts for brush framework include members storing the current brush pointer (`current_brush`), brush size (`brush_size`), brush shape (`brush_shape`), variation (`brush_variation`), and potentially other global brush-related settings.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/gui.cpp</file_path>
      <description>Implements methods for `g_gui` that allow getting/setting the current brush, brush size, shape, variation, etc. This shows how global brush state is managed and accessed.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>CORE-01</dependencie>
  </dependencies>
  <current_functionality_summary>The legacy system uses an abstract `Brush` base class. Specific brushes inherit from it. Global brush properties like current active brush, size, shape, and variation are managed via the global `g_gui` object. Brush-related enums define shapes and flags.</current_functionality_summary>
  <qt6_migration_steps>1. Define `mapcore::Brush` abstract base class (`mapcore/brush/Brush.h`):
   - Include pure virtual methods: `virtual void apply(EditorControllerInterface* controller, const Position&amp; pos, const BrushSettings&amp; settings) = 0;` (combining draw/undraw with context).
   - Include virtual methods: `virtual QString getName() const = 0;`, `virtual int getLookID(const BrushSettings&amp; settings) const;` (for palette display), `virtual bool canApply(const Map* map, const Position&amp; pos, const BrushSettings&amp; settings) const;`.
2. Define `mapcore::BrushSettings` struct/class (`mapcore/brush/BrushSettings.h`):
   - Members: `BrushShape shape`, `int size`, `int variation`, `bool isEraseMode`, `QString activeBrushName` (or ID), potentially other common flags or parameters. Use enums for shape, etc.
3. Define `mapcore::BrushManagerService` class (`mapcore/brush/BrushManagerService.h/cpp`):
   - Manages a collection of all available `Brush*` instances (e.g., `QHash&lt;QString, std::unique_ptr&lt;Brush&gt;&gt; m_brushes`).
   - Stores current `BrushSettings m_currentSettings`.
   - Methods: `void registerBrush(std::unique_ptr&lt;Brush&gt; brush)`, `Brush* getBrush(const QString&amp; name)`, `Brush* getActiveBrush()`, `void setActiveBrush(const QString&amp; name)`, `void setCurrentShape(BrushShape shape)`, `void setCurrentSize(int size)`, etc.
   - Emits signals when active brush or settings change (e.g., `activeBrushChanged(Brush*)`, `brushSettingsChanged(const BrushSettings&amp;)`).
4. Port `BrushShape` and other relevant enums from `brush_enums.h` to C++11 enum classes.</qt6_migration_steps>
  <definition_of_done>- `mapcore::Brush` abstract base class is defined with necessary virtual methods.
- `mapcore::BrushSettings` structure is defined to hold common brush parameters.
- `mapcore::BrushManagerService` is implemented, capable of registering brushes, managing active brush, and current settings.
- Relevant brush enums are ported.
- The framework is UI-agnostic and resides in `mapcore`.</definition_of_done>
  <boilerplate_coder_ai_prompt>Create the foundational brush framework in `mapcore`.
1.  Define `mapcore::Brush` abstract base class (`mapcore/brush/Brush.h`):
    -   Include pure virtual `apply(EditorControllerInterface* controller, const Position&amp; pos, const BrushSettings&amp; settings)`.
    -   Virtual `getName()`, `getLookID()`, `canApply()`.
2.  Define `mapcore::BrushSettings` struct (`mapcore/brush/BrushSettings.h`):
    -   Include `BrushShape shape` (enum class: Square, Circle), `int size`, `int variation`, `bool isEraseMode`, `QString activeBrushName`.
3.  Define `mapcore::BrushManagerService` class (`mapcore/brush/BrushManagerService.h/cpp`):
    -   Manages `QHash&lt;QString, std::unique_ptr&lt;Brush&gt;&gt; m_brushes`.
    -   Stores `BrushSettings m_currentSettings`.
    -   Methods: `registerBrush()`, `getBrush()`, `getActiveBrush()`, `setActiveBrushName(const QString&amp; name)`, `setCurrentShape(BrushShape)`, `setCurrentSize(int)`.
    -   Implement signals: `activeBrushChanged(Brush*)`, `brushSettingsChanged(const BrushSettings&amp;)`.
4.  Port `BrushShape` from `wxwidgets/brush_enums.h` to a C++11 enum class.</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>C++ Abstract Classes and Pure Virtual Functions</documentation_reference>
    <documentation_reference>Qt Signals and Slots: https://doc.qt.io/qt-6/signalsandslots.html</documentation_reference>
    <documentation_reference>QHash: https://doc.qt.io/qt-6/qhash.html</documentation_reference>
  </documentation_references>
  <estimation_effort>Medium (5-8 developer days)</estimation_effort>
</CORE-BRUSH-FRAMEWORK>
