<?xml version="1.0" ?>
<FINAL-06>
  <id>FINAL-06</id>
  <section>UI Polish &amp; Finalization</section>
  <title>Implement About Dialog &amp; Welcome Screen</title>
  <original_input_files>
    <original_input_file>wxwidgets/about_window.h</original_input_file>
    <original_input_file>wxwidgets/about_window.cpp</original_input_file>
    <original_input_file>wxwidgets/welcome_dialog.h</original_input_file>
    <original_input_file>wxwidgets/welcome_dialog.cpp</original_input_file>
    <original_input_file>wxwidgets/application.cpp</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/about_window.h</file_path>
      <description>Declares the `AboutWindow` class, a `wxDialog` subclass.
It's designed to display application information (version, license).
Declares event handlers for OK, License buttons, and for launching embedded &quot;Tetris&quot; and &quot;Snake&quot; games.
Forward-declares `GamePanel` for these easter-egg games.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/about_window.cpp</file_path>
      <description>Implements the `AboutWindow` class.
Constructs the dialog with static text displaying application name, version, wxWidgets/OpenGL versions, license summary, and compile-time info.
Includes an abstract `GamePanel` base class and concrete `TetrisPanel` and `SnakePanel` implementations using `wxDC` for drawing and `wxStopWatch`/`wxIdleEvent` for game loops. These games are triggered via keyboard shortcuts ('t', 's') from the About dialog.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/welcome_dialog.h</file_path>
      <description>Declares the `WelcomeDialog` class (a `wxDialog` subclass) and several custom helper classes for its UI:
`WelcomeDialogPanel`, `WelcomeDialogButton`, `RecentMapsPanel`, `WhatsNewPanel`, `RecentItem`.
This dialog is intended for startup, offering actions like New Map, Open Map, Preferences, listing recent files,
and displaying &quot;What's New&quot; information. Declares a custom event `WELCOME_DIALOG_ACTION`.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/welcome_dialog.cpp</file_path>
      <description>Implements `WelcomeDialog` and its custom UI component classes.
- `WelcomeDialogPanel`: Arranges the logo, title, version, action buttons, recent files list, &quot;What's New&quot; text area (loaded from `whatsnew.txt`), and a &quot;Show this dialog on startup&quot; checkbox.
- `WelcomeDialogButton`: A custom `wxPanel` styled as a button with hover effects.
- `RecentMapsPanel` &amp; `RecentItem`: Display clickable recent file entries.
Event handlers trigger `WELCOME_DIALOG_ACTION` for New/Open/Preferences or opening a recent file. The checkbox state is saved to `g_settings`.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/application.cpp</file_path>
      <description>(Relevant parts for this task) Contains logic in `Application::OnInit()` for potentially showing the `WelcomeDialog` based on settings and command-line arguments.
It also loads `editor_icon.xpm` and applies a random hue shift to it, which is then used in the `WelcomeDialog`.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>UI-01</dependencie>
    <dependencie>CORE-06</dependencie>
    <dependencie>FINAL-02</dependencie>
  </dependencies>
  <current_functionality_summary>- `AboutDialog` (`about_window.h/cpp`): A wxDialog displaying application name, version (hardcoded/macro `__W_RME_VERSION__`), wxWidgets/OpenGL versions, license summary from `COPYING.txt`, and compile-time info. It includes hidden Tetris and Snake games implemented with `wxDC`.
- `WelcomeDialog` (`welcome_dialog.h/cpp`): A custom wxDialog shown on startup (if enabled in settings). It displays a logo (color-shifted `editor_icon.xpm`), application title/version, action buttons (&quot;New&quot;, &quot;Open&quot;, &quot;Preferences&quot;), a list of recent files, and a &quot;What's New&quot; section loaded from `whatsnew.txt`. The &quot;Show on startup&quot; preference is stored via `g_settings`.
</current_functionality_summary>
  <qt6_migration_steps>1.  **Create `AboutDialog.h/.cpp` (Qt Version):**
    -   Inherit from `QDialog`.
    -   Use `QLabel`s for application name, version (pass as argument or retrieve from `QApplication`), Qt version (`QT_VERSION_STR`), credits, and license summary. Consider loading license from a resource file into a `QTextBrowser`.
    -   **Easter Egg Games (Optional, can be deferred):**
        -   If porting, create a base `GameWidget : QWidget` handling `paintEvent` (for `QPainter`), `keyPressEvent`, and `QTimer` for game logic.
        -   Implement `TetrisWidget : GameWidget` and `SnakeWidget : GameWidget`, porting logic from `about_window.cpp` to use `QPainter`.
        -   Integrate into `AboutDialog`, perhaps making them visible via `QShortcut`.
2.  **Create `WelcomeDialog.h/.cpp` (Qt Version):**
    -   Inherit from `QDialog`.
    -   Use Qt layouts (`QVBoxLayout`, `QHBoxLayout`, `QGridLayout`) for structure.
    -   Display logo: `QLabel` with a `QPixmap` (e.g., `editor_icon.png` as a resource). If hue shift is desired, implement `QImage` manipulation before creating `QPixmap`.
    -   Display title and version: `QLabel`s.
    -   Action Buttons: `QPushButton` for &quot;New&quot;, &quot;Open&quot;, &quot;Preferences&quot;. Connect `clicked()` signals to slots that will:
        -   For &quot;New&quot;: Emit a signal to be caught by `MainWindow` to trigger `slotFileNew()`.
        -   For &quot;Open&quot;: Emit a signal for `MainWindow` to trigger `slotFileOpen()`. Alternatively, directly invoke `QFileDialog` and then emit a signal with the chosen path.
        -   For &quot;Preferences&quot;: Create and `exec()` the `PreferencesDialog` (from `CORE-06`).
    -   Recent Files: Use `QListWidget`. Populate from `AppSettings::getRecentFiles()`. Connect `itemDoubleClicked(QListWidgetItem*)` to a slot that emits a signal for `MainWindow` to open the selected file path.
    -   &quot;What's New&quot;: Use `QTextBrowser` to load and display `whatsnew.txt` (from Qt resources or a standard path).
    -   &quot;Show this dialog on startup&quot; `QCheckBox`: Connect `stateChanged(int)` to a slot that updates the corresponding setting in `AppSettings`. Load initial state from `AppSettings`.
3.  **Application Startup Logic (in `main.cpp` or `Application` class):**
    -   After `AppSettings` are loaded (from `CORE-06`):
        -   Check the &quot;show welcome on startup&quot; setting.
        -   If true, and no map file is specified on the command line, instantiate and `exec()` the `WelcomeDialog`.
        -   Handle signals emitted by `WelcomeDialog` (e.g., to open a file or create a new one in `MainWindow` after the welcome dialog closes).
4.  **Menu Integration:**
    -   Ensure &quot;Help &gt; About&quot; menu action in `MainWindow` instantiates and shows the new `AboutDialog`.
5.  **Resource Management:**
    -   Add `editor_icon.png` (converted from XPM), `whatsnew.txt`, and any license files to the Qt Resource system (`.qrc`).</qt6_migration_steps>
  <definition_of_done>- A Qt-based `AboutDialog` is implemented and accessible (e.g., via &quot;Help &gt; About&quot; menu). It correctly displays application name, version, Qt version, and license information.
- (Optional, if pursued) The Tetris and Snake easter egg games are ported to `QWidget`-based implementations using `QPainter` and are accessible from the `AboutDialog`.
- A Qt-based `WelcomeDialog` is implemented.
- `WelcomeDialog` correctly displays the application logo, title, version, &quot;New&quot;, &quot;Open&quot;, &quot;Preferences&quot; actions, a list of recent files, and &quot;What's New&quot; content.
- Actions in `WelcomeDialog` (New, Open, Open Recent, Preferences) correctly trigger the corresponding application functionalities (interacting with `MainWindow` or `AppSettings`).
- The &quot;Show welcome dialog on startup&quot; checkbox in `WelcomeDialog` correctly reads and writes its state via `AppSettings`.
- The application shows the `WelcomeDialog` on startup if the setting is enabled and no specific map file is opened via command line.
</definition_of_done>
  <boilerplate_coder_ai_prompt>Implement Qt6 versions of the &quot;About&quot; dialog and &quot;Welcome&quot; dialog/screen.

**1. `AboutDialog` (`qtui/dialogs/AboutDialog.h/cpp`):**
   -   Inherit `QDialog`.
   -   Display:
       -   Application Name (`QApplication::applicationName()`).
       -   Application Version (`QApplication::applicationVersion()`).
       -   Qt Version (`QT_VERSION_STR`).
       -   Credits/Authors.
       -   License summary (load from a resource text file into a `QTextBrowser` or `QLabel`).
   -   (Optional Easter Egg Games - If time permits, can be a separate sub-task):
       -   Port `TetrisPanel` and `SnakePanel` from `wxwidgets/about_window.cpp` to `QWidget`-based classes using `QPainter` for drawing in `paintEvent` and `QTimer` for game loops.
       -   Make them accessible from `AboutDialog` (e.g., via hidden shortcuts or buttons).

**2. `WelcomeDialog` (`qtui/dialogs/WelcomeDialog.h/cpp`):**
   -   Inherit `QDialog`.
   -   Layout:
       -   Left: Logo (`QLabel` with `QPixmap` from resource), App Title (`QLabel`), Version (`QLabel`), Action `QPushButton`s (&quot;New Map&quot;, &quot;Open Map&quot;, &quot;Preferences&quot;).
       -   Center: &quot;What's New&quot; (`QTextBrowser` loading `whatsnew.txt` from resource).
       -   Right: &quot;Recent Files&quot; (`QListWidget`).
       -   Bottom: &quot;Show this dialog on startup&quot; `QCheckBox`.
   -   Functionality:
       -   &quot;New Map&quot; button: Emits a signal `createNewMapRequested()`.
       -   &quot;Open Map&quot; button: Emits a signal `openMapRequested()`. (Alternatively, can directly use `QFileDialog::getOpenFileName` and emit `openSpecificMapRequested(QString path)`).
       -   &quot;Preferences&quot; button: Creates and `exec()`s the `PreferencesDialog` (from `CORE-06`).
       -   Recent Files `QListWidget`: Populate from `AppSettings::getRecentFiles()`. On `itemDoubleClicked`, emit `openSpecificMapRequested(QString path)`.
       -   &quot;Show on startup&quot; `QCheckBox`: Load initial state from `AppSettings::getShowWelcomeDialog()`. On `stateChanged`, save to `AppSettings::setShowWelcomeDialog()`.

**3. Application Startup Logic (modify `main.cpp` or `Application` class):**
   -   After `AppSettings` are loaded:
   -   If `AppSettings::getShowWelcomeDialog()` is true AND no map file is given on command line:
       -   Create and `exec()` `WelcomeDialog`.
       -   Connect its signals (`createNewMapRequested`, `openMapRequested`, `openSpecificMapRequested`) to appropriate slots in `MainWindow` or `Application` class to handle these actions after the dialog closes.

**4. Menu Integration (in `MainWindow`):**
   -   Ensure &quot;Help &gt; About&quot; menu action creates and shows the `AboutDialog`.

Use Qt layouts for responsive design. Ensure dialogs are visually clean.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>QDialog: https://doc.qt.io/qt-6/qdialog.html</documentation_reference>
    <documentation_reference>QLabel: https://doc.qt.io/qt-6/qlabel.html</documentation_reference>
    <documentation_reference>QPushButton: https://doc.qt.io/qt-6/qpushbutton.html</documentation_reference>
    <documentation_reference>QListWidget: https://doc.qt.io/qt-6/qlistwidget.html</documentation_reference>
    <documentation_reference>QTextBrowser: https://doc.qt.io/qt-6/qtextbrowser.html</documentation_reference>
    <documentation_reference>QCheckBox: https://doc.qt.io/qt-6/qcheckbox.html</documentation_reference>
    <documentation_reference>QPixmap: https://doc.qt.io/qt-6/qpixmap.html</documentation_reference>
    <documentation_reference>QSettings (for recent files, show on startup pref): https://doc.qt.io/qt-6/qsettings.html</documentation_reference>
    <documentation_reference>Qt Resource System: https://doc.qt.io/qt-6/resources.html</documentation_reference>
    <documentation_reference>QPainter (for optional games): https://doc.qt.io/qt-6/qpainter.html</documentation_reference>
    <documentation_reference>QTimer (for optional games): https://doc.qt.io/qt-6/qtimer.html</documentation_reference>
  </documentation_references>
</FINAL-06>
