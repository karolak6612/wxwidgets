wbs_item_id: TEST-09
name: UI Test Key Editor Features
description: Develop UI tests for key editor features. This involves simulating user interactions (mouse clicks, keyboard input) with UI elements (buttons, menus, map canvas) and verifying the application's response and data changes.
dependencies:
- UI-01
- UI-02
- UI-03
- UI-04
- UI-05
- UI-06
- UI-07
- UI-08
- UI-09
- UI-10
- CORE-01
- CORE-02
- CORE-03
- CORE-04
- CORE-05
- LOGIC-01
- LOGIC-02
- LOGIC-03
- LOGIC-04
- LOGIC-05
- LOGIC-07
- TEST-01
input_files: []
analyzed_input_files: []
documentation_references:
- 'Qt Test Framework - Simulating GUI Events: https://doc.qt.io/qt-6/qttest-index.html#simulating-gui-events'
- 'QTest Namespace: https://doc.qt.io/qt-6/qtest.html (for mouseClick, keyClicks, qWait etc.)'
current_functionality_summary: This task is for creating new UI tests for the Qt6 Remere's Map Editor. These tests will simulate user interactions with the graphical interface (menus, toolbars, palettes, map canvas, dialogs) to ensure key editor features work as expected from a user's perspective. This involves verifying both the UI's response to actions and the correctness of underlying data modifications.
definition_of_done:
- UI tests using the Qt Test framework are created for essential editor features and user workflows.
- Tests successfully simulate user interactions, including menu selections (File > New/Open/Save, Edit > Undo/Redo/Copy/Paste), toolbar button clicks for major tools, interactions with palettes (selecting brushes/items), and basic map canvas operations (e.g., clicking to paint a tile).
- Verification steps assert expected UI responses, such as dialogs appearing, widgets changing state (enabled/disabled), status messages updating, and tab titles changing.
- Tests also verify that the user actions performed through the UI lead to correct modifications in the underlying `Map` data structures (e.g., a tile's ground type changing after a ground brush is used, items being added to a tile, selection state updating).
- 'Key user workflows are covered, including:'
- '  - Creating a new map via the ''New Map'' dialog.'
- '  - Opening an existing OTBM map and verifying basic rendering or data presence.'
- '  - Saving a modified map (Save/Save As).'
- '  - Basic tile editing using ground and item brushes selected from palettes.'
- '  - Using Undo/Redo for a few editing actions.'
- '  - Interacting with a simple dialog (e.g., Preferences, if available early) to change a setting and verify its application.'
- Widgets crucial for testing (buttons, menu actions, specific input fields) are assigned `objectName` properties in the UI code to facilitate reliable interaction via `QTest`.
- All created UI tests pass successfully.
- Tests are integrated into the CMake build system, potentially as a separate group that can be run in an environment with a display server.
boilerplate_coder_ai_prompt: |-
  Your task is to create UI tests for key features of the Qt6 Remere's Map Editor using the Qt Test framework. These tests will simulate user interactions and verify both UI responses and underlying data changes. This will test UI components from `UI-01` through `UI-10` and their interaction with core logic.

  **General UI Testing Approach with Qt Test:**
  1.  For each major feature or workflow, create a test class inheriting from `QObject`.
  2.  In test setup (`initTestCase` or per-test function), ensure the main application window (`QMainWindow`) or relevant dialog is created and shown. The application event loop must be running.
  3.  Use `QTest::mouseClick(widget, ...)` to simulate clicks on buttons, menu items, and specific coordinates on the map canvas.
  4.  Use `QTest::keyClicks(widget, "text")` to simulate keyboard input into text fields.
  5.  Use `QTest::qWait(milliseconds)` to handle brief UI update delays if necessary, but prefer `QSignalSpy` on relevant signals for more robust handling of asynchronous operations where applicable.
  6.  Identify widgets for interaction using their `objectName` property (these should be set consistently in the UI C++ code).
  7.  Assert UI changes (e.g., `QVERIFY(dialog->isVisible())`, `QCOMPARE(button->isEnabled(), true)`) and underlying data changes (e.g., inspecting the `Map` object after an edit).

  **Key User Workflows to Test:**

  1.  **Application Startup & Main Window:**
      - Verify the main window (`QMainWindow`) appears after application launch.
      - Verify essential UI elements like menu bar, main toolbar, map canvas widget, and primary palettes (e.g., tile/item palette) are present and visible.

  2.  **File Menu Operations:**
      - **New Map:**
          - Simulate clicking File > New menu action. Verify the 'New Map' dialog appears.
          - Simulate entering map dimensions (e.g., width, height) and a map name into the dialog's input fields using `QTest::keyClicks`.
          - Simulate clicking the 'OK' button.
          - Verify a new map tab is created in the central map area (e.g., in `MapTabbook`).
          - Verify the application's internal `Map` object reflects the new map's properties.
      - **Open Map:**
          - Simulate File > Open. This will likely involve mocking `QFileDialog::getOpenFileName` or interacting with it carefully if the test environment allows. For simplicity, you might have a mechanism to preload a test map path.
          - Verify the map data is loaded into the `Map` object and the map canvas displays some content (a basic check, not pixel-perfect rendering validation here).
      - **Save Map / Save As:**
          - Open or create a map, make a simple change (e.g., paint a tile).
          - Simulate File > Save. If it's a new map, a `QFileDialog` will appear; simulate providing a filename. Verify a file is created.
          - For an existing map, verify the file is overwritten.
          - Test File > Save As similarly.

  3.  **Basic Tile Editing (Interaction with Map Canvas & Palettes):**
      - **Select Ground Brush:** Simulate clicking on a ground palette UI element, then clicking on a specific ground brush button within that palette.
      - **Paint Ground:** Simulate `QTest::mouseClick` (and potentially `mouseMove` for dragging) on the map canvas widget at specific tile coordinates.
          - Verify the corresponding `Tile` object in the `Map` data now has the new ground item ID.
          - Verify that border tiles around the painted area are updated (data check).
      - **Select Item Brush & Place Item:** Simulate selecting an item from an item palette and clicking on the map canvas. Verify the item is added to the correct `Tile`'s item stack.
      - **Eraser Tool:** Simulate selecting an eraser tool and clicking on a tile with items/ground. Verify data is cleared from the `Map` object.

  4.  **Edit Menu - Undo/Redo:**
      - Perform a simple editing action (e.g., paint a tile).
      - Simulate clicking Edit > Undo. Verify the change is reverted in the `Map` data.
      - Simulate clicking Edit > Redo. Verify the change is re-applied to the `Map` data.

  5.  **View Menu - Zoom & Floor Change (Basic Checks):**
      - Simulate clicking View > Zoom In / Zoom Out. If the map canvas exposes a scale factor or zoom level property, verify it changes.
      - Simulate clicking View > Next Floor / Previous Floor. Verify the application's current floor state variable is updated.

  **Widget Naming for Testability:**
  - Crucial UI elements like specific menu actions, toolbar buttons, palette brush buttons, and dialog 'OK'/'Cancel' buttons should have unique `objectName` properties set in their C++ implementation to allow `QTest` to reliably find and interact with them. Example: `newMapAction->setObjectName("fileNewMapAction");`

  These UI tests focus on feature workflows and data integrity post-interaction. Detailed visual rendering correctness is covered by `TEST-07`.
  Ensure these tests can run in a CI environment, which might require a virtual display server if they instantiate full GUI components.
