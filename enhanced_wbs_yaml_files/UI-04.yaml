wbs_item_id: UI-04
name: Port Item Properties & Editors
description: Recreate UI dialogs for viewing and editing properties of map items (general,
  container contents, custom attributes), creatures (spawn time, direction), and spawns
  (radius) using Qt6.
dependencies:
- 'CORE-02 # For ItemDatabase to get item type information and attributes.'
- 'UI-06   # Item finder dialog might be used by container editor.# Implicitly depends
  on Map, Tile, Item, Creature, Spawn data structures.'
input_files:
- wxwidgets/properties_window.cpp
- wxwidgets/properties_window.h
- wxwidgets/old_properties_window.cpp
- wxwidgets/old_properties_window.h
- wxwidgets/container_properties_window.cpp
- wxwidgets/container_properties_window.h
analyzed_input_files:
- file_path: wxwidgets/properties_window.cpp
  description: Implements PropertiesWindow, a wxDialog with a wxNotebook for editing
    item properties (General, Contents for containers, Advanced custom attributes
    using wxGrid).
- file_path: wxwidgets/properties_window.h
  description: Header for PropertiesWindow.
- file_path: wxwidgets/old_properties_window.cpp
  description: Implements PropertiesWindow, a wxDialog with a wxNotebook for editing
    item properties (General, Contents for containers, Advanced custom attributes
    using wxGrid).
- file_path: wxwidgets/old_properties_window.h
  description: Header for PropertiesWindow.
- file_path: wxwidgets/container_properties_window.cpp
  description: Implements PropertiesWindow, a wxDialog with a wxNotebook for editing
    item properties (General, Contents for containers, Advanced custom attributes
    using wxGrid).
- file_path: wxwidgets/container_properties_window.h
  description: Header for PropertiesWindow.
documentation_references:
- 'QDialog: https://doc.qt.io/qt-6/qdialog.html'
- 'QTabWidget: https://doc.qt.io/qt-6/qtabwidget.html'
- QSpinBox, QLineEdit, QTextEdit, QComboBox, QCheckBox for input fields.
- 'QTableWidget (for custom attributes): https://doc.qt.io/qt-6/qtablewidget.html'
- 'QStyledItemDelegate (for custom editors in QTableWidget/QTreeView): https://doc.qt.io/qt-6/qstyleditemdelegate.html'
- 'QListView with IconMode: https://doc.qt.io/qt-6/qlistview.html#viewMode-prop'
current_functionality_summary: 'The wxWidgets version provides two main item properties
  dialogs:

  1.  `PropertiesWindow` (newer): Uses a notebook with tabs for "Simple" (ID, Name,
  ActionID, UniqueID), "Contents" (for containers, displays items in a grid of `ContainerItemButton`s
  with context menus), and "Advanced" (a `wxGrid` for arbitrary key-type-value attributes).

  2.  `OldPropertiesWindow`: A more direct dialog that customizes its layout based
  on the item type (generic, container, writeable, splash, depot, door, teleport,
  podium) or if editing a Creature or Spawn. It uses various `wxSpinCtrl`, `wxTextCtrl`,
  and `wxChoice` controls.

  Both dialogs allow modification of common attributes like ActionID and UniqueID,
  and specialized attributes based on type. Container editing involves adding, removing,
  or editing items within the container.'
definition_of_done:
- A Qt6 `ItemPropertiesDialog` (subclass of `QDialog`) is implemented, using a `QTabWidget`
  for 'General', 'Contents', and 'Advanced Attributes' sections.
- '**General Tab:**'
- '  - Displays read-only Item ID and Name.'
- '  - Provides `QSpinBox` controls for Action ID and Unique ID.'
- '  - Dynamically displays and allows editing of type-specific attributes based on
  the item being edited (e.g., count/subtype for stackables/fluids, text for writeables,
  destination for teleports, depot ID for depots, door ID, podium outfit details)
  using appropriate Qt widgets (`QSpinBox`, `QLineEdit`, `QTextEdit`, `QComboBox`,
  `QCheckBox`).'
- '**Contents Tab (for Container Items):**'
- '  - This tab is only visible if the edited item is a container.'
- '  - Displays contained items in a grid view (e.g., `QListView` in `IconMode` or
  a custom grid of `QPushButton`-like widgets displaying item sprites).'
- '  - A context menu on container slots/items allows ''Add Item'' (opens item finder
  from UI-06), ''Edit Item Properties'' (opens a new `ItemPropertiesDialog`), and
  ''Remove Item''.'
- '**Advanced Attributes Tab:**'
- '  - A `QTableWidget` (or `QTreeView` with a model) allows viewing, adding, removing,
  and editing custom key-value attributes.'
- '  - The ''Key'' is a string. The ''Type'' is selectable from a `QComboBox` (String,
  Integer, Float, Boolean). The ''Value'' cell uses an appropriate editor based on
  the selected type.'
- 'Separate, simpler `QDialog` subclasses are created for:'
- '  - `CreaturePropertiesDialog`: Edits spawn interval (`QSpinBox`) and direction
  (`QComboBox`).'
- '  - `SpawnPropertiesDialog`: Edits spawn radius (`QSpinBox`).'
- All dialogs correctly load properties from the passed object (Item, Creature, Spawn)
  on showing and apply validated changes back to a *copy* of the object when 'OK'
  is clicked. The calling code handles the actual map modification and undo action.
- Input validation is performed for relevant fields (e.g., numeric ranges, string
  lengths).
boilerplate_coder_ai_prompt: "Your task is to port the item, creature, and spawn properties\
  \ editing dialogs from wxWidgets to Qt6. The main item properties dialog will be\
  \ tabbed for general properties, container contents, and custom key-value attributes.\n\
  \n**Reference Files:** `wxwidgets/properties_window.*`, `wxwidgets/old_properties_window.*`,\
  \ `wxwidgets/container_properties_window.*`.\n\n**1. `ItemPropertiesDialog` (Main\
  \ Dialog, inherits `QDialog`):**\n   - Use a `QTabWidget` for the main sections.\n\
  \n   **a. 'General' Tab:**\n      - `QLabel` for Item ID (read-only).\n      - `QLabel`\
  \ for Item Name (read-only).\n      - `QSpinBox` for Action ID (range 0-65535).\n\
  \      - `QSpinBox` for Unique ID (range 0-65535, typically 1000-65535 if not 0).\n\
  \      - **Dynamic Section (based on ItemType):**\n          - If stackable/charged:\
  \ `QSpinBox` for Count/Charges. Max value depends on item type.\n          - If\
  \ writeable: `QTextEdit` for Text.\n          - If splash/fluid: `QComboBox` for\
  \ Liquid Type (populate with known types).\n          - If depot: `QComboBox` for\
  \ Depot Town ID (populate with towns from map).\n          - If door: `QSpinBox`\
  \ for Door ID (relevant if on a house tile).\n          - If teleport: `QSpinBox`es\
  \ for Dest X, Y, Z.\n          - If podium: `QComboBox` for Direction; `QCheckBox`es\
  \ for Show Outfit, Mount, Platform; `QSpinBox`es for LookType, Head, Body, Legs,\
  \ Feet, Addons, LookMount, and mount colors.\n          - If tiered item (version\
  \ >= 12.81): `QSpinBox` for Tier (0-255).\n\n   **b. 'Contents' Tab (Visible only\
  \ for Containers):**\n      - Use a `QListView` in `QListView::IconMode` with a\
  \ custom model, or a `QGridLayout` of custom `ItemButtonWidget` (subclass `QPushButton`\
  \ or `QToolButton`) to display items in the container. Each button shows item sprite.\
  \ Store the slot index.\n      - Implement `customContextMenuRequested` on the view/buttons\
  \ to show a `QMenu` with \"Add Item...\", \"Edit Item...\", \"Remove Item\".\n \
  \     - \"Add Item...\": Opens an item finder dialog (from `UI-06`). Places selected\
  \ item in an empty slot or appends.\n      - \"Edit Item...\": Opens a new `ItemPropertiesDialog`\
  \ for the item in that slot.\n      - \"Remove Item\": Clears the item from that\
  \ slot.\n\n   **c. 'Advanced Attributes' Tab:**\n      - Use `QTableWidget` with\
  \ columns: \"Key\" (QString), \"Type\" (QComboBox: String, Integer, Float, Boolean),\
  \ \"Value\".\n      - Buttons: \"Add Attribute\", \"Remove Selected Attribute\"\
  .\n      - When \"Type\" `QComboBox` changes, set an appropriate editor for the\
  \ \"Value\" cell (e.g., `QLineEdit` for String, `QSpinBox` for Integer, `QDoubleSpinBox`\
  \ for Float, `QCheckBox` for Boolean). Use `QTableWidget::setCellWidget` or a `QStyledItemDelegate`.\n\
  \n   **Dialog Logic:**\n      - Constructor takes `(QWidget* parent, const Map*\
  \ map, const Tile* tile, Item* itemToEditCopy)`.\n      - Populate fields from `itemToEditCopy`\
  \ when shown.\n      - On \"OK\" click: Validate inputs. Update `itemToEditCopy`\
  \ with new values. `accept()` the dialog. The caller is responsible for creating\
  \ an undo action with this modified copy.\n\n**2. `CreaturePropertiesDialog` (inherits\
  \ `QDialog`):**\n   - `QLabel` for Creature Name (read-only).\n   - `QSpinBox` for\
  \ Spawn Interval (seconds, e.g., 10-3600).\n   - `QComboBox` for Direction (North,\
  \ East, South, West, etc.).\n   - Populate from `Creature*` copy, save back to copy\
  \ on OK.\n\n**3. `SpawnPropertiesDialog` (inherits `QDialog`):**\n   - `QSpinBox`\
  \ for Spawn Radius (e.g., 1-15).\n   - Populate from `Spawn*` (or `SpawnProperties*`)\
  \ copy, save back to copy on OK."
