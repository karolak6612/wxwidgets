wbs_item_id: UI-01
name: Port Main Window & Menu Bar
description: Recreate the main application window (QMainWindow) and its menu bar (QMenuBar)
  using Qt6, including parsing menubar.xml to dynamically build menus and actions.
dependencies:
- FINAL-02
input_files:
- wxwidgets/application.cpp
- wxwidgets/application.h
- wxwidgets/main_menubar.cpp
- wxwidgets/main_menubar.h
- menubar.xml
analyzed_input_files:
- file_path: wxwidgets/application.cpp
  description: Contains the `MainFrame` class definition (equivalent to QMainWindow)
    and its basic setup including menu bar, status bar, and AUI manager. (Content
    already analyzed for FINAL-02).
- file_path: wxwidgets/application.h
  description: Header for `MainFrame` and `Application`. (Content already analyzed
    for FINAL-02).
- file_path: wxwidgets/main_menubar.cpp
  description: Implements `MainMenuBar` which parses `menubar.xml` to create wxMenus
    and wxMenuItems, connects events, and handles menu item state updates (enable/disable,
    check).
- file_path: wxwidgets/main_menubar.h
  description: Header for `MainMenuBar`, defining its structure, ActionID enum, and
    Action struct.
- file_path: menubar.xml
  description: 'XML file defining the structure of the menu bar, including menus,
    submenus, items, action names, hotkeys, and help strings. (Content status: Not
    Found via URL in this attempt).'
documentation_references:
- 'QMainWindow Class: https://doc.qt.io/qt-6/qmainwindow.html'
- 'QMenuBar Class: https://doc.qt.io/qt-6/qmenubar.html'
- 'QMenu Class: https://doc.qt.io/qt-6/qmenu.html'
- 'QAction Class: https://doc.qt.io/qt-6/qaction.html'
- 'QStatusBar Class: https://doc.qt.io/qt-6/qstatusbar.html'
- 'QXmlStreamReader (for parsing XML): https://doc.qt.io/qt-6/qxmlstreamreader.html'
- 'Qt Signals and Slots: https://doc.qt.io/qt-6/signalsandslots.html'
- 'QSettings (for recent files): https://doc.qt.io/qt-6/qsettings.html'
current_functionality_summary: 'The wxWidgets application uses a `MainFrame` (derived
  from `wxFrame`) as its main window. This frame hosts a `MainMenuBar` object.

  The `MainMenuBar` class is responsible for:

  1. Parsing an external `menubar.xml` file to dynamically construct the entire menu
  hierarchy (menus, sub-menus, items, separators).

  2. Mapping XML item definitions to internal `MenuBar::Action` structs, which link
  an action name (from XML) to an event ID, item kind (normal, check, radio), and
  a C++ event handler function pointer within `MainMenuBar`.

  3. Connecting UI events from `wxMenuItem`s to these handler functions.

  4. Managing the enabled/disabled and checked/unchecked state of menu items dynamically
  based on application context (e.g., map loaded, selection available) via an `Update()`
  method.

  5. Handling a list of recent files, displayed in a dedicated submenu.

  The `MainFrame` also initializes a status bar.'
definition_of_done:
- A `MainWindow` class, inheriting from `QMainWindow`, is created and serves as the
  application's main window.
- A `QMenuBar` is set as the main menu bar for the `MainWindow`.
- The menu structure defined in `menubar.xml` is successfully parsed (e.g., using
  `QXmlStreamReader`), and corresponding `QMenu` and `QAction` objects are dynamically
  created and added to the `QMenuBar`, replicating the original hierarchy, including
  submenus and separators.
- Hotkeys specified in `menubar.xml` are assigned as shortcuts to the respective `QAction`
  objects.
- Help strings from `menubar.xml` are set as status tips for `QAction` objects.
- Each `QAction`'s `triggered()` signal is connected to a placeholder slot or an appropriate
  handler method (to be fully implemented by other WBS tasks corresponding to each
  action).
- A `QStatusBar` is added to the `MainWindow` and can display initial application
  messages.
- Functionality to load, display, and open recent files (similar to `wxFileHistory`)
  is implemented in the 'File' menu, likely using `QSettings` for persistence.
- A mechanism equivalent to `MainMenuBar::Update()` and `MainMenuBar::LoadValues()`
  is implemented in `MainWindow` to dynamically update the enabled/disabled state
  and checked state of `QAction`s based on application state and settings.
- The `MainWindow` is displayed correctly upon application startup (linking with `FINAL-02`).
boilerplate_coder_ai_prompt: "Your task is to port the main application window and\
  \ its menu bar from the wxWidgets Remere's Map Editor to Qt6.\nReference Files:\
  \ `wxwidgets/application.cpp` (MainFrame), `wxwidgets/application.h` (MainFrame),\
  \ `wxwidgets/main_menubar.cpp`, `wxwidgets/main_menubar.h`, and `menubar.xml`.\n\
  \n**1. Create `MainWindow` (inheriting `QMainWindow`):**\n   - This will be the\
  \ top-level window.\n   - Set up a `QMenuBar` using `setMenuBar()` or by adding\
  \ it to a layout if preferred (though `setMenuBar` is standard for `QMainWindow`).\n\
  \   - Add a `QStatusBar` using `statusBar()`.\n\n**2. Implement Menu Loading from\
  \ `menubar.xml`:**\n   - Create a new class, e.g., `MenuLoader`, or implement this\
  \ logic within `MainWindow`.\n   - Use `QXmlStreamReader` to parse `menubar.xml`.\n\
  \   - Recursively process `<menu>` and `<item>` elements:\n     - For each `<menu\
  \ name=\"Title\" [special=\"RECENT_FILES\"]>`:\n       - Create a `QMenu* menu =\
  \ new QMenu(\"Title\");`.\n       - If `special=\"RECENT_FILES\"`, this menu will\
  \ be populated later by recent file actions. Store a pointer to it.\n       - Add\
  \ it to the parent menu or `QMenuBar`.\n       - Recursively call your parsing function\
  \ for its children.\n     - For each `<item name=\"Label\" action=\"ACTION_NAME\"\
  \ [hotkey=\"Ctrl+N\"] [help=\"Help text\"] [kind=\"check/radio\"]>`:\n       - Create\
  \ a `QAction* action = new QAction(\"Label\");`.\n       - Set `action->setObjectName(\"\
  ACTION_NAME\");` (very important for later access and testing).\n       - If `hotkey`\
  \ exists, `action->setShortcut(QKeySequence(\"Ctrl+N\"));`.\n       - If `help`\
  \ exists, `action->setStatusTip(\"Help text\");`.\n       - If `kind=\"check\"`,\
  \ `action->setCheckable(true);`.\n       - If `kind=\"radio\"`, group related radio\
  \ actions using a `QActionGroup`.\n       - Connect `action->triggered()` to a placeholder\
  \ slot for now, or map `ACTION_NAME` to a specific handler method later.\n     \
  \  - Add the action to the current `QMenu`.\n     - For `<separator/>`: Call `currentMenu->addSeparator();`.\n\
  \   - Store created `QAction` objects, perhaps in a `QMap<QString, QAction*> m_actions;`\
  \ (keyed by `ACTION_NAME`) for easy access during state updates.\n\n**3. Implement\
  \ Menu State Management:**\n   - Create a public method in `MainWindow`, e.g., `void\
  \ updateMenus();`.\n   - Inside `updateMenus()`:\n     - Access `QAction` objects\
  \ (e.g., from `m_actions` map).\n     - Enable/disable actions based on application\
  \ state (e.g., `m_actions[\"SAVE\"]->setEnabled(isMapLoaded && isMapModified);`).\n\
  \     - Set checked state for checkable/radio actions (e.g., `m_actions[\"SHOW_GRID\"\
  ]->setChecked(settings.showGrid);`).\n     - Refer to the logic in `MainMenuBar::Update()`\
  \ and `MainMenuBar::LoadValues()` from `main_menubar.cpp` for conditions.\n\n**4.\
  \ Implement Recent Files Functionality:**\n   - Use `QSettings` to store and retrieve\
  \ a list of recent file paths.\n   - In `updateMenus()` or when the File menu is\
  \ about to show (`QMenu::aboutToShow` signal), clear existing recent file actions\
  \ and repopulate the \"Recent Files\" `QMenu` with new `QAction`s for each path.\n\
  \   - Connect these dynamic actions to a slot that opens the selected file.\n  \
  \ - Implement `void addRecentFile(const QString& filePath);` to update `QSettings`\
  \ and the menu.\n\n**5. Integration:**\n   - Instantiate and show `MainWindow` in\
  \ your `main.cpp` (from `FINAL-02`).\n   - Call `updateMenus()` initially and whenever\
  \ application state changes that might affect menu items.\n\nThe original `MainMenuBar::actions`\
  \ (a `std::map<std::string, MenuBar::Action*>`) provides the mapping from the XML\
  \ `action` attribute string to internal IDs and event handlers. In Qt, `QAction`\
  \ itself can be the central object, identified by its `objectName`."
