id: LOGIC-08
title: "Port Core Drawing Logic, Advanced Brushes, and Selection Tools to Qt 6"
original_task_id: "LOGIC-08"
original_input_files:
  - "wxwidgets/editor.cpp"
  - "wxwidgets/editor.h"
  - "wxwidgets/gui.cpp"
  - "wxwidgets/gui.h"
  - "wxwidgets/brush.cpp"
  - "wxwidgets/brush.h"
  - "wxwidgets/ground_brush.cpp"
  - "wxwidgets/ground_brush.h"
  - "wxwidgets/wall_brush.cpp"
  - "wxwidgets/wall_brush.h"
  - "wxwidgets/table_brush.cpp"
  - "wxwidgets/table_brush.h"
  - "wxwidgets/carpet_brush.cpp"
  - "wxwidgets/carpet_brush.h"
  - "wxwidgets/eraser_brush.cpp" # Original: raser_brush.cpp
  # "wxwidgets/eraser_brush.h" # Original: raser_brush.h - File confirmed missing
  - "wxwidgets/selection.cpp"    # Original: selection_tools.cpp
  - "wxwidgets/selection.h"      # Original: selection_tools.h
  - "wxwidgets/map_drawer.cpp"
  - "wxwidgets/map_drawer.h"
dependencies:
  - "LOGIC-01" # BaseMap and Tile
  - "LOGIC-02" # Item Management
  - "DATA-02"  # ClientVersion Management
  - "DATA-03"  # Sprite Management
  - "DATA-04"  # Material Management
  - "UI-02"    # Main Application Window
  - "UI-03"    # Map Display Area
  - "UI-04"    # Palette Window
  - "UI-05"    # Toolbars
analyzed_input_files:
  - filepath: "wxwidgets/editor.cpp"
    description: "Core editor logic. Manages map instances, action queues (undo/redo), selections, copy/paste buffer, and live editing sessions. Handles map loading, saving, import/export (OTBM, minimap), and various map-wide operations like borderizing, randomizing, and clearing states. Contains the main drawing logic ('drawInternal' methods) which interface with brushes, and functions for moving and destroying selections. Integrates with 'GUI' for UI updates and 'LiveServer'/'LiveClient' for collaborative editing."
  - filepath: "wxwidgets/editor.h"
    description: "Header for 'Editor'. Defines the 'Editor' class structure, including its members like 'ActionQueue', 'Selection', 'CopyBuffer', and 'Map'. Declares methods for map operations, live editing, selection manipulation, and drawing actions. Includes 'LiveClient', 'LiveServer', 'Action', 'Selection', and 'Map' headers."
  - filepath: "wxwidgets/gui.cpp"
    description: "Manages the main graphical user interface using wxWidgets. Initializes the main frame, AUI manager for dockable panes (palettes, minimap), tabbed map views, and toolbars. Handles UI events, global settings, data directory management, loading/unloading client versions and associated data files (items, creatures, materials). Implements dialogs (welcome, popups, lists, text boxes), hotkey management, and editor modes (drawing/selection). Manages brush selection, size, shape, and other brush-related options. Contains logic for autosave functionality and detached map views."
  - filepath: "wxwidgets/gui.h"
    description: "Header for 'GUI'. Defines the 'GUI' class, which acts as a central manager for the application's UI elements and state. Declares members for 'wxAuiManager', 'MapTabbook', 'MainFrame', various brushes, palettes, minimap, and editor state variables (mode, zoom, brush settings). Defines 'Hotkey' structure and methods for UI interaction, perspective loading/saving, and managing editor tabs and views."
  - filepath: "wxwidgets/brush.cpp"
    description: "Implementation for the global 'Brushes' manager ('g_brushes') and the base 'Brush' class. 'Brushes' handles initialization, clearing, adding, removing, and unserializing brush definitions from XML. The 'Brush' class provides a virtual interface for different brush types, including drawing, undrawing, and checking drawability. Defines derived classes like 'FlagBrush', 'DoorBrush', 'OptionalBorderBrush', and 'EraserBrush' with their specific logic."
  - filepath: "wxwidgets/brush.h"
    description: "Header for brush management. Defines the 'Brush' base class with its virtual methods and properties (ID, name, look ID, type checks like 'isRaw', 'isDoodad', etc.). Declares the 'Brushes' class for managing all brush instances. Includes forward declarations for various specific brush types. Defines 'TerrainBrush' as a specialized base for brushes interacting with terrain features."
  - filepath: "wxwidgets/ground_brush.cpp"
    description: "Implements the 'GroundBrush' class for drawing terrain ground tiles. Handles loading ground brush definitions from XML, including different item variations, chances, and border configurations ('AutoBorder'). The core logic involves 'draw' (placing random ground items), 'undraw' (removing ground), and 'doBorders' (calculating and applying appropriate border items based on neighboring tiles and brush friendship rules). Defines 'AutoBorder' class logic for parsing border rules and item assignments."
  - filepath: "wxwidgets/ground_brush.h"
    description: "Header for 'GroundBrush'. Defines the 'GroundBrush' class, inheriting from 'TerrainBrush'. Specifies structures for 'BorderBlock', 'ItemChanceBlock', 'SpecificCaseBlock', and 'BorderCluster' used in border calculation logic. Declares static border type arrays and methods for initializing, loading, drawing, and borderizing ground."
  - filepath: "wxwidgets/wall_brush.cpp"
    description: "Implements 'WallBrush' and 'WallDecorationBrush'. 'WallBrush' handles drawing various wall types (vertical, horizontal, corners, poles, T-junctions, diagonals, intersections) and associated door/window items. Logic includes loading definitions from XML, randomizing wall item variations, and 'doWalls' which calculates and applies the correct wall segment based on adjacent walls. 'WallDecorationBrush' is a specialization for items placed on existing walls."
  - filepath: "wxwidgets/wall_brush.h"
    description: "Header for 'WallBrush' and 'WallDecorationBrush'. Defines these classes, inheriting from 'TerrainBrush'. 'WallBrush' includes structures for 'WallType' (item ID and chance) and 'DoorType' (type, ID, locked status) and manages collections of these for different wall alignments. Declares static border type arrays for wall calculations."
  - filepath: "wxwidgets/table_brush.cpp"
    description: "Implements 'TableBrush' for drawing table-like items (counters, etc.). Handles loading definitions from XML, including different item variations for various alignments (vertical, horizontal, ends, alone). The 'doTables' method calculates and applies the correct table segment based on adjacent table pieces."
  - filepath: "wxwidgets/table_brush.h"
    description: "Header for 'TableBrush'. Defines the 'TableBrush' class, inheriting from 'Brush'. Includes structures for 'TableType' (item ID and chance) and 'TableNode' to manage item variations for different alignments. Declares static table type arrays for table segment calculation."
  - filepath: "wxwidgets/carpet_brush.cpp"
    description: "Implements 'CarpetBrush' for drawing carpet items. Handles loading definitions from XML, including different item variations for various alignments (center, cardinal directions, corners, diagonals). The 'doCarpets' method calculates and applies the correct carpet piece based on adjacent carpet pieces. Supports layering carpets if enabled in settings."
  - filepath: "wxwidgets/carpet_brush.h"
    description: "Header for 'CarpetBrush'. Defines the 'CarpetBrush' class, inheriting from 'Brush'. Includes structures for 'CarpetType' (item ID and chance) and 'CarpetNode' to manage item variations for different alignments. Declares static carpet type arrays for carpet piece calculation."
  - filepath: "wxwidgets/eraser_brush.cpp"
    description: "Implements 'EraserBrush'. The 'draw' method removes most items from a tile, respecting a setting to leave unique/complex items. The 'undraw' method (typically triggered by right-click) performs a more aggressive clear, removing more items including borders and potentially unique items depending on settings."
  # wxwidgets/eraser_brush.h is missing from the provided source.
  # Its functionality is likely simple and might be implicitly defined or merged elsewhere.
  # EraserBrush inherits from Brush.
  - filepath: "wxwidgets/selection.cpp"
    description: "Implements the 'Selection' class, which manages the set of currently selected tiles and items within the editor. Handles adding and removing tiles, items, spawns, and creatures to/from the selection. Manages selection sessions ('start', 'commit', 'finish') which integrate with the 'ActionQueue' for undo/redo functionality. Provides methods to get the min/max position of the selection and clear the selection. Also includes 'SelectionThread' for performing selections in a separate thread, though its usage might be limited."
  - filepath: "wxwidgets/selection.h"
    description: "Header for 'Selection'. Defines the 'Selection' class and its members, including the 'TileSet' holding selected tiles and a reference to the 'Editor'. Declares methods for manipulating the selection and managing selection sessions. Defines 'SessionFlags' for controlling session behavior (internal, subthread). Also declares 'SelectionThread' for threaded selection operations."
  - filepath: "wxwidgets/map_drawer.cpp"
    description: "Handles all rendering of the map canvas. Manages 'DrawingOptions' (e.g., show creatures, spawns, grid, transparency). Sets up OpenGL for 2D rendering. Contains the main drawing loop which iterates through visible map nodes and tiles. Implements methods to blit items ('BlitItem'), creatures ('BlitCreature'), and special indicators (spawns, waypoints, house exits, tooltips). Handles drawing of the brush cursor, selection boxes, live editing cursors, and dragging shadows. Integrates with 'LightDrawer' for lighting effects. Includes logic for minimap-style rendering and screenshot capture."
  - filepath: "wxwidgets/map_drawer.h"
    description: "Header for 'MapDrawer'. Defines 'DrawingOptions' struct for controlling visual aspects of the map display. Defines 'MapTooltip' struct for hover information. Declares the 'MapDrawer' class, its members (canvas, editor, drawing options, light drawer), and its extensive list of drawing methods. Includes forward declarations for 'MapCanvas' and 'LightDrawer'."
current_functionality_summary: |
  The wxWidgets codebase for Remere's Map Editor implements a comprehensive 2D tile-based map editor.
  The: 'Editor' class is central, managing map data ('Map'), user actions ('ActionQueue'), and selections ('Selection'). It handles loading/saving OTBM maps, import/export features, and core editing operations like drawing with brushes and manipulating selections.
  The: 'GUI' class orchestrates the user interface using wxWidgets. It sets up the main window, toolbars, palettes, and map views. It manages global settings, client version data (sprites, items), and editor modes (draw/select). It also routes user input to the appropriate editor or brush.
  Brushes: are managed by a global 'g_brushes' object. The 'Brush' base class defines a common interface, with specialized classes like 'GroundBrush', 'WallBrush', 'TableBrush', 'CarpetBrush', and 'EraserBrush' implementing specific drawing behaviors. These brushes often include complex logic for auto-bordering or aligning themselves with adjacent tiles of the same type. Doodad brushes (defined in 'doodad_brush.cpp/h', not part of this WBS but related) allow for placing pre-defined collections of items.
  The: 'Selection' class handles which tiles and items are currently selected, supporting operations like add, remove, cut, copy, and paste, all integrated with the undo/redo system.
  The: 'MapDrawer' class is responsible for rendering the map onto a 'MapCanvas'. It uses OpenGL and handles various drawing options, including visibility of different map elements (creatures, spawns, grid), transparency, lighting effects, and drawing previews for brushes and selections. It also renders tooltips and cursors for live editing.
  The: system uses a tile-based approach, where each tile can contain a ground item, multiple other items, a creature, and a spawn point. Tiles also hold state flags for things like protection zones or house ownership.
  The: editor supports different client versions by loading version-specific data for items and sprites.
refactoring_suggestions: |
  - **OpenGL Abstraction:** The direct OpenGL calls in 'MapDrawer' should be encapsulated within a dedicated rendering engine or graphics abstraction layer. This would simplify porting to Qt 6's QOpenGLWidget or other graphics APIs and make the rendering code more modular and testable.
  - **Brush System:** While the brush system is functional, the XML loading and the interaction logic (especially for auto-bordering in 'GroundBrush', 'WallBrush', etc.) are tightly coupled with wxWidgets and global states (like 'g_gui'). This could be refactored into a more self-contained module with clearer interfaces. Consider a factory pattern for brush creation and a more data-driven approach for border rules.
  - **Action/Command System:** The 'ActionQueue' and 'Change' classes are fundamental for undo/redo. Ensure this system is robust and easily adaptable to Qt's undo framework ('QUndoStack', 'QUndoCommand'). The current system seems to rely on deep copying tiles for changes, which might be performance-intensive for large operations.
  - **Event Handling:** Decouple event handling from 'GUI' and 'MapCanvas' where possible. Use signals and slots or a more generic event bus system in Qt.
  - **Global State Management:** Reduce reliance on global objects like 'g_gui', 'g_brushes', 'g_items'. Use dependency injection or context objects to provide necessary services to different parts of the application. This will be crucial for Qt, which encourages object ownership and parent-child relationships.
  - **Selection Logic:** The 'Selection' class interacts directly with 'Editor' and 'ActionQueue'. This could be made more independent, perhaps by emitting signals when the selection changes.
  - **Drawing Options:** The 'DrawingOptions' struct in 'MapDrawer' is a good start. Ensure this is cleanly managed and accessible, possibly through a settings service rather than direct member access.
  - **File Handling:** Standardize file and path management. Qt offers 'QFile', 'QDir', and 'QStandardPaths' which should be used.
  - **Data Structures:** Review custom data structures (like those in 'editor.h' or 'map.h') and consider if standard Qt containers or more modern C++ data structures could simplify the code.
  - **Error Handling:** Standardize error reporting. Instead of 'wxString& error' parameters, consider using exceptions or a more structured error reporting mechanism.
qt6_migration_steps:
  - "**1. Setup Qt 6 Project & Basic UI Shell:**"
  - Create a new Qt 6 Widgets application.
  - Recreate the main window ('MainFrame' -> 'QMainWindow'), menu bar, toolbars, and status bar.
  - Implement a central widget that can host the map display and dockable widgets (palettes, minimap) using 'QDockWidget'.
  - "**2. Port Core Data Structures (Map, Tile, Item):**"
  - Adapt 'BaseMap', 'Map', 'Tile', 'Item', 'ItemType', etc. (from LOGIC-01, LOGIC-02) to be independent of wxWidgets.
  - Replace wxWidgets data types (e.g., 'wxString', 'wxArrayString', 'wxFileName') with Qt/STL equivalents ('QString', 'QList', 'QFileInfo').
  - "**3. Port Client Version & Data Management:**"
  - Adapt 'ClientVersion', 'SpriteManager', 'ItemManager', 'CreatureManager', 'MaterialManager' (from DATA WBS items).
  - Replace wxWidgets specific file/path handling with Qt's 'QFile', 'QDir', 'QStandardPaths'.
  - Ensure XML parsing (e.g., for brushes, materials) uses Qt's XML classes ('QXmlStreamReader/Writer') or a compatible library if pugixml is deeply tied to wx.
  - "**4. Implement Map Display Area ('MapCanvas' -> 'QOpenGLWidget'):**"
  - Create a custom 'QOpenGLWidget' subclass for rendering the map.
  - Port the 'MapDrawer' logic. This is a major step.
    - Initialize OpenGL within the 'QOpenGLWidget' context.
    - Adapt the drawing loop and coordinate systems.
    - Replace direct OpenGL calls with a graphics abstraction layer if developed, or map them to QOpenGLFunctions.
    - Re-implement mouse event handling (pan, zoom, tile selection, brush strokes) using Qt's event system.
  - "**5. Port the Action/Undo System:**"
  - Adapt 'ActionQueue', 'Action', 'BatchAction', and 'Change' classes.
  - Integrate with Qt's 'QUndoStack'. Each 'Action' or 'BatchAction' could become a 'QUndoCommand'.
  - Ensure that applying/undoing commands correctly updates the map data and triggers a repaint of the 'QOpenGLWidget'.
  - "**6. Port the Editor Logic:**"
  - Instantiate the 'Editor' class (or its Qt equivalent).
  - Connect UI actions (menu items, toolbar buttons) to 'Editor' methods.
  - Manage multiple map documents/tabs using 'QTabWidget' where each tab contains an instance of the 'Editor' (or a controller managing an 'Editor' and its 'QOpenGLWidget').
  - "**7. Port Brush System & Palettes:**"
  - Adapt the 'Brush' base class and all specific brush types ('GroundBrush', 'WallBrush', etc.) to remove wxWidgets dependencies.
  - Re-implement the brush palette window using 'QDockWidget' and custom widgets (e.g., 'QListView' or 'QTreeView' with custom delegates) to display brush icons and options.
  - Connect brush selection in the palette to the active 'Editor' and 'MapDrawer'.
  - The logic for 'FillDoodadPreviewBuffer' in 'GUI' will need to be moved, likely to a brush management service or the palette widget itself.
  - "**8. Port Selection Tools:**"
  - Adapt the 'Selection' class.
  - Ensure mouse interactions on the 'QOpenGLWidget' correctly call 'Selection' methods.
  - Visual feedback for selection (e.g., highlighting, selection box) needs to be re-implemented in 'MapDrawer' using Qt-compatible drawing.
  - "**9. Port GUI Class Functionality (Dialogs, Settings, Modes):**"
  - Replace wxWidgets dialogs ('wxMessageDialog', 'wxFileDialog', etc.) with their Qt counterparts ('QMessageBox', 'QFileDialog').
  - Port settings management from 'g_settings' (likely a custom class using 'wxConfig') to 'QSettings'.
  - Re-implement editor mode switching (Drawing/Selection) and ensure the UI (toolbars, cursor) updates accordingly.
  - Hotkey management: Qt has its own shortcut system ('QShortcut', 'QAction::setShortcut').
  - "**10. Port Specific Features & Tools:**"
  - "**Minimap:** Re-implement as a 'QDockWidget' containing a custom widget that renders a smaller overview of the map, potentially reusing parts of 'MapDrawer' with different 'DrawingOptions'."
  - "**Copy/Paste:** Adapt the 'CopyBuffer' and ensure it works with the Qt clipboard ('QClipboard')."
  - "**Live Editing:** This is a complex feature. The networking part ('LiveSocket', 'LiveClient', 'LiveServer') would need to be ported from 'wxSocket' to 'QTcpSocket'/'QTcpServer' or a similar Qt networking class. Cursor and change broadcasting will need careful adaptation."
  - "**Import/Export:** Re-implement using Qt file dialogs and ensure underlying map format I/O ('IOMapOTBM', etc.) is wx-agnostic."
  - "**11. Refine and Test:**"
  - Thoroughly test all functionalities.
  - Profile and optimize performance, especially map rendering and large operations.
  - Ensure consistent UI/UX.
  - Address any platform-specific issues.

definition_of_done:
  - All core drawing functionalities from 'editor.cpp' (draw, undraw using various brushes) are ported and operational in the Qt 6 version.
  - All advanced brush logic (ground, wall, table, carpet, eraser) including auto-bordering and specific draw/undraw behaviors are correctly implemented.
  - Selection tools (select, add/remove from selection, clear selection, select area) are functional.
  - Map rendering via 'MapDrawer' is ported to a Qt 6 'QOpenGLWidget', displaying tiles, items, creatures (if applicable to this WBS), and visual feedback for brushes and selections.
  - Editor modes (Drawing, Selection) can be switched and affect interactions correctly.
  - Basic UI elements related to drawing and selection (e.g., brush size/shape controls if part of 'GUI`'s responsibility here) are functional.
  - Undo/Redo works for drawing and selection operations.
  - No more direct dependencies on wxWidgets in the ported C++ classes for this WBS item.
  - Basic unit tests are created for critical brush logic and selection transformations.
estimation_effort:
  - "High (30-40 developer days). This WBS item involves porting the absolute core of the editor's interactive functionality: drawing, brushes, selection, and their visual representation. The 'MapDrawer' port to 'QOpenGLWidget' is substantial. Adapting the brush system and ensuring all auto-bordering logic works correctly will be time-consuming. Integrating the selection mechanism and undo/redo for these actions is also complex."
known_missing_files:
  - "wxwidgets/eraser_brush.h"
  - "wxwidgets/doodad_brush.cpp" # Not listed in original_input_files but related to brush system
  - "wxwidgets/doodad_brush.h"   # Not listed in original_input_files but related to brush system
  - "wxwidgets/raw_brush.cpp"    # Not listed in original_input_files but related to brush system
  - "wxwidgets/raw_brush.h"      # Not listed in original_input_files but related to brush system
  # These are not strictly part of this WBS's original_input_files but are core to the brush system described.
  # Their absence in the WBS input implies their logic might be simpler or handled differently.
  # For LOGIC-08, the focus is on the listed files. Eraser_brush.h is the only one directly "missing" from the list.
boilerplate_coder_ai_prompt: |
  As a C++ expert with experience in Qt 6 and game development, your task is to port the map editing functionalities from a wxWidgets-based application to Qt 6. You will focus on the logic contained within the following files: 'editor.cpp', 'gui.cpp', 'brush.cpp', 'ground_brush.cpp', 'wall_brush.cpp', 'table_brush.cpp', 'carpet_brush.cpp', 'eraser_brush.cpp', 'selection.cpp', and 'map_drawer.cpp' (and their corresponding headers).

  **Key Responsibilities:**

  1.  **Understand Existing Logic:** Thoroughly analyze the provided wxWidgets C++ source code to understand:
      *   How the 'Editor' class manages map data, actions, and selections.
      *   How the 'GUI' class handles user interactions, modes, and brush options.
      *   The 'Brush' class hierarchy and the specific drawing/bordering logic of 'GroundBrush', 'WallBrush', 'TableBrush', 'CarpetBrush', and 'EraserBrush'.
      *   The 'Selection' class's mechanisms for selecting and modifying map elements.
      *   The 'MapDrawer`'s rendering pipeline using OpenGL, including how it displays tiles, items, brush previews, and selection highlights.

  2.  **Design Qt 6 Equivalents:**
      *   Propose Qt 6 classes and patterns to replace wxWidgets components. For example, 'QMainWindow' for 'MainFrame', 'QOpenGLWidget' for 'MapCanvas', 'QDockWidget' for palettes, 'QUndoStack' for the action queue.
      *   Design how user input (mouse events for drawing/selection) will be handled in the 'QOpenGLWidget' and propagated to the editor/brush logic.
      *   Determine how brush options and editor modes will be managed and communicated between the UI and the core logic in a Qt-idiomatic way.

  3.  **Port Core Functionality:**
      *   **Map Rendering:** Migrate 'MapDrawer' to a 'QOpenGLWidget' subclass. Adapt OpenGL calls and shader management if any (though this version seems to use immediate mode). Ensure efficient rendering of the tile-based map.
      *   **Brush System:** Port the 'Brush' base class and the specific brush type implementations. The core logic for 'draw', 'undraw', and auto-bordering (e.g., 'doBorders' in 'GroundBrush', 'doWalls' in 'WallBrush') needs to be preserved while removing wxWidgets dependencies.
      *   **Selection Handling:** Port the 'Selection' class. Mouse interactions on the 'QOpenGLWidget' should correctly translate to selection operations. Visual feedback for selections must be re-implemented.
      *   **Editor Actions:** Port the core drawing and selection modification actions from the 'Editor' class. Integrate these with Qt's undo/redo framework ('QUndoCommand', 'QUndoStack').
      *   **GUI Logic (Subset):** Port the parts of the 'GUI' class that are directly responsible for managing drawing modes, brush parameters (size, shape), and triggering editor actions. Global state access should be refactored.

  4.  **Refactor for Qt:**
      *   Replace wxWidgets data types ('wxString', 'wxPoint', 'wxRect', 'wxColour', 'wxFileName') with Qt equivalents ('QString', 'QPoint', 'QRect', 'QColor', 'QFileInfo').
      *   Adapt event handling to Qt's signals and slots mechanism.
      *   Use Qt's resource system for managing assets like icons if applicable.
      *   Manage memory using Qt's parent-child ownership model where appropriate.

  **Constraints & Considerations:**

  *   The goal is a functional port of the described logic, not a complete redesign unless necessary for Qt integration.
  *   Maintain the existing file structure where logical, creating new files as needed for Qt-specific UI components.
  *   Focus on making the core C++ logic independent of wxWidgets. UI-specific parts (like actual palette widgets) will be handled in separate WBS items but design with them in mind.
  *   The provided 'eraser_brush.h' is missing; assume its declarations are simple or were part of 'eraser_brush.cpp' or 'brush.h'. Implement based on 'eraser_brush.cpp'.
  *   Address any identified refactoring suggestions from the WBS to improve modularity and Qt compatibility.
  *   Ensure that the ported code is clean, well-commented, and follows good C++ and Qt 6 practices.

  **Output:**

  *   Ported C++ header and source files for the specified components.
  *   Brief notes on any major design decisions made during the port, especially regarding Qt 6 replacements for wxWidgets concepts.
  *   A list of any parts of the original code that were particularly challenging to port or might require further attention.
