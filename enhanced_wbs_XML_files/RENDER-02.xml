<?xml version="1.0" ?>
<RENDER-02>
  <id>RENDER-02</id>
  <section>Rendering System</section>
  <title>Implement Basic Tile Rendering (Colored Quads with Ghosting)</title>
  <original_task_id>RENDER-02</original_task_id>
  <original_input_files>
    <original_input_file>wxwidgets/map_drawer.h</original_input_file>
    <original_input_file>wxwidgets/map_drawer.cpp</original_input_file>
  </original_input_files>
  <dependencies>
    <dependencie>RENDER-01</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-03</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>CORE-14-MaterialSystem</dependencie>
    <dependencie>REFACTOR-01</dependencie>
  </dependencies>
  <analyzed_input_files>
    <analyzed_input_file>
      <filepath>wxwidgets/map_drawer.h</filepath>
      <description>Declares the 'MapDrawer' class and the 'DrawingOptions' struct. 'MapDrawer' is responsible for all OpenGL rendering of the map content (tiles, items, creatures, overlays). It defines various 'Blit*' methods for sprites and colored squares, and methods like 'DrawTile', 'DrawMap', 'DrawGrid', etc. 'DrawingOptions' holds numerous boolean flags (e.g., 'show_creatures', 'transparent_floors') that control what visual elements are rendered, typically sourced from global settings. Also defines 'MapTooltip' struct and 'ZoneFinder' helper class.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/map_drawer.cpp</filepath>
      <description>Implements 'MapDrawer'. 'DrawMap()' iterates through visible map nodes ('QTreeNode') and Z-floors. 'DrawTile()' is the core method for rendering a single tile's content: it determines appropriate colors/alpha for ground and items based on 'DrawingOptions' and tile state (PZ, house, selection), then calls 'BlitItem'. 'BlitItem' handles actual sprite rendering (using 'GameSprite::getHardwareID()' and immediate mode OpenGL 'glBegin/glEnd') or calls 'BlitSquare' for technical items. 'BlitSquare' renders a colored quad, often using the texture of 'SPRITE_ZONE' and 'glColor' for tinting. 'DrawTooltips' uses GLUT for text. Overlay methods include 'DrawGrid', 'DrawSelectionBox', 'DrawLiveCursors', 'DrawBrush'. Contains a static 'RGBQuad minimap_color[256]' array for minimap color conversion.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <current_functionality_summary>The 'MapDrawer' class in 'wxwidgets/map_drawer.cpp' is the core rendering engine, using immediate mode OpenGL. Its key responsibilities relevant to future rendering tasks include:
- Iterating visible map sections (nodes from a QuadTree, tiles within nodes) across multiple Z-floors.
- 'DrawTile()': For each tile, it determines appropriate coloring and alpha blending based on 'DrawingOptions' (e.g., 'show_blocking', 'show_houses', 'transparent_floors') and tile flags (PZ, house ID, selection state).
- If rendering in &quot;minimap color mode&quot; ('show_only_colors' or 'show_as_minimap'), it uses 'tile-&gt;getMiniMapColor()' and 'BlitSquare' (which tints a basic zone texture) to draw a colored quad for the tile.
- Otherwise, it calls 'BlitItem' for the ground and then for each stacked item.
- 'BlitItem()': Retrieves the 'GameSprite', determines animation frame/patterns, gets texture ID via 'GameSprite::getHardwareID()', and renders a textured quad using 'glBegin(GL_QUADS)'. It also handles special rendering for technical/invisible items (often as colored squares via 'BlitSquare') and applies color/alpha modifications.
- Ghosting for floors above/below the current floor is achieved by drawing shaded quads or rendering tiles with reduced alpha.
- Overlays like grids, selection boxes, tooltips (using GLUT), brush previews, and live cursors are also handled.
This: specific WBS task ('RENDER-02') focuses only on the foundational step of iterating through tiles and rendering them as simple colored quads based on minimap color or special tile state (like house areas), including floor ghosting via alpha blending. Full sprite rendering is deferred.
- Iterating through visible map sections (nodes and tiles) across different Z-floors.
- For each tile, rendering its ground item and then any stacked items. This involves:
  - Determining the correct sprite, animation frame, and pattern for each item/creature.
  - Using 'GameSprite::getHardwareID()' to obtain an OpenGL texture ID.
  - Rendering textured quads using 'glBegin(GL_QUADS)', 'glTexCoord2f', and 'glVertex2f'.
- Applying various visual effects and information overlays:
  - &quot;Ghosting&quot; (alpha blending) for floors above/below the current floor.
  - Color tinting for special tile states (e.g., Protection Zones, house areas, selected items).
  - Drawing creature sprites.
  - Displaying spawn, waypoint, and house exit icons.
  - Rendering a grid, selection boxes, and tooltips (using 'glutBitmapCharacter' for text).
- The rendering process is controlled by numerous flags in a 'DrawingOptions' struct, which are typically sourced from global settings ('g_settings').
This: specific WBS task ('RENDER-02') focuses only on the foundational step of iterating through tiles and rendering them as simple colored quads, including floor ghosting, not full sprite/item rendering.
</current_functionality_summary>
  <refactoring_suggestions>- **Modern OpenGL:** The immediate mode OpenGL ('glBegin', 'glEnd') used in 'MapDrawer' is deprecated and inefficient. The Qt 6 version ('MapView::paintGL' or a new 'QtMapDrawer' class) must use modern OpenGL with shaders, Vertex Buffer Objects (VBOs), and Vertex ArrayObjects (VAOs). This is a fundamental change.
- **Decouple from Globals:** Remove dependencies on 'g_gui' and 'g_settings'. Drawing options should be passed explicitly or managed by a dedicated settings service (e.g., 'AppSettings' from 'APPSTATE-01').
- **Rendering Pipeline:** Design a more structured rendering pipeline. Instead of direct GL calls scattered in 'Blit*' methods, consider a system where renderable objects (sprites, quads, text) are collected and then processed by a renderer that manages shaders and batching.
- **Text Rendering:** Replace 'glutBitmapCharacter' with Qt's text rendering capabilities (e.g., 'QPainter::drawText' if rendering onto a QPaintDevice, or rendering text to a texture using 'QFont' and 'QImage' for use in OpenGL).
- **Batching:** The current per-item 'glBegin/glEnd' is highly inefficient. The new system should batch rendering of sprites that share the same texture atlas and shader (part of 'RENDER-03').
</refactoring_suggestions>
  <qt6_migration_steps>
    <qt6_migration_step>1. Prepare 'MapView' for Drawing: Ensure 'MapView' (from 'RENDER-01') has access to the 'mapcore::Map* m_map' instance and 'AppSettings* m_appSettings'. The 'paintGL()' method should already have OpenGL context initialization and projection/view matrix setup.</qt6_migration_step>
    <qt6_migration_step>2. Calculate Visible Tile Range in 'MapView::paintGL()': Based on 'm_viewCenterMapCoords', 'm_zoomFactor', widget 'width()', 'height()', and 'TILE_PIXEL_SIZE' (e.g., 32), determine the range of map tile coordinates ('minMapX', 'maxMapX', 'minMapY', 'maxMapY') visible in the viewport. Determine the Z-floor range to render ('renderMinZ', 'renderMaxZ') based on 'm_currentFloor' and 'm_appSettings-&gt;getBoolean(ConfigKey::ShowAllFloors)' (using the new 'ConfigKey' enum from 'APPSTATE-01'). If showing all floors, this typically means 'm_currentFloor' +/- a few floors, clamped to 0-15. The original 'MapDrawer' logic for 'start_z' and 'superend_z' can be a reference.</qt6_migration_step>
    <qt6_migration_step>3. Implement Tile Iteration and Colored Quad Rendering Loop in 'MapView::paintGL()': Iterate 'z' from 'renderMaxZ' down to 'renderMinZ' (drawing from top down). For each 'z', iterate 'y' from 'minMapY' to 'maxMapY'. For each 'y', iterate 'x' from 'minMapX' to 'maxMapX'. Get 'mapcore::Tile* tile = m_map-&gt;getTile(x, y, z);'. If '!tile || (tile-&gt;empty() &amp;&amp; !tile-&gt;isHouseTile())', continue (skip empty non-house tiles). Determine Tile Color and Alpha: Set 'QColor tileColor = Qt::darkGray;' and 'float alpha = 1.0f;'. If 'tile-&gt;ground &amp;&amp; tile-&gt;ground-&gt;getMiniMapColor() != 0xFF' (and 'm_appSettings-&gt;getBoolean(ConfigKey::ShowOnlyTileFlags)' is false): Use a helper function to convert the 8-bit minimap color to an RGB 'QColor'. Set 'tileColor = minimapColorToRGB(tile-&gt;ground-&gt;getMiniMapColor());'. Else if 'tile-&gt;isHouseTile() &amp;&amp; m_appSettings-&gt;getBoolean(ConfigKey::ShowHouses)': Set 'tileColor = QColor(Qt::blue).darker(150);'. Else if ('m_appSettings-&gt;getBoolean(ConfigKey::ShowOnlyTileFlags)' or 'm_appSettings-&gt;getBoolean(ConfigKey::ShowSpecialTiles)'): Apply color tints for PZ, PvP, NoLogout based on 'tile-&gt;getMapFlags()' similar to 'MapDrawer::DrawTile' but using 'QColor'. Apply Ghosting: If 'z &lt; m_currentFloor': 'alpha = 0.3f;'. Else if 'z &gt; m_currentFloor': If 'm_appSettings-&gt;getBoolean(ConfigKey::TransparentFloors)': 'alpha = 0.2f;'. Else: 'continue;'. Set 'tileColor.setAlphaF(alpha);'. Render the Quad: Calculate screen coordinates for the top-left of the tile and 'scaledTileSize' based on 'x, y', 'm_viewCenterMapCoords', 'm_zoomFactor', and 'TILE_PIXEL_SIZE'. Using direct OpenGL: Ensure a simple shader program for colored quads is bound before the loops. Pass 'tileColor' to the shader as a uniform. Define vertices for a quad at the appropriate coordinates. Add these vertices to a VBO (if batching many quads) or draw immediately (if simpler for this step). For this WBS, immediate drawing of individual quads is acceptable if VBO setup is too complex for the scope.</qt6_migration_step>
    <qt6_migration_step>4. Shader for Colored Quads (if using direct OpenGL): Create minimal vertex shader with '#version 330 core', 'layout (location = 0) in vec2 aPos;', 'uniform mat4 mvpMatrix;', and 'void main() { gl_Position = mvpMatrix * vec4(aPos.x, aPos.y, 0.0, 1.0); }'. Create minimal fragment shader with '#version 330 core', 'out vec4 FragColor;', 'uniform vec4 uColor;', and 'void main() { FragColor = uColor; }'. Compile and link these shaders in 'MapView::initializeGL()'. Store program ID.</qt6_migration_step>
    <qt6_migration_step>5. Defer Sprite Rendering: Explicitly do not implement 'BlitItem', 'BlitCreature', or any texture-based sprite rendering in this task. This is for 'RENDER-03'.</qt6_migration_step>
  </qt6_migration_steps>
  <definition_of_done>
    <element>'MapView::paintGL' correctly iterates through the map tiles visible in the current viewport.</element>
    <element>The range of visible map tiles (X, Y coordinates) and Z-floors is accurately calculated based on 'MapView's view parameters (center, zoom, current floor) and settings from 'AppSettings' (e.g., 'ShowAllFloors').</element>
    <element>Each non-empty 'mapcore::Tile' (or house tile area) is rendered as a simple colored quad at its correct on-screen position and scale.</element>
    <element>The color of the quad is derived from the tile's ground item's minimap color (if available and applicable settings are active), or a default/special color (e.g., for house areas or other tile flags if 'ShowOnlyTileFlags' is on).</element>
    <element>Ghosting logic is implemented: tiles on floors other than 'm_currentFloor' are rendered with appropriate alpha blending (e.g., lower floors dimmer, higher floors more transparent if 'TransparentFloors' setting is active).</element>
    <element>Rendering uses direct OpenGL calls with a simple shader program for drawing colored quads. (Alternatively, 'QPainter::fillRect' could be used if native painting is active, but direct GL is preferred for future sprite rendering).</element>
    <element>Full sprite-based rendering of items/creatures is NOT implemented in this task.</element>
  </definition_of_done>
  <estimation_effort>Medium</estimation_effort>
  <known_missing_files/>
  <boilerplate_coder_ai_prompt>In 'MapView::paintGL()' (from 'RENDER-01'), implement the logic to iterate through visible map tiles and render each existing tile as a simple **colored quad**. This task focuses on the iteration, coordinate transformation, and basic quad rendering with floor ghosting. Full sprite rendering is for 'RENDER-03'.

**Assumptions:**
- 'MapView' has members: 'mapcore::Map* m_map;', 'AppSettings* m_appSettings;', 'int m_currentFloor;', 'qreal m_zoomFactor;', 'QPointF m_viewCenterMapCoords;', 'QMatrix4x4 m_projectionMatrix;'.
- 'TILE_PIXEL_SIZE' (e.g., 32) is a defined constant.
- A simple GLSL shader program ('m_colorQuadShaderProgram') for drawing colored quads is compiled and linked in 'initializeGL()'. It takes a 'vec2 aPos' and 'uniform mat4 mvpMatrix', and a 'uniform vec4 uColor'.

**1. Calculate Visible Range &amp; Floor Range in 'paintGL()':**
    - Determine 'minMapX, maxMapX, minMapY, maxMapY' based on 'm_viewCenterMapCoords', 'm_zoomFactor', 'width()', 'height()', 'TILE_PIXEL_SIZE'.
    - Determine 'renderMinZ, renderMaxZ' based on 'm_currentFloor' and 'm_appSettings-&gt;getBoolean(ConfigKey::ShowAllFloors)'. Clamp to '0' and 'MAX_Z'.

**2. Prepare for Drawing (in 'paintGL()'):**
    - 'm_colorQuadShaderProgram.bind();'
    - Set up any necessary VBO/VAO for quad rendering if you are batching. For simplicity in this step, direct drawing of individual quads is acceptable if VBO management is too complex *for this specific WBS*.

**3. Tile Iteration and Rendering Loop (in 'paintGL()'):**
    ```cpp
    // Base Model matrix (identity, or pre-translated/scaled if projection is static)
    QMatrix4x4 modelMatrix;
    // Apply inverse view translation based on m_viewCenterMapCoords (in tile units)
    // This effectively makes m_viewCenterMapCoords the center of your world coordinates for the projection
    modelMatrix.translate(-m_viewCenterMapCoords.x() * TILE_PIXEL_SIZE,
                          -m_viewCenterMapCoords.y() * TILE_PIXEL_SIZE);


    for (int z = renderMaxZ; z &gt;= renderMinZ; --z) {
        // Optional: Adjust modelMatrix for Z-offset if not handled by painter's algorithm &amp; depth buffer
        // float zOffset = (m_currentFloor - z) * TILE_PIXEL_SIZE * 0.5; // Example offset
        // QMatrix4x4 floorModelMatrix = modelMatrix;
        // floorModelMatrix.translate(zOffset, zOffset); // Apply perspective offset for floors

        for (int y = minMapY; y &lt;= maxMapY; ++y) {
            for (int x = minMapX; x &lt;= maxMapX; ++x) {
                mapcore::Tile* tile = m_map-&gt;getTile(x, y, z);
                if (!tile || (tile-&gt;empty() &amp;&amp; !tile-&gt;isHouseTile())) {
                    continue;
                }

                QColor baseColor = Qt::darkGray; // Default
                float alpha = 1.0f;

                if (tile-&gt;ground &amp;&amp; tile-&gt;ground-&gt;getMiniMapColor() != 0xFF &amp;&amp; !m_appSettings-&gt;getBoolean(ConfigKey::ShowOnlyTileFlags)) {
                    // Implement helper: static QColor minimapToRGB(uint8_t minimapColor)
                    baseColor = minimapToRGB(tile-&gt;ground-&gt;getMiniMapColor());
                } else if (tile-&gt;isHouseTile() &amp;&amp; m_appSettings-&gt;getBoolean(ConfigKey::ShowHouses)) {
                    baseColor = QColor(Qt::blue).darker(150);
                }
                // Add more conditions for PZ, NoLogout etc. from AppSettings flags if ShowOnlyTileFlags is true or ShowSpecialTiles is true

                if (z != m_currentFloor) {
                    if (z &lt; m_currentFloor) { // Lower floors
                        alpha = 0.4f; // Dimmer
                    } else { // Higher floors (z &gt; m_currentFloor)
                        if (m_appSettings-&gt;getBoolean(ConfigKey::TransparentFloors)) {
                            alpha = 0.25f; // More transparent
                        } else {
                            continue; // Skip higher floors if transparency is off
                        }
                    }
                }
                QColor finalColor(baseColor.red(), baseColor.green(), baseColor.blue(), static_cast&lt;int&gt;(alpha * 255));

                // Prepare vertices for a quad at (x * TILE_PIXEL_SIZE, y * TILE_PIXEL_SIZE) of size TILE_PIXEL_SIZE
                // These are world coordinates that will be transformed by modelMatrix and m_projectionMatrix
                float worldX = x * TILE_PIXEL_SIZE;
                float worldY = y * TILE_PIXEL_SIZE;

                GLfloat vertices[] = {
                    worldX, worldY,
                    worldX + TILE_PIXEL_SIZE, worldY,
                    worldX + TILE_PIXEL_SIZE, worldY + TILE_PIXEL_SIZE,
                    worldX, worldY + TILE_PIXEL_SIZE
                };

                // Calculate MVP for this specific tile quad
                QMatrix4x4 mvp = m_projectionMatrix * modelMatrix; // Or floorModelMatrix

                m_colorQuadShaderProgram.setUniformValue(&quot;mvpMatrix&quot;, mvp);
                m_colorQuadShaderProgram.setUniformValue(&quot;uColor&quot;, QVector4D(finalColor.redF(), finalColor.greenF(), finalColor.blueF(), finalColor.alphaF()));

                // Draw quad (assuming VAO with a VBO for quad vertices is setup and bound)
                // glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(GLfloat), (void*)0); // If VBO contains these vertices
                // glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); // If updating VBO per tile (inefficient but simple for now)
                // Then draw: glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
                // For this WBS, if direct draw without VBO is simpler to illustrate, it's fine:
                // (but note this is not good practice for the final rendering)
                 if (/* VAO for a unit quad is bound, and aPos is setup */) {
                     QMatrix4x4 tileSpecificModel = modelMatrix;
                     tileSpecificModel.translate(worldX, worldY);
                     tileSpecificModel.scale(TILE_PIXEL_SIZE, TILE_PIXEL_SIZE);
                     mvp = m_projectionMatrix * tileSpecificModel;
                     m_colorQuadShaderProgram.setUniformValue(&quot;mvpMatrix&quot;, mvp);
                     // glDrawArrays(GL_TRIANGLE_FAN, 0, 4); // Draw the unit quad
                 }
            }
        }
    }
    m_colorQuadShaderProgram.release();
    ```

**4. Coordinate System &amp; Matrix Setup:**
    - The 'updateProjectionMatrix' in 'RENDER-01' should set up an orthographic projection where units correspond to map pixels (1 tile = 32 units at zoom 1.0).
    - The 'modelMatrix' in 'paintGL' should translate the world so that 'm_viewCenterMapCoords' (in tile units, scaled by 'TILE_PIXEL_SIZE') becomes the effective center for the projection.
    - Ensure 'screenToMapCoords' and 'mapCoordsToScreen' from 'RENDER-01' are consistent with this matrix setup.
    - The vertices for each tile quad should be in world map pixel coordinates (e.g., tile at (10,5) starts at (320,160)). The MVP matrix transforms these to screen clip space.

**Helper 'minimapToRGB(uint8_t minimapColor)':**
```cpp
// static QColor minimapToRGB(uint8_t miniColor) {
//     if (miniColor == 0xFF) return Qt::transparent; // Or a very dark gray for &quot;void&quot;
//     // Original RME color palette for minimap colors (0-215)
//     // This needs to be ported or a similar mapping created.
//     // Example:
//     int r = (miniColor / 36) % 6 * 51;
//     int g = (miniColor / 6) % 6 * 51;
//     int b = miniColor % 6 * 51;
//     return QColor(r, g, b);
// }
```
Focus: on getting the tile iteration, coordinate transformations, and basic colored quad rendering with alpha correct. Do not implement sprite loading or texture rendering.
</boilerplate_coder_ai_prompt>
</RENDER-02>
