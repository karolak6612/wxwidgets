wbs_item_id: FINAL-02
name: Port Splash Screen & Startup Logic
description: Recreate the application's splash screen and initial startup sequence
  in Qt6. This includes loading initial configurations, checking for updates (if applicable),
  and transitioning to the main editor window.
dependencies:
- CORE-02
- UI-01
input_files:
- wxwidgets/application.cpp
- wxwidgets/application.h
analyzed_input_files:
- file_path: wxwidgets/application.cpp
  description: Contains the main application class `Application`, including `OnInit`
    which handles startup sequences, settings loading, single instance check, main
    frame creation, and showing a welcome dialog (acting as a splash screen). `OnEventLoopEnter`
    handles initial map loading.
- file_path: wxwidgets/application.h
  description: Header file for the `Application` and `MainFrame` classes, defining
    their structure and event tables.
documentation_references:
- 'Qt SplashScreen Example: https://doc.qt.io/qt-6/qsplashscreen.html'
- 'Qt QSettings: https://doc.qt.io/qt-6/qsettings.html'
- 'Qt QSingleApplication (or custom IPC for single instance): https://doc.qt.io/archives/qq/qq26-singleapplication.html
  (Note: this is an older article, modern approach might use QSharedMemory + QLocalServer)'
- 'Qt QCommandLineParser: https://doc.qt.io/qt-6/qcommandlineparser.html'
- 'Qt QDesktopServices::openUrl: https://doc.qt.io/qt-6/qdesktopservices.html#openUrl'
current_functionality_summary: 'The wxWidgets application (`Application::OnInit`)
  initializes various components:

  - Sets up global exception handling.

  - Discovers data directory.

  - Loads settings, hotkeys, and client versions.

  - Initializes image handlers and editor sprites.

  - Performs a single instance check using `wxSingleInstanceChecker`. If another instance
  is running, it can send a file path via IPC and exit.

  - Creates the `MainFrame`.

  - Loads UI perspective and recent files.

  - Shows a `wxWelcomeDialog` (which includes an icon `editor_icon.xpm` that gets
  a random hue shift) if no map is opened via command line and settings permit. This
  dialog acts as the splash/initial screen.

  - `Application::OnEventLoopEnter` handles opening a map passed via command line
  or creating a new map.

  - Logic exists to open specific URLs (Discord, Idler.live) on first launch or after
  a 7-day interval.

  - Command line arguments like `-force-multi-instance` and `-ws` are parsed.

  No separate `splash.cpp`/`.h` was found; the splash functionality is integrated
  into the welcome dialog shown during `OnInit`.'
definition_of_done:
- A `QSplashScreen` is implemented, displaying an application logo (e.g., a PNG version
  of `editor_icon.xpm`).
- The random hue shift applied to the original `editor_icon.xpm` is replicated for
  the splash screen image if this visual effect is desired.
- The main application startup sequence (in `main.cpp` or a custom `QApplication`
  subclass) correctly initializes essential Qt services.
- 'Single instance logic is ported: The application checks if another instance is
  running. If so, it sends any command-line file path to the existing instance (e.g.,
  using `QSharedMemory` and `QLocalServer`/`QLocalSocket`) and then exits.'
- Application settings are loaded using `QSettings`.
- Client version data (from `CORE-02` task's output) is loaded during startup.
- The `QSplashScreen` is displayed early in the startup process.
- The main application window (`QMainWindow`) is created.
- After the main window is initialized and ready to be displayed, `QSplashScreen::finish(mainWindow)`
  is called to close the splash screen.
- Logic for opening a map from command-line arguments (using `QCommandLineParser`)
  or creating a new default map is implemented, similar to the behavior in `Application::OnEventLoopEnter`.
- The feature to open specific web URLs (e.g., Discord, project website) on first
  launch or after a set interval (e.g., 7 days) is replicated using `QDesktopServices::openUrl()`
  and `QSettings` for tracking.
- Command-line argument parsing for options like forcing multiple instances or controlling
  the welcome/splash behavior is implemented using `QCommandLineParser`.
boilerplate_coder_ai_prompt: "Your task is to port the wxWidgets application startup\
  \ logic and splash screen to Qt6 for Remere's Map Editor.\nThe primary reference\
  \ files from the wxWidgets version are `wxwidgets/application.cpp` and `wxwidgets/application.h`.\n\
  \n**Splash Screen:**\n1.  Implement a splash screen using `QSplashScreen`.\n2. \
  \ The original application used an XPM icon (`editor_icon.xpm`) and applied a random\
  \ hue shift to it before displaying it in a welcome dialog (which served as a splash\
  \ screen).\n3.  You will need to:\n    a.  Obtain or convert `editor_icon.xpm` to\
  \ a common format like PNG that Qt can easily load (e.g., `editor_icon.png`).\n\
  \    b.  If the random hue shift is a desired feature, implement a similar image\
  \ manipulation function for `QPixmap` before setting it on the `QSplashScreen`.\n\
  \    c.  Display the `QSplashScreen` early in the `main()` function of your Qt application.\n\
  \n**Application Initialization (typically in `main.cpp` and potentially a custom\
  \ `MyApplication` class inheriting `QApplication`):**\n1.  **Single Instance Check:**\n\
  \    *   Implement logic to ensure only one instance of the application runs, unless\
  \ a command-line flag like `-force-multi-instance` is used.\n    *   Use `QSharedMemory`\
  \ to detect if another instance is running.\n    *   If another instance is detected,\
  \ use `QLocalSocket` to send the command-line arguments (especially a map file to\
  \ open) to the running instance (which should have a `QLocalServer` listening) and\
  \ then the new instance should terminate.\n2.  **Settings:** Load application settings\
  \ using `QSettings` (equivalent to `g_settings`).\n3.  **Client Versions:** Load\
  \ client version data (this will likely depend on `CORE-02` task which handles parsing\
  \ `clients.xml`).\n4.  **Main Window Creation:** Create the main application window\
  \ (e.g., `MainWindow : QMainWindow`).\n5.  **Splash Screen Finalization:** Once\
  \ the `MainWindow` is initialized and ready to be shown, call `splash->finish(mainWindow);`.\n\
  6.  **Command-Line Argument Parsing:**\n    *   Use `QCommandLineParser` to handle\
  \ command-line arguments.\n    *   Support opening a map file specified on the command\
  \ line.\n    *   Support flags like `-force-multi-instance` (to disable single instance\
  \ check) and `-ws` (to control welcome screen/splash behavior, if this feature is\
  \ retained beyond a simple splash).\n7.  **Initial Map Loading:** After the main\
  \ window is set up, implement the logic found in `Application::OnEventLoopEnter`:\n\
  \    *   If a map file was passed via command line, load it.\n    *   If no map\
  \ file is specified and the welcome dialog (if any, or if configured by `-ws`) isn't\
  \ shown, create and display a new, empty map.\n8.  **URL Opening Feature:**\n  \
  \  *   Replicate the logic to open specific URLs (e.g., \"https://discord.gg/FD2cYKBq5E\"\
  , \"https://idler.live/\") using `QDesktopServices::openUrl()`.\n    *   This should\
  \ happen on the first ever launch or if 7 days have passed since the last time these\
  \ URLs were opened. Use `QSettings` to store a timestamp (`LAST_WEBSITES_OPEN_TIME`).\n\
  \n**Structure and Error Handling:**\n- Refer to `wxwidgets/application.cpp` (`Application::OnInit`,\
  \ `Application::OnEventLoopEnter`, `Application::ParseCommandLineMap`) for the sequence\
  \ and details of these operations.\n- Implement robust error handling for file operations\
  \ and IPC.\n- Ensure the Qt6 application structure is clean and follows Qt best\
  \ practices.\n- The `analyzed_input_files` section should be populated by reading\
  \ the first 200 lines of `wxwidgets/application.cpp` and `wxwidgets/application.h`\
  \ and calculating their MD5 hashes."
