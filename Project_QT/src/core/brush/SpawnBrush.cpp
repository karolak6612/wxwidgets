#include "core/brush/SpawnBrush.h"
#include "core/map/Map.h"
#include "core/Tile.h"
#include "core/spawns/SpawnData.h" // Changed from core/Spawn.h
#include "core/editor/EditorControllerInterface.h"
#include "core/settings/BrushSettings.h"

#include <QDebug>
#include <memory> // For std::unique_ptr (already present but good to ensure)

// Define a default spawn time if not specified elsewhere
const int DEFAULT_SPAWN_INTERVAL_SECONDS = 60;

namespace RME {
namespace core {

SpawnBrush::SpawnBrush() {
    // Constructor
}

QString SpawnBrush::getName() const {
    return QStringLiteral("Spawn Brush");
}

int SpawnBrush::getLookID(const RME::core::BrushSettings& /*settings*/) const {
    // Spawns don't typically have a specific item ID to show as a brush icon.
    return 0;
}

bool SpawnBrush::canApply(const RME::core::map::Map* map,
                            const RME::core::Position& pos,
                            const RME::core::BrushSettings& /*settings*/) const {
    if (!map || !map->isPositionValid(pos)) {
        return false;
    }
    const Tile* tile = map->getTile(pos);
    if (!tile || !tile->getGround()) { // Ensures tile exists and has ground
        return false;
    }
    return true;
}

void SpawnBrush::apply(RME::core::editor::EditorControllerInterface* controller,
                         const RME::core::Position& pos,
                         const RME::core::BrushSettings& settings) {
    if (!controller) {
        qWarning() << "SpawnBrush::apply: Null controller.";
        return;
    }
    Map* map = controller->getMap(); // Get Map from controller
    if (!canApply(map, pos, settings)) { // canApply checks map and tile validity
        // qWarning("SpawnBrush::apply: Preconditions not met at position %s.", qUtf8Printable(pos.toString()));
        return;
    }

    // Tile is guaranteed to exist by canApply
    Tile* tile = map->getTile(pos); // Use getTile for read-only access first
    // No need for tile null check here if canApply ensures it.
    // If canApply's check `!tile || !tile->getGround()` is sufficient, tile won't be null.

    if (settings.isEraseMode) {
        RME::core::SpawnData* existingSpawnRef = tile->getSpawnDataRef();
        if (existingSpawnRef != nullptr) {
            qDebug() << "SpawnBrush::apply (erase): Requesting removal of spawn at" << pos.toString();
            controller->recordRemoveSpawn(pos); // Controller handles Tile::setSpawnDataRef(nullptr) and map list removal
        } else {
            qDebug() << "SpawnBrush::apply (erase): No spawn centered on tile" << pos.toString() << "to erase.";
        }
    } else { // Drawing mode
        int radius = settings.getSize();
        if (radius <= 0) {
            radius = 1; // Ensure a minimum radius of 1 for spawns
        }

        RME::core::SpawnData* existingSpawnRef = tile->getSpawnDataRef();

        if (existingSpawnRef != nullptr) { // Spawn center already exists on this tile
            if (existingSpawnRef->getRadius() != static_cast<uint16_t>(radius)) { // Cast radius for comparison
                qDebug() << "SpawnBrush::apply (update): Updating spawn radius at" << pos.toString() 
                       << "from" << existingSpawnRef->getRadius() << "to" << radius;
                RME::core::SpawnData oldState = *existingSpawnRef; // Copy old state
                RME::core::SpawnData newState = oldState;
                newState.setRadius(static_cast<uint16_t>(radius)); // Cast radius for setting
                // This brush does not modify creature list or interval from BrushSettings.
                controller->recordUpdateSpawn(pos, oldState, newState);
            } else {
                qDebug() << "SpawnBrush::apply (draw): Spawn already exists at" << pos.toString() 
                       << "with same radius" << radius << ". No change.";
            }
        } else { // No spawn center on this tile yet, create a new one.
            qDebug() << "SpawnBrush::apply (draw): Requesting new spawn at" << pos.toString() 
                   << "with radius" << radius;
            // Use default interval and empty creature list as this brush doesn't configure them.
            RME::core::SpawnData newSpawnData(pos, static_cast<uint16_t>(radius), DEFAULT_SPAWN_INTERVAL_SECONDS, QStringList());
            newSpawnData.setIsAutoCreated(true); // This brush "auto-creates" the basic spawn area.
            controller->recordAddSpawn(newSpawnData);
        }
    }
    // Tile notifications (notifyTileChanged) should be handled by the commands
    // generated by recordAddSpawn, recordRemoveSpawn, recordUpdateSpawn.
}

} // namespace core
} // namespace RME
