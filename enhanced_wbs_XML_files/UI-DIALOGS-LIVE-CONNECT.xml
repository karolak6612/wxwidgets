<?xml version="1.0" ?>
<UI-DIALOGS-LIVE-CONNECT>
  <id>UI-DIALOGS-LIVE-CONNECT</id>
  <section>UI Elements</section>
  <title>Implement Live Collaboration Connection Dialog</title>
  <original_input_files>
    <original_input_file>wxwidgets/main_menubar.cpp (for context on how live connection was initiated)</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>Conceptual</file_path>
      <description>This task is for creating a new Qt dialog that allows users to input
connection details for the Live Collaboration feature. This includes fields
for server address, port, username, and an optional password.
The original wxWidgets version likely had a simple dialog for this,
possibly invoked from a menu item like &quot;Connect to Live Server...&quot;.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>UI-01</dependencie>
    <dependencie>CORE-06</dependencie>
    <dependencie>NET-03</dependencie>
  </dependencies>
  <current_functionality_summary>The application needs a dialog to gather connection parameters (server address,
port, username, password) from the user before attempting to connect to a
live collaboration server. This dialog should also remember previous inputs.
</current_functionality_summary>
  <qt6_migration_steps>1. Design `LiveConnectionDialog.ui` using Qt Designer or directly in code.
   It should include:
   - `QLabel` and `QLineEdit` for &quot;Server Address:&quot;.
   - `QLabel` and `QSpinBox` for &quot;Port:&quot; (e.g., range 1-65535).
   - `QLabel` and `QLineEdit` for &quot;Username:&quot;.
   - `QLabel` and `QLineEdit` for &quot;Password:&quot; (optional, echo mode Password).
   - `QDialogButtonBox` (OK, Cancel).
2. Implement `LiveConnectionDialog.h` and `LiveConnectionDialog.cpp` inheriting `QDialog`.
3. Constructor:
   - Takes `QWidget* parent` and `mapcore::AppSettings* settings`.
   - Loads last used/default values from `settings` into the input fields.
4. On OK button click (or `accept()` slot):
   - Retrieve values from input fields.
   - Perform basic validation (e.g., address not empty, username not empty).
   - Store valid values back into `AppSettings`.
   - Make the retrieved values accessible via public getter methods.
5. Ensure the dialog is modal.
</qt6_migration_steps>
  <definition_of_done>- A `LiveConnectionDialogQt` class (or similar) is implemented as a `QDialog`.
- The dialog contains input fields for server address, port, username, and password.
- The dialog loads default/last-used connection parameters from `AppSettings` when opened.
- Upon user confirmation (OK), the dialog validates input and saves the parameters to `AppSettings`.
- The entered parameters can be retrieved by the calling code.
- The dialog is modal and visually consistent with the application theme.
</definition_of_done>
  <boilerplate_coder_ai_prompt>Create a Qt6 dialog `LiveConnectionDialog` for inputting live collaboration server details.

**LiveConnectionDialog.h:**
```cpp
#pragma once
#include &lt;QDialog&gt;
// Forward declare AppSettings if its full definition isn't needed here
namespace mapcore { class AppSettings; }
class QLineEdit;
class QSpinBox;
class QDialogButtonBox;

class LiveConnectionDialog : public QDialog {
    Q_OBJECT
public:
    LiveConnectionDialog(QWidget* parent, mapcore::AppSettings* settings);

    QString getAddress() const;
    quint16 getPort() const;
    QString getUsername() const;
    QString getPassword() const;

private slots:
    void accept() override; // For validation

private:
    void loadSettings();
    void saveSettings();

    QLineEdit* m_addressEdit;
    QSpinBox* m_portSpinBox;
    QLineEdit* m_usernameEdit;
    QLineEdit* m_passwordEdit;
    QDialogButtonBox* m_buttonBox;

    mapcore::AppSettings* m_appSettings;
};
```

**LiveConnectionDialog.cpp:**
- Constructor: Setup UI (QFormLayout recommended), call `loadSettings()`.
- `loadSettings()`: Populate fields from `m_appSettings` (e.g., `m_addressEdit-&gt;setText(m_appSettings-&gt;getString(&quot;LiveServer/LastAddress&quot;, &quot;127.0.0.1&quot;));`).
- `saveSettings()`: Save field values to `m_appSettings`.
- `accept()`: Perform basic validation (e.g., address/username not empty). If valid, call `saveSettings()` then `QDialog::accept()`. If invalid, show `QMessageBox::warning`.
- Getter methods: Return values from the input fields.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>QDialog</documentation_reference>
    <documentation_reference>QLineEdit</documentation_reference>
    <documentation_reference>QSpinBox</documentation_reference>
    <documentation_reference>QDialogButtonBox</documentation_reference>
    <documentation_reference>QFormLayout</documentation_reference>
    <documentation_reference>AppSettings from CORE-06</documentation_reference>
  </documentation_references>
  <estimation_effort>Medium</estimation_effort>
</UI-DIALOGS-LIVE-CONNECT>
