id: LOGIC-01
section: Editor Behavior
title: Implement Core Drawing & Deletion Logic
original_input_files: editor.h/cpp, brush.h/cpp (and all specific `*_brush.cpp` files)
analyzed_input_files:
- wxwidgets/editor.h
- wxwidgets/editor.cpp
- wxwidgets/brush.h
- wxwidgets/brush.cpp
- wxwidgets/ground_brush.h/cpp
- wxwidgets/wall_brush.h/cpp
- wxwidgets/doodad_brush.h/cpp
- wxwidgets/creature_brush.h/cpp
- wxwidgets/house_brush.h/cpp
- wxwidgets/spawn_brush.h/cpp
- wxwidgets/raw_brush.h/cpp
- wxwidgets/carpet_brush.h/cpp
- wxwidgets/table_brush.h/cpp
- wxwidgets/waypoint_brush.h/cpp
dependencies:
- UI-EVENT-01
- CORE-05
current_functionality_summary: The `Editor::drawInternal` methods in `editor.cpp` serve as the main interface for applying brush strokes. These methods receive target positions and an active brush (obtained from `g_gui`). They then call the appropriate `draw()` or `undraw()` method on the brush instance. Crucially, these operations are wrapped in `Action` objects, with `Change` objects storing deep copies of tiles before and after modification, which are then pushed to the `ActionQueue` to enable undo/redo. The various `*_brush.cpp` files contain the specific logic for how each brush type modifies a tile.
qt6_migration_steps: |-
  1. Create an `EditorController` class (this will be part of the application layer, not `mapcore`).
  2. The `EditorController` will hold references or pointers to essential `mapcore` components: the current `Map`, the `ActionQueue`, and the `Selection` object. It will also interact with a `BrushManager` (from `UI-03` or `REFACTOR-01`) which is responsible for providing the currently active brush and its settings (size, shape, specific item/creature type for specialized brushes, etc.).
  3. Implement a central method in `EditorController`, for example, `void processBrushAction(const Position& targetPos, bool isUndoOperation, const BrushActiveSettings& brushSettings)`.
  4. Inside `processBrushAction`:
     a. Retrieve the active `Brush*` from the `BrushManager` based on `brushSettings`.
     b. Obtain the `Tile*` at `targetPos` from the `Map`. If no tile exists, create a temporary empty one for the operation.
     c. Create a new `Action*` using `actionQueue->createAction(...)`.
     d. Add a `Change` to the `Action` representing the tile's state *before* modification (e.g., `action->addChange(new Change(tile->deepCopy()));`).
     e. Based on `isUndoOperation`:
        i. If true, call `activeBrush->undraw(map, tileToModify);`.
        ii. If false, call `activeBrush->draw(map, tileToModify, &brushSettings);` (pass relevant parameters like specific item ID for RAWBrush, etc., contained in `brushSettings`).
        (`tileToModify` is the actual tile in the map that will be changed by the brush methods).
     f. Add another `Change` to the `Action` representing the tile's state *after* modification. The `Action::commit` mechanism (from `CORE-05`) will handle the actual swap of tile data in the map.
     g. Push the completed `Action` to the `ActionQueue` (e.g., `actionQueue->addAction(action);` which should also commit it).
  5. The `MapView::mousePressEvent` (from task `UI-EVENT-01`) will be responsible for:
     a. Translating mouse click coordinates to a map `Position`.
     b. Determining if it's a draw or undraw operation (e.g., based on left-click vs. Ctrl+left-click or a separate undraw tool mode).
     c. Fetching current brush settings from the `BrushManager`.
     d. Calling the `EditorController::processBrushAction(...)` method.
  6. Ensure that after an `Action` is committed by the `ActionQueue`, the `MapView` is appropriately notified to repaint the affected region(s). This might involve the `ActionQueue` or `EditorController` emitting a signal that `MapView` connects to.
definition_of_done: |-
  Core drawing and deletion logic is implemented via an `EditorController`, connecting UI events from `MapView` to `mapcore`'s brush and action systems.
  Key requirements:
  - An `EditorController` class exists and correctly mediates drawing/undrawing operations.
  - When in "DRAWING_MODE" and the map canvas is left-clicked:
    - The `EditorController` identifies the target tile and active brush (with its settings from `BrushManager`).
    - It invokes the active brush's `draw()` method on the target tile.
    - An `Action` containing the tile's before and after states is created using `mapcore`'s `Change` objects.
    - This `Action` is pushed to the `mapcore` `ActionQueue` and committed to the map.
  - If CTRL+Left-Click (or a similar undraw gesture) occurs:
    - The active brush's `undraw()` method is invoked.
    - An appropriate `Action` is created and processed.
  - The `MapView` updates immediately to reflect the changes after an action is committed by the `ActionQueue`.
  - All drawing/undrawing operations performed via this mechanism are undoable/redoable through the `ActionQueue`.
boilerplate_coder_ai_prompt: |-
  Implement the core drawing logic by creating an `EditorController` class that connects `MapView` UI events to the `mapcore` brush and action systems.
  1.  Define `EditorController.h` and `EditorController.cpp`. This class is part of the application, not `mapcore`.
  2.  `EditorController` should have access to:
      - The main `Map*` object (from `mapcore`).
      - The `ActionQueue*` (from `mapcore`).
      - A `BrushManager*` (assume this class exists, providing `Brush* getCurrentBrush()` and `BrushSettings getCurrentBrushSettings()`).
  3.  Implement a method like `void EditorController::handleMapClick(const Position& mapPos, bool isCtrlPressed)`:
      a.  `Brush* activeBrush = brushManager->getCurrentBrush();`
      b.  `if (!activeBrush) return;`
      c.  `Tile* tile = map->getOrCreateTile(mapPos);` // Ensures tile exists for modification
      d.  `Action* action = actionQueue->createAction(ACTION_DRAW);` // Or a more specific ID
      e.  `action->addChange(new Change(tile->deepCopy()));` // Save 'before' state for undo
      f.  `BrushSettings params = brushManager->getCurrentBrushSettings();` // Get current size, shape, specific item for RAW, etc.
      g.  If `isCtrlPressed` (undraw operation):
          `activeBrush->undraw(map, tile);`
      h.  Else (draw operation):
          `activeBrush->draw(map, tile, &params);` // Pass params to brush
      i.  `action->addChange(new Change(tile->deepCopy()));` // Save 'after' state
      j.  `actionQueue->addAction(action);` // This should also commit the action
  4.  The `MapView::mousePressEvent` (task `UI-EVENT-01`) should:
      - Check if in `DRAWING_MODE`.
      - Convert event coordinates to `mapPos`.
      - Determine `isCtrlPressed` from event modifiers.
      - Call `editorController->handleMapClick(mapPos, isCtrlPressed)`.
  5.  Ensure `MapView` redraws tiles affected by actions from `ActionQueue` (e.g., via signals/slots).
