<?xml version="1.0" ?>
<UTIL-01-JsonReplacement>
  <id>UTIL-01-JsonReplacement</id>
  <section>Utility Tasks</section>
  <title>Replace json_spirit with Qt JSON for ClientVersion Settings</title>
  <original_input_files>
    <original_input_file>wxwidgets/client_version.cpp</original_input_file>
    <original_input_file>wxwidgets/client_version.h</original_input_file>
    <original_input_file>wxwidgets/json.h</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit.h</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_reader.cpp</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_reader.h</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_reader_template.h</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_stream_reader.h</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_utils.h</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_value.cpp</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_value.h</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_writer.cpp</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_writer.h</original_input_file>
    <original_input_file>wxwidgets/json/json_spirit_writer_template.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/client_version.cpp</file_path>
      <description>Implements the `ClientVersion` class.
The method `ClientVersion::saveVersions(const std::string&amp; file_name)` is identified as using `json::write` (from the json_spirit library) to serialize client path configurations to a settings file. This is the primary point where json_spirit needs to be replaced.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/json.h and wxwidgets/json/*</file_path>
      <description>These files constitute the bundled json_spirit library, a third-party JSON parser and writer.
The goal is to remove dependency on these files by migrating any JSON operations to Qt's native JSON classes.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>CORE-02</dependencie>
  </dependencies>
  <current_functionality_summary>The `ClientVersion` class uses the bundled `json_spirit` library (specifically `json::write`) to save client-specific path configurations (e.g., where DAT/SPR files were last found) to a JSON file. This allows user-specific client paths to persist.
The rest of the application does not appear to use `json_spirit` extensively, so this is a targeted replacement.
</current_functionality_summary>
  <qt6_migration_steps>1.  **Identify Data to Serialize:**
    -   Examine `ClientVersion::saveVersions()` in `wxwidgets/client_version.cpp`.
    -   Determine the exact data structure being serialized to JSON. This likely involves a list or map of client version names/IDs to their configured data paths.

2.  **Refactor `ClientVersionManager` (from `CORE-02`):**
    -   Locate the equivalent method in the ported `ClientVersionManager` (or `ClientProfile` if path saving is per-profile) that is responsible for saving these path configurations.
    -   Modify this method to use Qt's JSON classes: `QJsonDocument`, `QJsonObject`, `QJsonArray`, `QJsonValue`.

3.  **Implement JSON Serialization with Qt:**
    -   To save:
        -   Create a `QJsonObject` for each client's path configuration.
        -   Add these objects to a `QJsonArray` or a parent `QJsonObject`.
        -   Create a `QJsonDocument` from the array/object.
        -   Use `QFile` to open the target file (e.g., `clients_paths.json`).
        -   Write the `QJsonDocument::toJson()` content (as `QByteArray`) to the file.

4.  **Implement JSON Deserialization with Qt (if applicable):**
    -   If there's corresponding logic to *load* these JSON-saved paths in `ClientVersion` (the `analyzed_input_files` only mentions `saveVersions`), this loading logic must also be ported using Qt JSON classes:
        -   Read the file content into a `QByteArray`.
        -   Parse it using `QJsonDocument::fromJson()`.
        -   Extract data from the resulting `QJsonObject` or `QJsonArray`.

5.  **Remove `json_spirit` Files:**
    -   Once `json_spirit` usage is fully replaced in `ClientVersionManager`, delete the `wxwidgets/json.h` and the entire `wxwidgets/json/` directory from the project.
    -   Update CMakeLists.txt to remove any references to these files if they were explicitly listed.

6.  **Unit Tests:**
    -   Test the new JSON serialization: save path configurations for a few mock `ClientProfile` objects and verify the JSON output is correct.
    -   Test the new JSON deserialization (if applicable): create a sample JSON file and verify it's parsed correctly into `ClientProfile` path data.
</qt6_migration_steps>
  <definition_of_done>- The `ClientVersionManager` (or relevant class from `CORE-02`) uses `QJsonDocument` and related Qt classes to save client path configurations to a JSON file.
- Any corresponding logic to load these JSON-saved paths is also ported to use Qt JSON classes.
- All usage of the `json_spirit` library (e.g., `json::write`, `json::read`) is removed from the codebase.
- The `wxwidgets/json.h` header and the `wxwidgets/json/` directory (containing `json_spirit` source) are successfully deleted from the project.
- CMake files are updated to reflect the removal of `json_spirit` files.
- Unit tests verify the correct serialization and deserialization of client path configurations using the new Qt JSON implementation.
- The ported code compiles and functions correctly without `json_spirit`.
</definition_of_done>
  <boilerplate_coder_ai_prompt>You are to replace the usage of the bundled `json_spirit` library with Qt's native JSON classes (`QJsonDocument`, `QJsonObject`, `QJsonArray`) within the `ClientVersionManager` (ported in `CORE-02`). This primarily affects the saving (and potentially loading) of client-specific data paths.

**Tasks:**

1.  **Analyze Original JSON Structure:**
    -   Review the `ClientVersion::saveVersions()` method in `wxwidgets/client_version.cpp` to understand the structure of the JSON data it creates with `json::write`. Note the keys and values used.

2.  **Modify `ClientVersionManager` (or `ClientProfile`):**
    -   Locate the method responsible for saving client path configurations (this was `ClientVersion::saveVersions`).
    -   Rewrite this method to use `QJsonDocument`, `QJsonObject`, and `QJsonArray` to build an equivalent JSON structure.
    -   **Example (Saving):**
        ```cpp
        // Assume 'clientProfiles' is a QList&lt;ClientProfile&gt; or similar
        // And 'filePath' is the target JSON file path

        QJsonArray clientsArray;
        for (const auto&amp; profile : clientProfiles) { // Or however you access the data
            if (!profile.customDataPath.isEmpty()) { // Example condition
                QJsonObject profileObject;
                profileObject[&quot;name&quot;] = profile.name; // Or some ID
                profileObject[&quot;dataPath&quot;] = profile.customDataPath;
                clientsArray.append(profileObject);
            }
        }
        QJsonDocument doc(clientsArray); // Or root object if preferred

        QFile jsonFile(filePath);
        if (jsonFile.open(QIODevice::WriteOnly)) {
            jsonFile.write(doc.toJson(QJsonDocument::Indented)); // Or Compact
            jsonFile.close();
        } else {
            // Handle error
        }
        ```

3.  **Implement Deserialization (If Needed):**
    -   If the original code loaded this JSON file, implement the corresponding loading logic using `QJsonDocument::fromJson()`, `QJsonObject`, and `QJsonArray` to parse the data and populate your `ClientProfile` objects.

4.  **Remove `json_spirit`:**
    -   Delete the `wxwidgets/json.h` file.
    -   Delete the entire `wxwidgets/json/` directory.
    -   Ensure your CMake files no longer reference any `json_spirit` source files.

5.  **Testing:**
    -   Write unit tests using Qt Test to:
        -   Verify that saving client path data produces a correctly structured JSON string/file.
        -   Verify that loading a sample JSON string/file correctly populates the `ClientProfile` data (if loading implemented).

**General Requirements:**
   - Ensure all functionality previously relying on `json_spirit` for this specific feature is now handled by Qt JSON.
   - Confirm no compilation errors after removing `json_spirit` files.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>QJsonDocument: https://doc.qt.io/qt-6/qjsondocument.html</documentation_reference>
    <documentation_reference>QJsonObject: https://doc.qt.io/qt-6/qjsonobject.html</documentation_reference>
    <documentation_reference>QJsonArray: https://doc.qt.io/qt-6/qjsonarray.html</documentation_reference>
    <documentation_reference>QJsonValue: https://doc.qt.io/qt-6/qjsonvalue.html</documentation_reference>
    <documentation_reference>QFile: https://doc.qt.io/qt-6/qfile.html</documentation_reference>
  </documentation_references>
  <estimation_effort>Small</estimation_effort>
</UTIL-01-JsonReplacement>
