id: CORE-15-MapRegionSystem
section: Core Migration Tasks
title: Port Map Region Logic
original_input_files:
  - wxwidgets/map_region.h
  - wxwidgets/map_region.cpp
  # Contextual files:
  # - wxwidgets/map.h (Map might use or manage regions) - CORE-03
  # - wxwidgets/basemap.h (BaseMap might interact with regions) - CORE-03
analyzed_input_files:
  - file_path: wxwidgets/map_region.h
    description: |
      Likely defines a `MapRegion` class or related structures.
      The purpose is not immediately obvious but could relate to:
      - Grouping areas of the map for specific properties or operations.
      - Optimizing rendering or updates for distinct map sections.
      - Defining logical areas like "desert region", "city region" with associated metadata.
      - Supporting region-based scripting or events.
      - Could be related to the QuadTree's floor/node management if regions are tied to specific QuadTree nodes.
  - file_path: wxwidgets/map_region.cpp
    description: |
      Implementation of the `MapRegion` class or logic.
      Analysis of this file is crucial to understand what a "MapRegion" is, how it's defined (e.g., by coordinates, by a set of tiles), what data it stores, and how it's used by the rest of the map system.
dependencies:
  - BUILD-01
  - CORE-01  # For Position, Tile
  - CORE-03  # For Map, BaseMap, possibly QuadTree node structure
current_functionality_summary: |
  - A `MapRegion` system (`map_region.h/cpp`) exists, but its specific role and functionality within the map editor are not clear from the file names alone.
  - It could be for logical grouping of map areas, rendering/update optimizations, or defining areas with special properties.
  - Understanding its interaction with the `Map`, `BaseMap`, and potentially the QuadTree is key.
qt6_migration_steps: |
  1.  **Analyze Original Source (`map_region.h/cpp`):**
      -   Thoroughly examine the provided `wxwidgets/map_region.h` and `wxwidgets/map_region.cpp` snippets.
      -   Identify:
          -   The main class(es) defined (e.g., `MapRegion`).
          -   Data members of `MapRegion` (e.g., bounding box, list of tiles, region ID/name, associated properties).
          -   Key methods and their purpose.
          -   How `MapRegion` objects are created, managed, and used by other parts of the system (especially `Map` or `BaseMap`).
          -   If regions are static (defined once) or dynamic (created/modified by user or editor logic).

  2.  **Define `MapRegionData` (or equivalent) (in `mapcore/world/MapRegionData.h/cpp` or `mapcore/map/`):**
      -   Based on the analysis, define a new class/struct `MapRegionData` to store the properties of a map region.
      -   This might include: `QString idOrName;`, `QRect boundingBox;` (using Qt's QRect for 2D, or a custom 3D BoundingBox if regions span floors), `QMap<QString, QVariant> properties;` or specific typed properties.
      -   If regions are tied to specific QuadTree nodes or floor structures from `CORE-03`, this relationship needs to be defined.

  3.  **Integrate with `Map` Class (if applicable):**
      -   If `MapRegionData` objects are managed as a collection by the `Map`:
          -   Add a member to `Map` class (from `CORE-03`), e.g., `QList<MapRegionData> mapRegions;` or `QMap<QString, MapRegionData> mapRegionsByName;`.
          -   Implement methods in `Map` to add, remove, and query `MapRegionData`.
      -   Alternatively, if regions are more intrinsic to the `BaseMap`'s QuadTree structure (e.g., each QuadTree node *is* a region), the porting would involve ensuring the QuadTree nodes in `CORE-03` can store any necessary region-specific data.

  4.  **Update Map I/O (`CORE-07-MapIO` - `OtbmMapIO`) (if applicable):**
      -   If map regions are persistent and stored in OTBM files:
          -   Modify `OtbmMapIO::loadMap` to parse OTBM region nodes and populate `Map::mapRegions` or attach data to QuadTree nodes.
          -   Modify `OtbmMapIO::saveMap` to serialize `MapRegionData` into OTBM.
      -   If regions are derived or non-persistent, I/O changes might not be needed.

  5.  **Unit Tests:**
      -   Test `MapRegionData` construction and property management.
      -   If `Map` manages a collection of regions, test add/remove/query operations.
      -   If region logic is complex (e.g., checking if a position is within a region), test this logic.
definition_of_done: |
  - The functionality and data associated with `MapRegion` in the original codebase are understood and documented.
  - A `MapRegionData` class/struct (or equivalent) is implemented in `mapcore` to store the properties of a map region.
  - The relationship between `MapRegionData` and the `Map`/`BaseMap` (especially its QuadTree structure) is defined and implemented.
  - If map regions are persistent, the OTBM map I/O system (`CORE-07-MapIO`) is updated to load and save region data.
  - Unit tests verify the functionality of `MapRegionData` and its integration with the map system.
  - The new structures compile successfully within the `mapcore` library.
boilerplate_coder_ai_prompt: |
  You are to port the "Map Region" system from a legacy C++ codebase (based on `map_region.h/cpp`) to a modern C++/Qt6 environment within the `mapcore` library. The first step is to analyze the provided original source snippets to understand what this system does.

  **1. Analyze `map_region.h/cpp` Snippets:**
     -   Carefully review the original `map_region.h` and `map_region.cpp` to determine:
         -   What data does a `MapRegion` store (e.g., coordinates, name, ID, list of tiles, properties)?
         -   How are regions defined or created?
         -   How do they interact with the `Map` or `BaseMap` (e.g., are they stored in a list in `Map`, or are they related to QuadTree nodes)?
         -   Are they loaded/saved from/to the map file?

  **2. Define `MapRegionData` Class/Struct (e.g., in `mapcore/world/MapRegionData.h/cpp`):**
     -   Based on your analysis, define a `MapRegionData` class or struct. Example structure (adapt as needed):
       ```cpp
       #include <QString>
       #include <QRect> // For 2D bounding box; define a 3D one if needed
       #include <QMap>
       #include <QVariant>

       // Or, if regions are tied to existing structures like QuadTree nodes,
       // you might augment those structures instead of creating a new class.

       class MapRegionData {
       public:
           QString idOrName;
           QRect boundingBox; // Example for 2D
           // Position minPos, maxPos; // Example for 3D
           QMap<QString, QVariant> properties; // For arbitrary data

           // Constructors, getters, setters
       };
       ```

  **3. Integrate with `Map` or `BaseMap` (from `CORE-03`):**
     -   If `MapRegionData` instances are stored as a collection in `Map`:
         -   Add `QList<MapRegionData> mapRegions;` or `QMap<QString, MapRegionData> mapRegionsByName;` to `Map.h`.
         -   Add methods to `Map` to manage these regions.
     -   If region data is part of the QuadTree nodes in `BaseMap`:
         -   Modify the QuadTree node structure in `BaseMap` to include the necessary fields from your analysis of `MapRegion`.

  **4. Update Map I/O (`CORE-07-MapIO`) (If regions are persistent):**
     -   If your analysis shows that region data is saved to/loaded from OTBM files:
        -   Update `OtbmMapIO` to handle serialization and deserialization of this region data, associating it with the `Map` or its QuadTree nodes.

  **General Requirements:**
     -   Use C++17/Qt6 types and practices.
     -   Provide header and source files for any new or modified classes.
     -   Write basic Qt Test unit tests for `MapRegionData` and its management (if applicable).
documentation_references:
  - "QRect: https://doc.qt.io/qt-6/qrect.html"
  - "QMap: https://doc.qt.io/qt-6/qmap.html"
  - "QVariant: https://doc.qt.io/qt-6/qvariant.html"
estimation_effort: Medium (Highly dependent on analysis of original source)
```
