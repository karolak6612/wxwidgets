id: UI-09
section: UI Elements
title: Port Live Server Control Panel
original_task_id: UI-09
description: Recreate the UI for managing a live editing server. This includes displaying
  connected clients, server logs/chat, server settings (port, password), and controls
  to start/stop the server.
dependencies:
- 'NET-02 # LiveServerQt logic that this UI will control and interact with.'
- 'UI-01  # Main window might host this as a dock widget or dialog.'
- 'APPSTATE-01 # For QSettings, if server settings are persisted.'
input_files:
- wxwidgets/live_server.cpp
- wxwidgets/live_server.h
- 'wxwidgets/main_menubar.cpp # Contains dialog logic for initiating server hosting.'
analyzed_input_files:
- file_path: wxwidgets/live_server.h
  description: "Declares the `LiveServer` class (derived from `LiveSocket`). Defines its interface for binding to a port, accepting client connections (`LivePeer`), closing the server, broadcasting map changes, cursor updates, and chat messages. It also holds a pointer to the `Editor` instance and the `LiveLogTab` (its UI component for displaying logs, chat, and client lists)."
- file_path: wxwidgets/live_server.cpp
  description: "Implements `LiveServer`. Uses Boost.Asio for network communication. `bind()`: Binds to a port, with logic to try subsequent ports if the initial one is busy. `acceptClient()`: Asynchronously accepts new client connections, creating a `LivePeer` for each. `removeClient()`: Handles client disconnections. `broadcastNodes()`, `broadcastCursor()`, `broadcastChat()`: Send relevant data to all connected peers. `createLogWindow()`: Creates and returns a `LiveLogTab` instance, which is the wxWidgets UI panel this WBS item's `LiveServerControlPanelQt` aims to replace/enhance by providing server controls alongside the information display."
- file_path: wxwidgets/main_menubar.cpp
  description: "(Partially relevant for UI-09) Contains event handlers like `OnStartLive` and `onServerHost`. These methods in `MainMenuBar` create `wxDialog` instances to gather server configuration details (server name (cosmetic), port, password) from the user *before* the `LiveServer` instance is created and started. These input fields will need to be part of the new `LiveServerControlPanelQt`."
documentation_references:
- 'QDialog: https://doc.qt.io/qt-6/qdialog.html'
- 'QDockWidget: https://doc.qt.io/qt-6/qdockwidget.html'
- 'QTcpServer (conceptual reference, actual server logic in NET-02): https://doc.qt.io/qt-6/qtcpserver.html'
- 'QTextEdit: https://doc.qt.io/qt-6/qtextedit.html (for logs/chat)'
- 'QListView / QStringListModel: https://doc.qt.io/qt-6/qlistview.html (for client list)'
- 'QSpinBox, QLineEdit, QPushButton: Standard input widgets for controls.'
current_functionality_summary: |
  In the wxWidgets version, live server hosting is typically initiated via dialogs launched from the `MainMenuBar` (e.g., `OnStartLive` handler). These dialogs collect server parameters like a cosmetic server name, port number, and password.

  The `LiveServer` class itself then handles the networking logic:
  - Binding to the specified port (with retry logic for subsequent ports if the initial one is occupied).
  - Accepting incoming client connections, each managed as a `LivePeer` instance.
  - Broadcasting map changes, cursor position updates, and chat messages to all connected clients.

  For UI feedback, the `LiveServer` instance creates a `LiveLogTab`. This `LiveLogTab` is a `wxPanel` (likely added to the main application's `wxAuiNotebook` or similar tabbed interface) responsible for:
  - Displaying server status messages and operational logs.
  - Showing chat messages exchanged during the session.
  - Listing currently connected clients.
  The `LiveLogTab` is primarily for information display; server control (start/stop) is not managed through it but via the initial dialogs and menu actions.
definition_of_done:
- A `LiveServerControlPanelQt` widget (e.g., a `QDialog` or preferably a `QDockWidget` for better integration) is implemented in Qt6.
- 'The panel includes UI elements for:'
- '  - Inputting server port (`QSpinBox`) and password (`QLineEdit` with `Password` echo mode).'
- '  - A `QPushButton` to ''Start Server'' and another to ''Stop Server''.'
- '  - A `QTextEdit` (read-only) to display server logs, chat messages, and client connection/disconnection events.'
- '  - A `QListView` (with `QStringListModel` or custom model if more client details are needed) to display names/IDs of currently connected clients.'
- '  - A `QLineEdit` and `QPushButton` for the server host to type and send chat messages.'
- 'The ''Start Server'' button action:'
- '  - Retrieves port and password from the UI controls.'
- '  - Instantiates (or accesses an existing instance of) the `LiveServerQt` (from `NET-02`).'
- '  - Calls a method on `LiveServerQt` (e.g., `startListening(port, password)`) to bind and start listening. This method should replicate the logic of trying subsequent ports if the initial one fails.'
- '  - Updates the UI to reflect the server''s running state (e.g., disable ''Start Server'' button, enable ''Stop Server'' button, clear and update port field if it auto-incremented, log success/failure message to the `QTextEdit`).'
- 'The ''Stop Server'' button action:'
- '  - Calls a method on `LiveServerQt` (e.g., `closeServer()`) to close all client connections and stop listening.'
- '  - Updates the UI to reflect the server stopped state (e.g., enable ''Start Server'', disable ''Stop Server'', log server stopped message).'
- The server log/chat `QTextEdit` is dynamically updated with messages received from `LiveServerQt` via signals (e.g., `logMessage(QString)`, `chatMessageReceived(QString_speaker, QString_message)`, `clientActivity(QString_clientName, bool_connected)`).
- The connected clients `QListView` is dynamically updated when clients connect or disconnect, based on signals from `LiveServerQt`.
- The host can type messages into the chat `QLineEdit` and click the "Send" `QPushButton` to have `LiveServerQt` broadcast them. The sent message also appears in the host's log/chat display.
- UI controls for port and password are disabled when the server is running and re-enabled when stopped.
- Initial default values for port and password may be loaded from `QSettings`.
estimation_effort: Medium (7-10 developer days)
known_missing_files: []
boilerplate_coder_ai_prompt: |
  Your task is to create the Qt6 UI for a Live Server Control Panel. This panel will allow the user to configure, start, and stop a live editing server (`LiveServerQt` from `NET-02`), as well as monitor connected clients and server activity/chat.

  **Reference Files:**
  - `wxwidgets/live_server.cpp` & `wxwidgets/live_server.h`: For understanding `LiveServer`'s existing functionalities (port binding, client management, logging via `LiveLogTab`, chat broadcasting).
  - `wxwidgets/main_menubar.cpp`: For the dialogs used to gather server settings (`OnStartLive`, `onServerHost`).

  **1. `LiveServerControlPanelQt` Widget (Design as a `QWidget` suitable for being placed in a `QDialog` or `QDockWidget` by `UI-01`):**

     **Layout (Example using `QVBoxLayout` and `QGroupBox`):**
     ```
     QVBoxLayout* mainLayout = new QVBoxLayout(this);

     // Server Configuration GroupBox
     QGroupBox* configGroup = new QGroupBox("Server Configuration");
     QFormLayout* configLayout = new QFormLayout(configGroup);
     m_portSpinBox = new QSpinBox(); // Range 1-65535, Default e.g. 31313
     m_passwordEdit = new QLineEdit(); // EchoMode: Password
     configLayout->addRow("Port:", m_portSpinBox);
     configLayout->addRow("Password:", m_passwordEdit);
     mainLayout->addWidget(configGroup);

     // Controls
     QHBoxLayout* controlsLayout = new QHBoxLayout();
     m_startServerButton = new QPushButton("Start Server");
     m_stopServerButton = new QPushButton("Stop Server");
     m_stopServerButton->setEnabled(false);
     controlsLayout->addWidget(m_startServerButton);
     controlsLayout->addWidget(m_stopServerButton);
     mainLayout->addLayout(controlsLayout);

     // Client List GroupBox
     QGroupBox* clientsGroup = new QGroupBox("Connected Clients");
     QVBoxLayout* clientsLayout = new QVBoxLayout(clientsGroup);
     m_clientListView = new QListView();
     m_clientListModel = new QStringListModel(this); // Or a custom model
     m_clientListView->setModel(m_clientListModel);
     clientsLayout->addWidget(m_clientListView);
     mainLayout->addWidget(clientsGroup);

     // Log & Chat GroupBox
     QGroupBox* logChatGroup = new QGroupBox("Log & Chat");
     QVBoxLayout* logChatLayout = new QVBoxLayout(logChatGroup);
     m_logTextEdit = new QTextEdit();
     m_logTextEdit->setReadOnly(true);
     logChatLayout->addWidget(m_logTextEdit, 1); // Make log area stretch
     QHBoxLayout* chatInputLayout = new QHBoxLayout();
     m_chatInputEdit = new QLineEdit();
     m_sendChatButton = new QPushButton("Send");
     chatInputLayout->addWidget(m_chatInputEdit, 1);
     chatInputLayout->addWidget(m_sendChatButton);
     logChatLayout->addLayout(chatInputLayout);
     mainLayout->addWidget(logChatGroup, 1); // Make log/chat group stretch
     ```

     **Private Members in Header:**
     ```cpp
     // Qt UI Elements
     QSpinBox* m_portSpinBox;
     QLineEdit* m_passwordEdit;
     QPushButton* m_startServerButton;
     QPushButton* m_stopServerButton;
     QListView* m_clientListView;
     QStringListModel* m_clientListModel; // Or custom model
     QTextEdit* m_logTextEdit;
     QLineEdit* m_chatInputEdit;
     QPushButton* m_sendChatButton;

     LiveServerQt* m_liveServer; // Pointer to the actual server logic instance (from NET-02)
     QSettings* m_settings; // For persisting port/password
     ```

     **Functionality:**
     - **Constructor:**
       - Initialize UI elements.
       - `m_settings = new QSettings(...)`
       - Load last used port/password from `m_settings` into `m_portSpinBox` and `m_passwordEdit`.
       - `m_liveServer = /* Get instance of LiveServerQt from NET-02, e.g., via a singleton or service locator */ ;`
       - Connect `m_startServerButton->clicked` to `onStartServer()`.
       - Connect `m_stopServerButton->clicked` to `onStopServer()`.
       - Connect `m_sendChatButton->clicked` to `onSendChat()`.
       - Connect `m_chatInputEdit->returnPressed` to `onSendChat()`.
       - Connect signals from `m_liveServer` to corresponding slots in this panel:
         - `connect(m_liveServer, &LiveServerQt::logMessage, this, &LiveServerControlPanelQt::appendLogMessage);`
         - `connect(m_liveServer, &LiveServerQt::clientConnected, this, &LiveServerControlPanelQt::addClientToList);`
         - `connect(m_liveServer, &LiveServerQt::clientDisconnected, this, &LiveServerControlPanelQt::removeClientFromList);`
         - `connect(m_liveServer, &LiveServerQt::chatMessageReceived, this, &LiveServerControlPanelQt::displayChatMessage);`
         - `connect(m_liveServer, &LiveServerQt::serverStatusChanged, this, &LiveServerControlPanelQt::updateServerUIState);`

     - **`onStartServer()` slot:**
       1. Retrieve `port = m_portSpinBox->value()` and `password = m_passwordEdit->text()`.
       2. Save `port` and `password` to `m_settings`.
       3. Call `bool success = m_liveServer->startListening(port, password);`.
       4. `updateServerUIState(success, m_liveServer->getCurrentPort());` // `LiveServerQt` should provide method to get actual port if it auto-incremented.

     - **`onStopServer()` slot:**
       1. Call `m_liveServer->closeServer();`.
       2. `updateServerUIState(false, 0);`

     - **`updateServerUIState(bool isRunning, quint16 actualPort)` slot:**
       - `m_startServerButton->setDisabled(isRunning);`
       - `m_portSpinBox->setDisabled(isRunning);`
       - `m_passwordEdit->setDisabled(isRunning);`
       - `m_stopServerButton->setEnabled(isRunning);`
       - If `isRunning`, `appendLogMessage(QString("Server started on port %1.").arg(actualPort));`
       - Else, `appendLogMessage("Server stopped.");`

     - **`appendLogMessage(const QString& message)` slot:**
       - `m_logTextEdit->append(message);`

     - **`addClientToList(const QString& clientName, int /*clientId*/)` slot:**
       - `m_clientListModel->insertRow(m_clientListModel->rowCount());`
       - `m_clientListModel->setData(m_clientListModel->index(m_clientListModel->rowCount() - 1), clientName);`
       - `appendLogMessage(QString("Client connected: %1").arg(clientName));`

     - **`removeClientFromList(const QString& clientName, int /*clientId*/)` slot:**
       - Find and remove `clientName` from `m_clientListModel`.
       - `appendLogMessage(QString("Client disconnected: %1").arg(clientName));`

     - **`displayChatMessage(const QString& speaker, const QString& message)` slot:**
       - `appendLogMessage(QString("[%1]: %2").arg(speaker, message));`

     - **`onSendChat()` slot:**
       1. `QString message = m_chatInputEdit->text().trimmed();`
       2. If `!message.isEmpty()`:
          - `m_liveServer->broadcastChatMessageAsHost(message);` // Method to be implemented in `LiveServerQt`
          - `appendLogMessage(QString("[HOST]: %1").arg(message));`
          - `m_chatInputEdit->clear();`

  This control panel provides the UI for managing the live server instance created by `NET-02`.
