<?xml version="1.0" ?>
<CORE-08-CreatureOutfit>
  <id>CORE-08-CreatureOutfit</id>
  <section>Core Migration Tasks</section>
  <title>Port Creature Instance and Outfit Classes</title>
  <original_input_files>
    <original_input_file>wxwidgets/creature.h</original_input_file>
    <original_input_file>wxwidgets/creature.cpp</original_input_file>
    <original_input_file>wxwidgets/outfit.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/creature.h</file_path>
      <description>Defines the `Creature` class, representing an instance of a creature or NPC on the map.
- Stores a pointer to its `CreatureType` (from `g_creatures`, providing static data like name, default outfit).
- Holds its `Position` on the map.
- Manages its current `Outfit` (which can differ from `CreatureType`'s default outfit, e.g., if addons are applied).
- Stores `CreatureFlags` (e.g., `CREATURE_FLAG_UNPASSABLE`, `CREATURE_FLAG_ISSUMMON`).
- May store health, speed, and other dynamic attributes if the editor supports simulating them.
- Declares methods for accessing/modifying position, outfit, flags, and getting its `CreatureType`.
- `deepCopy()` method for creating a new `Creature` instance.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/creature.cpp</file_path>
      <description>Implementation of the `Creature` class.
- Constructor likely takes `CreatureType*` and `Position`.
- `deepCopy()` creates a new `Creature` with copied properties.
- Outfit management methods allow changing look type, head, body, legs, feet, addons, and mount, effectively modifying its current `Outfit` object.
- Methods to get properties often delegate to its `CreatureType` if not overridden in the instance.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/outfit.h</file_path>
      <description>Defines the `Outfit` struct or class.
- Stores `lookType` (item ID or creature type ID for appearance), `lookItem` (item ID for look type if it's an item), `lookMount` (mount creature type ID).
- Stores `lookHead`, `lookBody`, `lookLegs`, `lookFeet` (colors or item IDs for specific body parts).
- Stores `lookAddons` (bitmask or byte for addons).
- May include methods for serialization or comparison.
- `CreatureType` (in `creatures.h`) and `Creature` (in `creature.h`) both use/contain an `Outfit` object.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-02</dependencie>
  </dependencies>
  <current_functionality_summary>- The `Outfit` class/struct (`outfit.h`) defines a creature's appearance (look type, colors for body parts, addons, mount).
- The `Creature` class (`creature.h/cpp`) represents an actual creature instance on a map tile. It holds its `Position`, current `Outfit` (which can be customized from its type's default), flags, and a pointer to its `CreatureType` (static data like name, default outfit, from `g_creatures`).
- `CreatureType` (defined in `creatures.h`, part of `CORE-02`'s `CreatureData`) provides the base definition and default outfit for a kind of creature.
</current_functionality_summary>
  <qt6_migration_steps>1.  **Define `Outfit` Class/Struct (in `mapcore/creatures/Outfit.h`):**
    -   Create `Outfit.h`.
    -   Port the fields from `wxwidgets/outfit.h`: `lookType`, `lookItem`, `lookMount`, `lookHead`, `lookBody`, `lookLegs`, `lookFeet`, `lookAddons`. Use appropriate integer types.
    -   Add constructors (default, copy, initializing from all fields).
    -   Implement comparison operators (`operator==`, `operator!=`).
    -   Consider if any helper methods (e.g., `hasAddon(int addon)`) are needed.
    -   This class will be used by both `CreatureData` (from `CORE-02`) and the new `Creature` class.

2.  **Define `Creature` Class (in `mapcore/creatures/Creature.h/cpp`):**
    -   Create `Creature.h` and `Creature.cpp`.
    -   Store a pointer or reference to its static data: `const CreatureData* type;` (from `AssetManager` via `CORE-02`).
    -   Store its `Position` (from `CORE-01`).
    -   Store its current `Outfit outfit;` (the instance's specific outfit).
    -   Store `CreatureFlags` (consider an `enum class` for type safety).
    -   Implement constructor: `Creature(const CreatureData* type, const Position&amp; pos);`. Initialize `outfit` from `type-&gt;defaultOutfit`.
    -   Implement `std::unique_ptr&lt;Creature&gt; deepCopy() const;`.
    -   Implement accessors/mutators for `Position`, `Outfit` (and its parts like `setLookType`, `setAddons`), and flags.
    -   Implement methods to get data from its `type` (e.g., `getName()`, `isNpc()`).

3.  **Integration with `Tile` and `AssetManager`:**
    -   Modify `Tile` class (from `CORE-01`) to store `std::unique_ptr&lt;Creature&gt; creature;`.
    -   Ensure `AssetManager` (from `CORE-02`) correctly loads `CreatureData` including the default `Outfit`.
    -   Map loading (`CORE-07-MapIO`) will create `Creature` instances:
        -   It reads creature name/type from OTBM.
        -   Looks up `CreatureData*` from `AssetManager`.
        -   Creates `new Creature(creatureData, position)`.
        -   Reads instance-specific outfit details from OTBM and applies them to the `Creature`'s `outfit` member.
        -   Adds the `Creature` to the `Tile`.

4.  **Unit Tests:**
    -   Test `Outfit` construction, comparison, and any helper methods.
    -   Test `Creature` construction:
        -   Default outfit is correctly set from `CreatureData`.
        -   Instance-specific outfit modifications.
    -   Test `Creature::deepCopy()`.
    -   Test flag management.
</qt6_migration_steps>
  <definition_of_done>- An `Outfit` class/struct is implemented in `mapcore/creatures/Outfit.h` with all necessary fields (lookType, colors, addons, mount) and comparison operators.
- A `Creature` class is implemented in `mapcore/creatures/Creature.h/cpp`.
- `Creature` stores its `Position`, its specific `Outfit`, flags, and a reference/pointer to its `CreatureData` (static type information).
- `Creature` class provides methods for construction, deep copying, and accessing/modifying its properties (position, outfit, flags).
- The `Tile` class (from `CORE-01`) is updated to hold `std::unique_ptr&lt;Creature&gt;`.
- `CreatureData` (from `CORE-02`) correctly includes and provides a default `Outfit`.
- Memory for `Creature` objects is managed correctly (e.g., by `Tile` using `std::unique_ptr`).
- Unit tests for `Outfit` and `Creature` classes verify their functionality, including construction, copying, and outfit/flag manipulation.
- The new classes compile successfully within the `mapcore` library.
</definition_of_done>
  <boilerplate_coder_ai_prompt>You are to port the `Creature` instance class and its associated `Outfit` class from a legacy C++ codebase (based on `creature.h/cpp` and `outfit.h`) to a modern C++/Qt6 environment within the `mapcore` library. This task relies on `CORE-01` (Position) and `CORE-02` (CreatureData from AssetManager).

**1. `Outfit` Class/Struct (`mapcore/creatures/Outfit.h`):**
   -   Define a class or struct `Outfit`.
   -   Store members: `uint16_t lookType;`, `uint16_t lookItem;` (if lookType is an item), `uint16_t lookMount;`, `uint8_t lookHead;`, `uint8_t lookBody;`, `uint8_t lookLegs;`, `uint8_t lookFeet;`, `uint8_t lookAddons;`.
   -   Provide constructors (default, copy, full initializer).
   -   Implement `operator==` and `operator!=`.

**2. `Creature` Class (`mapcore/creatures/Creature.h/cpp`):**
   -   Define class `Creature`.
   -   Store `const CreatureData* type;` (pointer to static data from `AssetManager`).
   -   Store `Position position;`.
   -   Store `Outfit outfit;` (instance-specific, initialized from `type-&gt;defaultOutfit`).
   -   Define an `enum class CreatureFlags { ... };` and store `CreatureFlags flags;`.
   -   Constructor: `Creature(const CreatureData* type, const Position&amp; pos);`.
   -   Implement `std::unique_ptr&lt;Creature&gt; deepCopy() const;`.
   -   Provide getters and setters for `position`, `outfit` (and its individual parts like `setLookType`, `setAddons`), and `flags`.
   -   Provide getters that delegate to `type` (e.g., `QString getName() const { return type-&gt;name; }`).

**3. Update `Tile` Class (Modify code from `CORE-01`):**
   -   Ensure `Tile` class (in `mapcore/map/Tile.h`) has a member `std::unique_ptr&lt;Creature&gt; creature;`.

**General Requirements:**
   -   Replace wxWidgets types with C++/Qt equivalents.
   -   Use smart pointers for ownership where appropriate (e.g., `Tile` owns `Creature`).
   -   Provide header and source files.
   -   Write basic Qt Test unit tests for `Outfit` and `Creature` classes.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>std::unique_ptr: https://en.cppreference.com/w/cpp/memory/unique_ptr</documentation_reference>
  </documentation_references>
  <estimation_effort>Medium</estimation_effort>
</CORE-08-CreatureOutfit>
