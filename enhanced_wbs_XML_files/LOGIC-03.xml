<?xml version="1.0" ?>
<LOGIC-03>
  <id>LOGIC-03</id>
  <section>Editor Behavior &amp; Logic</section>
  <title>Implement Cut, Copy, Paste, Delete, and Drag-Move Logic</title>
  <original_input_files>
    <original_input_file>wxwidgets/copybuffer.h</original_input_file>
    <original_input_file>wxwidgets/copybuffer.cpp</original_input_file>
    <original_input_file>wxwidgets/editor.h</original_input_file>
    <original_input_file>wxwidgets/editor.cpp</original_input_file>
    <original_input_file>wxwidgets/selection.h</original_input_file>
    <original_input_file>wxwidgets/selection.cpp</original_input_file>
    <original_input_file>wxwidgets/main_menubar.h</original_input_file>
    <original_input_file>wxwidgets/main_menubar.cpp</original_input_file>
    <original_input_file>wxwidgets/map_display.cpp</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/copybuffer.h</file_path>
      <description>Declares the `CopyBuffer` class. Manages an internal `BaseMap* tiles` for storing deep copies of `Tile` objects (including only their *selected* contents) during copy/cut. `copyPos` stores the top-left reference `Position` of copied data. Interface includes `copy()`, `cut()`, `paste()`, `canPaste()`, `clear()`.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/copybuffer.cpp</file_path>
      <description>Implements `CopyBuffer`.
- `copy()`: Iterates `Editor::selection`. For each selected `Tile`, creates a `copied_tile` in its internal `tiles` `BaseMap`, copying only selected ground (if any), items, creature, and spawn. Updates `copyPos`.
- `cut()`: Calls `copy()`. Then creates a `BatchAction` with an `Action` to delete the originals. This `Action` contains `Change` objects for tiles *after* selected elements are removed (via `popSelectedItems()`, etc.). Handles `Config::USE_AUTOMAGIC` for border updates by adding another `Action` to the batch if needed. This makes `cut` an undoable operation.
- `paste()`: Creates a `BatchAction`. An `Action` within it holds `Change` objects. For each `buffer_tile` in its internal `tiles` `BaseMap`, calculates target `Position`, deep copies `buffer_tile` to `copy_tile`. If `Config::MERGE_PASTE` is true or `copy_tile` has no ground, it merges `copy_tile` with the existing tile at destination (or a new empty tile if none exists). Otherwise, `copy_tile` replaces the destination. The resulting tile (`new_dest_tile`) forms a `Change` for an `Action`. Handles `Config::BORDERIZE_PASTE` by adding a subsequent border update `Action` if needed. This makes `paste` an undoable operation.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/editor.h</file_path>
      <description>Declares `Editor`. Relevant methods: `moveSelection(Position offset)`, `destroySelection()`. Holds `ActionQueue*`, `Selection&amp;`, `CopyBuffer&amp;`.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/editor.cpp</file_path>
      <description>Implements `Editor`.
- `destroySelection()`: Creates a `BatchAction`. An `Action` within it contains `Change` objects for tiles after their selected elements are removed (via `popSelectedItems()`). If `Config::BORDERIZE_DELETE` and `Config::USE_AUTOMAGIC` are on, a subsequent `Action` is added to the batch to handle border updates around the cleared area.
- `moveSelection(Position offset)`: Creates a `BatchAction` performing a complex sequence, making the entire move undoable as a single step:
  1. An `Action` to remove selected elements from their original positions. This involves creating `Change` objects that represent the state of the source tiles *after* the selected items are &quot;picked up&quot; (removed via `popSelectedItems`). A temporary `TileSet tmp_storage` (containing `Tile` objects allocated by `map.allocator`) holds the actual items being moved.
  2. If `Config::BORDERIZE_DRAG` is enabled (and selection size is below threshold), an `Action` is added to update borders around the original (now modified) locations.
  3. An `Action` to add/merge the elements from `tmp_storage` to the new (offset) positions. This creates `Change` objects for the destination tiles.
  4. If `Config::BORDERIZE_DRAG` is enabled, a final `Action` updates borders around the new locations of the moved items.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/selection.h</file_path>
      <description>(Also analyzed for CORE-05, LOGIC-02) Declares `Selection`. Provides `TileSet tiles` (the current selection), which is the source for copy/cut/move/delete operations.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/selection.cpp</file_path>
      <description>(Also analyzed for CORE-05, LOGIC-02) Implements `Selection`. Its state (the `TileSet`) is read by `CopyBuffer` and `Editor` methods to determine what to act upon.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/main_menubar.h</file_path>
      <description>(Also analyzed for DOCS-02) Declares `MainMenuBar` and `MenuBar::ActionID` enum (e.g., `CUT`, `COPY`, `PASTE`, `DELETE`), which are used to connect menu UI events to handlers.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/main_menubar.cpp</file_path>
      <description>(Also analyzed for DOCS-02) Implements `MainMenuBar`. Event handlers like `OnCut`, `OnCopy`, `OnPaste`, `OnDelete` typically invoke methods on the global `g_gui` object. `g_gui` then delegates to the current `Editor` instance or its `MapCanvas` (e.g., `g_gui.DoCopy()` might call `editor-&gt;copybuffer.copy()`; `g_gui.DoPaste()` calls `map_canvas-&gt;StartPasting()` to initiate paste preview mode).
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/map_display.cpp</file_path>
      <description>(Also analyzed for LOGIC-02, FINAL-01) Implements `MapCanvas`.
- Drag-Move of selection: `OnMouseActionClick` sets a `dragging` flag if the click is on an existing selection (and not a shift-click for bounding box). `OnMouseActionRelease`, if `dragging` was true and an `offset` is detected, calls `editor.moveSelection(offset)`. Visual preview during the drag is handled by `MapDrawer` based on `MapCanvas` state variables indicating the drag.
- Paste operation: The `OnPaste` menu event handler (often in `MapCanvas` for context menu, or delegated from `MainMenuBar` via `g_gui`) calls `StartPasting()`. This method sets a &quot;pasting mode&quot; flag. A subsequent `OnMouseActionClick` (left-click usually) on the map, if in this mode, finalizes the paste by calling `editor.copybuffer.paste(...)` with the clicked map coordinates, and then calls `EndPasting()`. Visual preview of items being pasted is handled by `MapDrawer`.
- Delete operation: The `OnDelete` menu event handler (context menu) calls `editor.destroySelection()`.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-03</dependencie>
    <dependencie>CORE-04</dependencie>
    <dependencie>CORE-05</dependencie>
    <dependencie>LOGIC-01</dependencie>
    <dependencie>LOGIC-02</dependencie>
    <dependencie>RENDER-01</dependencie>
    <dependencie>UI-01</dependencie>
  </dependencies>
  <current_functionality_summary>- `CopyBuffer` (`copybuffer.h/cpp`): Manages an internal `BaseMap` to store deep copies of selected tiles/items for copy/cut operations. `copy()` populates this buffer from `Editor::selection`. `cut()` first calls `copy()`, then creates an `Action` to delete the originals. `paste()` creates an `Action` to place deep copies from the buffer onto the map at a target position, handling merging and auto-bordering.
- `Editor` (`editor.h/cpp`):
  - `destroySelection()`: Creates an undoable `BatchAction` to remove selected elements and updates borders.
  - `moveSelection()`: Creates an undoable `BatchAction` that effectively copies the selection, deletes originals, and pastes at the new offset, managing border updates.
- `Selection` (`selection.h/cpp`): Provides the set of selected tiles/items that are the source for copy/cut/move/delete.
- `MainMenuBar` (`main_menubar.h/cpp`): UI event handlers for menu items (Cut, Copy, Paste, Delete) trigger these operations, usually via `g_gui` delegating to `Editor`.
- `MapCanvas` (`map_display.h/cpp`): Initiates drag-move operations based on mouse gestures on a selection. Handles the visual preview aspect of pasting.
</current_functionality_summary>
  <qt6_migration_steps>1.  **Ensure `ClipboardManager` and `SelectionManager` are established (from `CORE-05`):**
    -   `ClipboardManager` should have an internal representation for copied data (e.g., a list of `TileData` with relative positions) and methods `storeData(const QList&lt;TileData&gt;&amp; data, const Position&amp; refPos)` and `retrieveData() -&gt; QList&lt;TileData&gt;`.
    -   `SelectionManager` should provide `getSelectedElementsForClipboard() -&gt; QList&lt;TileData&gt;` and methods to clear/modify the actual selection on the map.

2.  **Implement Logic in `EditorController` (from `LOGIC-01`):**
    -   **`void handleCopy()`:**
        -   `QList&lt;TileData&gt; selectedData = selectionManager-&gt;getSelectedElementsForClipboard(map);`
        -   `Position refPos = selectionManager-&gt;getSelectionBounds().topLeft();` (or similar reference)
        -   `clipboardManager-&gt;storeData(selectedData, refPos);`
        -   Update UI (e.g., enable Paste action).
    -   **`void handleDelete(const QString&amp; commandText = &quot;Delete Selection&quot;)`:** (Helper for Cut and Delete)
        -   `Create `DeleteCommand(map, selectionManager, commandText)` (a `QUndoCommand`).
        -   `DeleteCommand::redo()`: Stores data for selected elements (for undo), then removes them from `map` and `selectionManager`.
        -   `DeleteCommand::undo()`: Restores elements to `map` and `selectionManager`.
        -   Push to `undoStack`.
    -   **`void handleCut()`:**
        -   Call `handleCopy()`.
        -   Call `handleDelete(&quot;Cut&quot;)`.
    -   **`void handleStartPaste()`:**
        -   If `clipboardManager-&gt;hasData()`:
            -   Signal `MapView` to enter &quot;pasting mode&quot; and pass necessary preview data (e.g., `clipboardManager-&gt;retrieveData()` and `clipboardManager-&gt;getReferencePosition()`).
    -   **`void handleFinalizePaste(const Position&amp; targetDropPos)`:**
        -   `QList&lt;TileData&gt; clipboardData = clipboardManager-&gt;retrieveData();`
        -   `Position originalRefPos = clipboardManager-&gt;getReferencePosition();`
        -   Create `PasteCommand(map, undoStack, targetDropPos, originalRefPos, clipboardData)`.
        -   `PasteCommand::redo()`: Calculates actual positions for each `TileData` based on `targetDropPos` and `originalRefPos`. Adds/merges tiles/items into the `map`. Stores data for undo (e.g., list of added tiles or previous state of modified tiles). Handles auto-bordering if applicable.
        -   `PasteCommand::undo()`: Removes/reverts pasted tiles/items.
        -   Push to `undoStack`.
        -   Signal `MapView` to exit &quot;pasting mode&quot;.
    -   **`void handleMoveSelection(const Position&amp; dragStartPos, const Position&amp; dragEndPos)`:** (Triggered by `MapView` after drag)
        -   `Position offset = dragEndPos - dragStartPos;`
        -   If offset is zero, do nothing.
        -   Create `MoveCommand(map, selectionManager, undoStack, offset)`.
        -   `MoveCommand::redo()`:
            -   Internally, get `QList&lt;TileData&gt; selectedData = selectionManager-&gt;getSelectedElementsForClipboard(map);`
            -   Store data for undo (original positions of selected elements, and the elements themselves).
            -   Remove selected elements from their original positions on the `map`.
            -   Calculate new positions by applying `offset`.
            -   Add/merge the `selectedData` (now considered &quot;movedData&quot;) to these new positions on the `map`.
            -   Update `selectionManager` to reflect the new positions of selected items.
        -   `MoveCommand::undo()`: Reverse the move.
        -   Push to `undoStack`.

3.  **Update `MainWindow` (from `UI-01`, `UI-02`, `FINAL-03`):**
    -   Connect Edit menu `QAction`s (Cut, Copy, Paste, Delete) `triggered()` signals to the respective `EditorController` handler methods.
    -   Update enabled state of these actions based on `selectionManager-&gt;hasSelection()` and `clipboardManager-&gt;hasData()`.

4.  **Update `MapView` (from `RENDER-01` which provides MapView, and `LOGIC-02` for selection context):**
    -   **Visual Paste Preview:**
        -   Add state `bool m_isPastingMode; QList&lt;TileData&gt; m_pastePreviewData; Position m_pastePreviewRefPos;`.
        -   Method `startPastePreview(const QList&lt;TileData&gt;&amp; data, const Position&amp; refPos)` called by `EditorController`.
        -   `mouseMoveEvent`: If `m_isPastingMode`, update `m_currentMouseMapPos` and call `update()` for repaint.
        -   `paintEvent/paintGL`: If `m_isPastingMode`, render a ghosted preview of `m_pastePreviewData` at `m_currentMouseMapPos` (offset by `m_pastePreviewRefPos`).
        -   `mousePressEvent`: If `m_isPastingMode`, call `editorController-&gt;handleFinalizePaste(clickedMapPos)`. Set `m_isPastingMode = false;`.
    -   **Selection Drag-and-Move Visuals:**
        -   Add state `bool m_isDraggingSelection; Position m_dragAnchorMapPos; Position m_currentDragMapPos;`.
        -   `mousePressEvent`: If clicking on an existing selection (and not Shift-dragging for bounding box): `m_isDraggingSelection = true; m_dragAnchorMapPos = clickedMapPos;`.
        -   `mouseMoveEvent`: If `m_isDraggingSelection`, update `m_currentDragMapPos` and call `update()`.
        -   `paintEvent/paintGL`: If `m_isDraggingSelection`, get current selection. Draw a ghosted preview of selected elements translated by `m_currentDragMapPos - m_dragAnchorMapPos`.
        -   `mouseReleaseEvent`: If `m_isDraggingSelection`, set `m_isDraggingSelection = false`. Calculate `Position offset = m_currentDragMapPos - m_dragAnchorMapPos`. If offset is non-zero, call `editorController-&gt;handleMoveSelection(m_dragAnchorMapPos, m_currentDragMapPos)` (or just the offset).</qt6_migration_steps>
  <definition_of_done>- Cut, Copy, Paste, and Delete operations are fully functional via Edit menu actions and/or keyboard shortcuts.
-   &quot;Copy&quot; populates an internal clipboard (`ClipboardManager`) with the selected map elements.
-   &quot;Cut&quot; copies to clipboard and then creates an undoable command to delete the selection from the map.
-   &quot;Paste&quot; initiates a visual preview mode in `MapView`; a subsequent click finalizes the paste as an undoable command, correctly handling offsets and merging/replacing tiles as per settings.
-   &quot;Delete&quot; (e.g., from context menu or Del key) removes the current selection via an undoable command.
- Drag-and-move of an existing selection is implemented:
  -   `MapView` provides visual feedback (ghosted preview) of the selection being dragged.
  -   Releasing the mouse finalizes the move, implemented as an undoable command (likely a conceptual copy, delete original, paste to new location).
- All these operations are correctly integrated with the `QUndoStack` from `CORE-04`.
- UI actions (menu items, toolbar buttons) are enabled/disabled appropriately based on selection state and clipboard content.
</definition_of_done>
  <boilerplate_coder_ai_prompt>Implement Cut, Copy, Paste, Delete, and drag-and-move logic for map elements. This involves `EditorController` methods that use `SelectionManager`, `ClipboardManager`, and `QUndoStack` (all from `mapcore`, assumed to be available via `AppContext`). `MapView` will handle UI interaction and visual previews.

**1. `EditorController` Methods:**
   -   `void handleCopy()`:
       -   `QList&lt;TileData&gt; data = appContext.selectionManager().getSelectedElementsForClipboard(appContext.map());`
       -   `Position refPos = appContext.selectionManager().getSelectionBounds().topLeft();`
       -   `appContext.clipboardManager().storeData(data, refPos);`
   -   `void handleDeleteSelection(const QString&amp; commandText)`:
       -   `DeleteCommand* cmd = new DeleteCommand(appContext.map(), appContext.selectionManager(), commandText);`
       -   `appContext.undoStack().push(cmd);`
   -   `void handleCut()`: Calls `handleCopy()`, then `handleDeleteSelection(&quot;Cut Selection&quot;)`.
   -   `void handleStartPaste()`: If `clipboardManager.hasData()`, signals `MapView` to enter paste preview mode, providing data.
   -   `void handleFinalizePaste(const Position&amp; targetDropPos)`:
       -   `PasteCommand* cmd = new PasteCommand(appContext.map(), appContext.selectionManager(), appContext.clipboardManager(), targetDropPos);`
       -   `appContext.undoStack().push(cmd);`
       -   Signals `MapView` to exit paste preview mode.
   -   `void handleMoveSelection(const Position&amp; dragStartPos, const Position&amp; currentPos)`:
       -   `Position offset = currentPos - dragStartPos; if (offset == Position(0,0,0)) return;`
       -   `MoveCommand* cmd = new MoveCommand(appContext.map(), appContext.selectionManager(), offset);`
       -   `appContext.undoStack().push(cmd);`

**2. `QUndoCommand` Subclasses (in `mapcore` or `editor` logic):**
   -   `DeleteCommand(Map* map, SelectionManager* selMgr, ...)`:
       -   `redo()`: Stores copies of selected elements, then removes them from `map` and `selMgr`.
       -   `undo()`: Restores elements to `map` and `selMgr`.
   -   `PasteCommand(Map* map, SelectionManager* selMgr, ClipboardManager* clipMgr, Position target, ...)`:
       -   `redo()`: Retrieves data from `clipMgr`. Adds/merges to `map` at `target`. Stores info for undo. Updates `selMgr` to select pasted items.
       -   `undo()`: Removes pasted items. Restores previous selection.
   -   `MoveCommand(Map* map, SelectionManager* selMgr, Position offset, ...)`:
       -   `redo()`: Stores original state/positions of selected items. Deletes them from old positions. Adds them at new (offset) positions. Updates `selMgr`.
       -   `undo()`: Moves items back to original positions. Restores original selection.

**3. `MapView` Updates (UI layer):**
   -   Implement `m_isPastingMode`, `m_pastePreviewData`, `m_pastePreviewRefPos` for paste preview.
   -   Implement `m_isDraggingSelection`, `m_dragAnchorMapPos`, `m_currentDragMapPos` for drag-move.
   -   `mousePressEvent`, `mouseMoveEvent`, `mouseReleaseEvent` to manage these states and call `EditorController` methods.
   -   `paintEvent` to draw ghost previews based on these states.

**4. `MainWindow` Connections:**
   -   Connect Edit menu `QAction`s (`Cut`, `Copy`, `Paste`, `Delete`) to `EditorController` handlers.
   -   Dynamically update enabled state of these actions.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>QUndoStack &amp; QUndoCommand: https://doc.qt.io/qt-6/qundostack.html</documentation_reference>
    <documentation_reference>QClipboard &amp; QMimeData: https://doc.qt.io/qt-6/qclipboard.html</documentation_reference>
    <documentation_reference>Drag and Drop (for visual previews in MapView): https://doc.qt.io/qt-6/dnd.html</documentation_reference>
    <documentation_reference>QPainter (for drawing previews): https://doc.qt.io/qt-6/qpainter.html</documentation_reference>
  </documentation_references>
  <estimation_effort>X-Large</estimation_effort>
</LOGIC-03>
