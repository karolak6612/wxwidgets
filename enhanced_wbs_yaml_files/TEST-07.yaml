wbs_item_id: TEST-07
name: Integration Test Map Rendering
description: Create integration tests to verify that the map rendering system correctly displays the map data. This involves loading a map, rendering it to an offscreen buffer or image, and comparing the output against a reference image or expected visual features.
dependencies:
- RENDER-01
- RENDER-02
- RENDER-03
- CORE-03
- TEST-01
input_files: []
analyzed_input_files: []
documentation_references:
- 'Qt Test Framework: https://doc.qt.io/qt-6/qttest-index.html'
- 'Qt Offscreen Rendering: https://doc.qt.io/qt-6/qoffscreensurface.html'
- 'QOpenGLFramebufferObject: https://doc.qt.io/qt-6/qopenglframebufferobject.html'
- 'QImage Class: https://doc.qt.io/qt-6/qimage.html (for pixel manipulation and comparison)'
current_functionality_summary: This task is for creating new integration tests for the Qt6 map rendering pipeline. The rendering system (developed in RENDER-01, RENDER-02, RENDER-03) is responsible for visually displaying the map data. These tests will load test maps, render them (typically offscreen), and then validate the visual output to ensure correctness.
definition_of_done:
- Integration tests using the Qt Test framework are created for the map rendering system.
- A suite of small, focused OTBM test map files is created, each designed to test specific rendering scenarios (e.g., ground borders, item stacking, creature appearance, outfitted items, 'always on top' items, spawn radii, waypoint markers).
- Tests are capable of rendering a loaded map to an offscreen `QImage` using the application's rendering pipeline (OpenGL viewport, shaders, sprite manager).
- 'Validation of the rendered `QImage` is performed using one or both of the following methods:'
- '  - Comparison against pre-approved ''golden'' reference images for each test map, with an acceptable tolerance for minor pixel differences.'
- '  - Programmatic verification of key visual features within the rendered image (e.g., checking pixel colors at specific coordinates corresponding to known map elements, verifying presence of sprites in expected locations).'
- 'Test coverage includes:'
- '  - Correct rendering of different ground tile types and their automatic borders based on `borders.xml` logic.'
- '  - Accurate visual representation and stacking order of multiple items on a single tile.'
- '  - Rendering of creatures with correct sprites and outfit colors (if applicable).'
- '  - Rendering of items that use creature-like outfit properties (`looktype_head/body/legs/feet`).'
- '  - Items with the ''always on top'' property visually occluding other items on the same tile.'
- '  - Visual indicators for spawn radii and waypoints.'
- '  - Correct rendering of different floors (if applicable to the test scenario).'
- All created integration tests pass successfully.
- Tests are integrated into the CMake build system for automated execution.
boilerplate_coder_ai_prompt: |-
  Your task is to create integration tests for the map rendering pipeline of the Qt6 Remere's Map Editor. This involves loading test maps, rendering them offscreen, and validating the visual output. Use the Qt Test framework. The rendering components are developed in `RENDER-01`, `RENDER-02`, and `RENDER-03`.

  **Core Test Strategy:**
  1.  **Test Map Design:** Create a collection of small OTBM map files, each tailored to test specific rendering features. Examples:
      - `map_empty.otbm`
      - `map_ground_types_and_borders.otbm` (showcasing various ground transitions)
      - `map_item_stacking.otbm` (multiple items on one tile)
      - `map_creature_basic.otbm`
      - `map_outfitted_item.otbm`
      - `map_always_on_top.otbm`
      - `map_spawn_radius.otbm`
      - `map_waypoint_marker.otbm`
  2.  **Offscreen Rendering:**
      - In your Qt Test classes, set up an OpenGL context suitable for offscreen rendering (e.g., using `QOffscreenSurface`).
      - Render the loaded test map into a `QOpenGLFramebufferObject`, then retrieve the result as a `QImage`.
      - Ensure the rendering viewport and camera are set to consistent, predictable values for each test.
  3.  **Output Validation (Choose one or a hybrid):**
      - **Reference Image Comparison:**
          - Maintain a set of "golden" PNG images corresponding to the expected output of each test map.
          - After rendering a test map to a `QImage`, compare it to its golden image. Allow for a small pixel difference tolerance.
          - `bool QImage::operator==(const QImage &image) const` can be used, or pixel-wise iteration with `QColor pixelColor = image.pixelColor(x, y);`.
      - **Feature-Based Validation:**
          - For more dynamic tests or to avoid brittle image comparisons, programmatically check for expected visual characteristics.
          - Example: For a tile with a specific red item, check if pixels in the item's expected screen area are predominantly red.
          - Example: For a ground border, check pixel colors along the expected border line.

  **Specific Rendering Aspects to Test:**

  *   **Ground Tiles & Borders:** Load a map with various adjacent ground types. Verify the border items are rendered correctly according to `borders.xml` logic.
  *   **Item Rendering:**
      - Stacking order: Items on a tile are rendered in the correct visual order.
      - Item attributes: Test items with different `looktype`, `looktype_head/body/legs/feet` (outfitted items).
      - Animated items: If applicable, capture a few frames to see if animation is occurring (might require more advanced test setup).
      - "Always On Top" items: Verify they render above other items on the same tile.
  *   **Creature Rendering:**
      - Correct sprite based on creature type/name.
      - Correct outfit colors if the creature data and sprite system support this.
  *   **Map Decorations/Markers:**
      - Visual indicators for spawn areas (e.g., a radius circle).
      - Visual markers for waypoints.
  *   **Multiple Floors:** If your test setup can handle it, test rendering views that show multiple floors, or test rendering each floor individually.
  *   **Error Conditions (Basic):** While detailed error handling is for the renderer itself, ensure tests don't crash if, for example, a sprite is missing (renderer should perhaps draw a placeholder).

  **Test Implementation Details:**
  - Use `QDir::currentPath()` or resource paths (`:/testmaps/map_xyz.otbm`) to locate test OTBM files.
  - Helper functions for loading maps, setting up the renderer for a specific view, capturing the `QImage`, and comparing images/features will be crucial.
  - Integrate tests into the CMake build system.

  Focus on verifying that the visual output of the rendering system accurately reflects the underlying map data according to the game's visual rules.
