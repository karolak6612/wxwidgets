<?xml version="1.0" ?>
<BRUSH-LOGIC-Waypoint>
  <id>BRUSH-LOGIC-Waypoint</id>
  <section>Editor Behavior &amp; Logic</section>
  <title>Port Waypoint Brush/Tool Logic</title>
  <original_input_files>
    <original_input_file>wxwidgets/waypoint_brush.cpp</original_input_file>
    <original_input_file>wxwidgets/waypoint_brush.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/waypoint_brush.h</file_path>
      <description>Defines 'WaypointBrush' (inherits 'Brush'). Stores 'std::string waypoint_name'. 'draw'/'undraw' assert false. Main function is 'canDraw' and holding target waypoint name.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/waypoint_brush.cpp</file_path>
      <description>Implements 'WaypointBrush'. 'setWaypoint' stores name. 'canDraw' checks if tile exists. Actual placement/move is a targeted UI action.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>CORE-BRUSH-FRAMEWORK</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-11-WaypointSystem</dependencie>
    <dependencie>LOGIC-01</dependencie>
    <dependencie>CORE-04</dependencie>
  </dependencies>
  <current_functionality_summary>The 'WaypointBrush' is used to place or move waypoints. It holds a waypoint name. A click on the map moves the selected waypoint or creates a new one if the name is new.
</current_functionality_summary>
  <qt6_migration_steps>1. Determine if this remains a &quot;Brush&quot; or becomes a &quot;Tool&quot; mode in Qt6. Assume &quot;Tool&quot; for now.
2. `EditorController` will have a mode for &quot;PlaceWaypoint&quot;, taking a waypoint name (or new name).
3. On map click at `targetPos`:
   - If waypoint with name exists, create `MoveWaypointCommand(waypoint, targetPos, oldPos)`.
   - If new name, create `AddWaypointCommand(name, targetPos)`.
   - Commands interact with `WaypointManager` to update waypoint's position or add new one. This includes updating tile waypoint counts.
   - Push command to `QUndoStack`.
</qt6_migration_steps>
  <definition_of_done>- Logic for placing/moving waypoints is implemented via `EditorController` and `QUndoCommands`.
- `WaypointManager` handles waypoint data and tile associations.
- Operations are undoable.
- Unit tests for waypoint placement/move commands pass.
</definition_of_done>
  <boilerplate_coder_ai_prompt>Implement logic for placing/moving Waypoints, likely as a tool mode in `EditorController`.
1. `WaypointManager` (from `CORE-11-WaypointSystem`) needs methods like `addWaypoint(name, pos)`, `moveWaypoint(name, newPos)`, `removeWaypoint(name)`. These should handle `Tile` waypoint counts.
2. `EditorController` method `void placeOrMoveWaypoint(const QString&amp; name, const Position&amp; targetPos)`:
   - Check if waypoint 'name' exists via `WaypointManager`.
   - If exists, create `MoveWaypointCommand`.
   - If not, create `AddWaypointCommand`.
   - Commands call appropriate `WaypointManager` methods in `redo()`/`undo()`.
   - Push to `QUndoStack`.
The UI (`WaypointPalette` / `UI-07`) activates this tool mode.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>CORE-11-WaypointSystem</documentation_reference>
    <documentation_reference>mapcore::Tile</documentation_reference>
    <documentation_reference>LOGIC-01 EditorController</documentation_reference>
  </documentation_references>
  <estimation_effort>Medium</estimation_effort>
</BRUSH-LOGIC-Waypoint>
