id: CORE-03
section: Core Migration Tasks
title: Port Map Data Structure & Non-Rendering Logic
original_input_files:
  - wxwidgets/basemap.h
  - wxwidgets/map.h
  - wxwidgets/map.cpp
  - wxwidgets/tile.h # For context of what Map contains
  - wxwidgets/item.h # For context of what Tiles contain
analyzed_input_files:
  - file_path: wxwidgets/basemap.h
    description: |
      Defines `BaseMap`, the foundational class for map data storage, and its associated helper classes `MapIterator` and `TileLocation`.
      `BaseMap` uses a QuadTree structure (`QTreeNode root` - likely defined in map_allocator.h/cpp or similar, not provided here but essential) to spatially organize and manage `Floor` objects, which in turn store `Tile` objects.
      It provides low-level methods for creating, accessing, and setting tiles using `TileLocation` objects (e.g., `getTileL`, `createTileL`, `setTile`).
      Includes `MapAllocator` for efficient memory management of `Tile` objects.
      The `MapIterator` allows iteration over all tiles in the map.
      This class is crucial for the underlying storage and spatial indexing of map tiles.
  - file_path: wxwidgets/map.h
    description: |
      Defines the `Map` class, which derives from `BaseMap`.
      It extends `BaseMap` by adding higher-level map attributes and management features:
      - Map metadata: `width`, `height`, `description`, `mapVersion` (OTBM format and client version).
      - Filenames for associated data: `housefile`, `spawnfile`, `waypointfile`.
      - Collections of game elements: `Towns`, `Houses`, `Spawns`, `Waypoints`.
      Provides methods for map-wide operations such as format conversion (`convert`), minimap export (`exportMinimap`), cleaning invalid tiles, and managing the map's changed state.
      Defines helper templates like `foreach_ItemOnMap` and `foreach_TileOnMap` for iterating map content.
      Includes `PropertyFlags` struct for fine-grained control in operations like item cleanup.
  - file_path: wxwidgets/map.cpp
    description: |
      Implementation of the `Map` class.
      Handles initialization of map properties, loading/saving maps (delegating to IOMap classes, e.g., `IOMapOTBM`),
      map version conversion logic, and management of towns, houses, and spawns.
      Implements methods for map operations like `cleanInvalidTiles`, `convertHouseTiles`, `exportMinimap`,
      and managing the map's dimensions and associated filenames.
      The actual QuadTree manipulation logic is largely within `BaseMap` and `QTreeNode` (not provided).
  - file_path: wxwidgets/tile.h
    description: |
      (Analyzed in CORE-01, context for CORE-03) Defines the `Tile` class, the fundamental unit stored and managed by `BaseMap` and `Map`.
      The `Map` uses a QuadTree of `Floor` objects, which store arrays of `Tile` pointers (or `TileLocation` objects).
      All map operations that involve modifying or querying tile content (items, creatures, flags) rely on the `Tile` class structure.
  - file_path: wxwidgets/item.h
    description: |
      (Analyzed in CORE-01, context for CORE-03) Defines the `Item` class. `Tile` objects within the `Map` contain `Item` instances.
      Map-level operations, such as adding/removing items from tiles or searching for specific items, interact with `Item` objects.
      The `Map` class's functionality is dependent on how `Item` objects are defined and managed within `Tile`s.
dependencies:
  - BUILD-01 # For CMake project structure
  - CORE-01  # For Position, Item, Tile class definitions
  - CORE-02  # For ItemDatabase (g_items) and other asset managers, potentially used in map validation/operations
current_functionality_summary: |
  The map is represented by the `Map` class, which inherits from `BaseMap`.
  - `BaseMap` uses a QuadTree (`QTreeNode`) to store tiles. Each leaf node in the QuadTree likely points to a `Floor` object (or similar structure) which then holds a 2D array of `Tile` pointers or `TileLocation` objects for a specific Z-level within that quad. This allows for sparse storage of map data.
  - `MapAllocator` is used for efficient allocation/deallocation of `Tile` objects.
  - `MapIterator` provides a way to iterate over all valid tiles in the map.
  - The `Map` class adds metadata like width, height, description, client/OTBM version, and filenames for houses, spawns. It also manages collections of `Town`, `House`, `Spawn`, and `Waypoint` objects.
  - Operations include getting/setting tiles, creating tiles, iterating tiles, managing spawns, houses, towns, waypoints, converting map formats, cleaning invalid tiles, and exporting minimaps.
  - The system is tightly coupled with `Tile` and `Item` structures.
qt6_migration_steps: |
  1.  **Design `BaseMap` and `Map` Classes (in `mapcore/map/`):**
      -   Define `BaseMap.h` and `Map.h` (and corresponding .cpp files).
      -   The `BaseMap` class will encapsulate the core tile storage mechanism. Port the QuadTree logic (`QTreeNode` and `Floor` equivalent). If `QTreeNode` is complex, it might need its own file(s).
          -   Consider using `std::vector` or `QVector` for floor tile arrays.
          -   Tiles should be stored as `std::unique_ptr<Tile>` or managed by a custom allocator similar to `MapAllocator` if performance is critical. For initial port, `std::unique_ptr<Tile>` within `Floor` objects is safer.
      -   The `Map` class will inherit from `BaseMap` and manage metadata (width, height, description, version) and collections (Towns, Houses, Spawns, Waypoints - these can be placeholder classes/structs initially if their full porting is a separate task).

  2.  **Port `TileLocation` (if distinct from `Position`):**
      -   If `TileLocation` (referenced in `Tile.h`) provides more than just `Position` (e.g., direct access to containing `Floor` or QuadTree node, house exit lists), define this class. Otherwise, `Position` might suffice for identifying tiles. House exit lists and spawn counts might be better managed by dedicated manager classes or directly by the `Map` querying tiles.

  3.  **Port `MapAllocator`:**
      -   If the custom `MapAllocator` provides significant benefits over standard allocators with smart pointers, port its logic. Otherwise, rely on `std::make_unique` for `Tile` creation.

  4.  **Implement Tile Accessors in `BaseMap`:**
      -   Port `getTile(Position)`, `createTile(Position)`, `setTile(Position, std::unique_ptr<Tile> newTile)`.
      -   Ensure these correctly interact with the QuadTree and Floor structures.

  5.  **Implement `MapIterator`:**
      -   Adapt `MapIterator` to work with the new QuadTree and Floor structures. This is crucial for iterating all tiles.

  6.  **Implement `Map` Class Functionality:**
      -   Port constructors and destructor.
      -   Port metadata accessors/mutators (width, height, description, version, filenames).
      -   Port management of `Towns`, `Houses`, `Spawns`, `Waypoints`. For now, these can be simple collections of IDs or basic data structs. Their full functionality can be ported in dedicated tasks.
      -   Port `doChange()`, `clearChanges()`, `hasChanged()`.
      -   Stub out complex operations like `convert()`, `exportMinimap()`, `cleanInvalidTiles()` if they depend heavily on not-yet-ported systems (like specific I/O or brush logic). Focus on in-memory data integrity first.

  7.  **Integrate with `CORE-01` Types:**
      -   Ensure the `Map` and `Tile` classes use the `Position` and `Item` classes ported in `CORE-01`.

  8.  **Replace wxWidgets Types:** Remove any remaining `wxString`, `wxArrayString`, etc., with `std::string`/`QString`, `std::vector`/`QVector`.

  9.  **Unit Tests:**
      -   Test `BaseMap` tile creation, retrieval, and deletion, including edge cases and QuadTree behavior.
      -   Test `MapIterator` to ensure it correctly iterates over all placed tiles.
      -   Test `Map` metadata management.
      -   Test basic `Town`, `House`, `Spawn`, `Waypoint` list management (add/remove/get).
      -   Test adding items to tiles via `Map::getOrCreateTile(pos)->addItem(...)`.

definition_of_done: |
  - `BaseMap` and `Map` classes are implemented in `mapcore` with their core functionalities ported.
  - The QuadTree tile storage mechanism (including `QTreeNode` and `Floor` equivalents) is functional, allowing efficient sparse storage and retrieval of `Tile` objects.
  - `TileLocation` (if necessary) and `MapIterator` are correctly implemented and functional.
  - `MapAllocator` logic is ported or replaced by standard smart pointer memory management.
  - The `Map` class can store and manage its metadata (dimensions, description, version, associated filenames).
  - Basic management of `Towns`, `Houses`, `Spawns`, and `Waypoints` (collections of objects or IDs) is implemented within the `Map` class.
  - Core map operations are functional:
    - Getting/setting/creating tiles at specific positions.
    - Adding/removing items and creatures from tiles via map access (using `CORE-01` types).
  - The map structure correctly uses `Position`, `Tile`, and `Item` classes from `CORE-01`.
  - wxWidgets dependencies are removed from these classes.
  - Unit tests for `BaseMap` (tile access, iteration) and `Map` (metadata, basic collection management) pass.
  - The `mapcore` library components related to map structure compile successfully.
boilerplate_coder_ai_prompt: |
  You are to port the map data structure (`BaseMap`, `Map`, and associated helpers like `MapIterator`, `TileLocation`, `QTreeNode`, `Floor`) from an old C++ codebase (snippets from `basemap.h`, `map.h`, `map.cpp` will be provided) to a modern C++/Qt6 environment within a `mapcore` library. This task depends on `CORE-01` (for `Position`, `Tile`, `Item` classes) and `CORE-02` (for asset definitions).

  **1. `BaseMap` Class (`mapcore/map/BaseMap.h/cpp`):**
     -   Implement the QuadTree structure (`QTreeNode` and `Floor` equivalents). A `QTreeNode` can recursively contain four child `QTreeNode`s or a `Floor` object. A `Floor` object stores a 2D grid (e.g., `std::vector<std::vector<std::unique_ptr<Tile>>>`) of tiles for a specific Z-level within its QuadTree leaf.
     -   Implement `Tile* getTile(const Position& pos)`, `Tile* createTile(const Position& pos)`, `void setTile(const Position& pos, std::unique_ptr<Tile> newTile)`. These should navigate or modify the QuadTree.
     -   Port `MapAllocator` for `Tile` objects or use `std::make_unique<Tile>(...)`.
     -   Implement `MapIterator` to iterate over all valid `Tile` objects in the `BaseMap`.

  **2. `Map` Class (`mapcore/map/Map.h/cpp`):**
     -   Derive `Map` from `BaseMap`.
     -   Store map metadata: `width`, `height` (integers), `description` (`std::string`), `mapVersion` (struct with OTBM version and client version ID), `housefile`, `spawnfile`, `waypointfile` (`std::string`).
     -   Manage collections for `Towns`, `Houses`, `Spawns`, `Waypoints`. These can be `std::vector<TownData>`, `std::map<uint32_t, HouseData>`, etc. (Define simple `TownData`, `HouseData`, `SpawnData`, `WaypointData` structs for now, full porting of these managers is separate).
     -   Implement methods for accessing and modifying this metadata.
     -   Implement `bool doChange()`, `void clearChanges()`, `bool hasChanged()`.
     -   Create stubs for complex methods like `convert()`, `exportMinimap()`, `cleanInvalidTiles()`.

  **3. General Requirements:**
     -   Use `Position`, `Tile`, `Item` classes from `CORE-01`.
     -   Use standard C++17 features and Qt containers (`QVector`, `QMap`, `QString`) where appropriate and beneficial.
     -   Ensure proper memory management, especially for `Tile` objects in the QuadTree (prefer `std::unique_ptr`).
     -   Remove all wxWidgets dependencies.
     -   Provide header and source files.
     -   Write basic Qt Test unit tests for `BaseMap` (tile access, iteration) and `Map` (metadata management, basic list management for towns/houses).
documentation_references:
  - "QuadTree data structure: https://en.wikipedia.org/wiki/Quadtree"
  - "Qt Core Data Types: https://doc.qt.io/qt-6/qtcore-module.html"
  - "QVector: https://doc.qt.io/qt-6/qvector.html"
  - "QMap: https://doc.qt.io/qt-6/qmap.html"
  - "std::unique_ptr: https://en.cppreference.com/w/cpp/memory/unique_ptr"
  - "std::vector: https://en.cppreference.com/w/cpp/container/vector"
  - "C++ Standard Library: https://en.cppreference.com/w/cpp/header"
