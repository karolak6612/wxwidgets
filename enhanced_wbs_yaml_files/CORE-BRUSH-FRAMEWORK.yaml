id: CORE-BRUSH-FRAMEWORK
section: Core Migration Tasks
title: Port Base Brush Class, Implement BrushManager, and Define BrushSettings
original_input_files:
  - wxwidgets/brush.h
  - wxwidgets/brush_enums.h
  - wxwidgets/gui.h
  - wxwidgets/gui.cpp
analyzed_input_files:
  - file_path: wxwidgets/brush.h
    description: Defines the abstract base `Brush` class with pure virtual methods like
      `draw()`, `undraw()`, `canDraw()`, `getName()`, `getLookID()`, etc. Also
      includes common brush properties or helper methods if any.
  - file_path: wxwidgets/brush_enums.h
    description: Defines enumerations used by the brush system, such as `BrushShape`
      (e.g., `BRUSHSHAPE_SQUARE`, `BRUSHSHAPE_CIRCLE`), `BrushFlags`, and potentially
      others related to brush behavior or type.
  - file_path: wxwidgets/gui.h
    description: Declares the global `g_gui` object. Relevant parts for brush framework
      include members storing the current brush pointer (`current_brush`), brush
      size (`brush_size`), brush shape (`brush_shape`), variation (`brush_variation`),
      and potentially other global brush-related settings.
  - file_path: wxwidgets/gui.cpp
    description: Implements methods for `g_gui` that allow getting/setting the current
      brush, brush size, shape, variation, etc. This shows how global brush state
      is managed and accessed.
dependencies:
  - BUILD-01
  - CORE-01
current_functionality_summary: The legacy system uses an abstract `Brush` base class.
  Specific brushes inherit from it. Global brush properties like current active
  brush, size, shape, and variation are managed via the global `g_gui` object.
  Brush-related enums define shapes and flags.
qt6_migration_steps: |-
  1. Define `mapcore::Brush` abstract base class (`mapcore/brush/Brush.h`):
     - Include pure virtual methods: `virtual void apply(EditorControllerInterface* controller, const Position& pos, const BrushSettings& settings) = 0;` (combining draw/undraw with context).
     - Include virtual methods: `virtual QString getName() const = 0;`, `virtual int getLookID(const BrushSettings& settings) const;` (for palette display), `virtual bool canApply(const Map* map, const Position& pos, const BrushSettings& settings) const;`.
  2. Define `mapcore::BrushSettings` struct/class (`mapcore/brush/BrushSettings.h`):
     - Members: `BrushShape shape`, `int size`, `int variation`, `bool isEraseMode`, `QString activeBrushName` (or ID), potentially other common flags or parameters. Use enums for shape, etc.
  3. Define `mapcore::BrushManagerService` class (`mapcore/brush/BrushManagerService.h/cpp`):
     - Manages a collection of all available `Brush*` instances (e.g., `QHash<QString, std::unique_ptr<Brush>> m_brushes`).
     - Stores current `BrushSettings m_currentSettings`.
     - Methods: `void registerBrush(std::unique_ptr<Brush> brush)`, `Brush* getBrush(const QString& name)`, `Brush* getActiveBrush()`, `void setActiveBrush(const QString& name)`, `void setCurrentShape(BrushShape shape)`, `void setCurrentSize(int size)`, etc.
     - Emits signals when active brush or settings change (e.g., `activeBrushChanged(Brush*)`, `brushSettingsChanged(const BrushSettings&)`).
  4. Port `BrushShape` and other relevant enums from `brush_enums.h` to C++11 enum classes.
definition_of_done: |-
  - `mapcore::Brush` abstract base class is defined with necessary virtual methods.
  - `mapcore::BrushSettings` structure is defined to hold common brush parameters.
  - `mapcore::BrushManagerService` is implemented, capable of registering brushes, managing active brush, and current settings.
  - Relevant brush enums are ported.
  - The framework is UI-agnostic and resides in `mapcore`.
boilerplate_coder_ai_prompt: |-
  Create the foundational brush framework in `mapcore`.
  1.  Define `mapcore::Brush` abstract base class (`mapcore/brush/Brush.h`):
      -   Include pure virtual `apply(EditorControllerInterface* controller, const Position& pos, const BrushSettings& settings)`.
      -   Virtual `getName()`, `getLookID()`, `canApply()`.
  2.  Define `mapcore::BrushSettings` struct (`mapcore/brush/BrushSettings.h`):
      -   Include `BrushShape shape` (enum class: Square, Circle), `int size`, `int variation`, `bool isEraseMode`, `QString activeBrushName`.
  3.  Define `mapcore::BrushManagerService` class (`mapcore/brush/BrushManagerService.h/cpp`):
      -   Manages `QHash<QString, std::unique_ptr<Brush>> m_brushes`.
      -   Stores `BrushSettings m_currentSettings`.
      -   Methods: `registerBrush()`, `getBrush()`, `getActiveBrush()`, `setActiveBrushName(const QString& name)`, `setCurrentShape(BrushShape)`, `setCurrentSize(int)`.
      -   Implement signals: `activeBrushChanged(Brush*)`, `brushSettingsChanged(const BrushSettings&)`.
  4.  Port `BrushShape` from `wxwidgets/brush_enums.h` to a C++11 enum class.
documentation_references:
  - C++ Abstract Classes and Pure Virtual Functions
  - 'Qt Signals and Slots: https://doc.qt.io/qt-6/signalsandslots.html'
  - 'QHash: https://doc.qt.io/qt-6/qhash.html'
estimation_effort: Medium (5-8 developer days)
