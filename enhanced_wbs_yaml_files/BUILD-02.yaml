id: BUILD-02
section: Build, Deployment, & Documentation
title: Implement Packaging and Deployment
original_input_files: artprovider.cpp, application.cpp (for icon)
analyzed_input_files:
- wxwidgets/artprovider.cpp
- wxwidgets/application.cpp
dependencies:
- BUILD-01
current_functionality_summary: The application's primary icon is `editor_icon.xpm`, loaded in `application.cpp` and set dynamically after a possible hue shift. `artprovider.cpp` handles other UI icons. For packaging, the core task is bundling this primary icon (`editor_icon.xpm` or a converted version) with platform-native installers.
qt6_migration_steps: |-
  1. Locate the `editor_icon.xpm` file (expected in `../brushes/icon/` relative to `application.cpp`, so likely `wxwidgets/brushes/icon/editor_icon.xpm`).
  2. Convert `editor_icon.xpm` to appropriate formats: an `.ico` file for Windows (containing multiple sizes like 16x16, 32x32, 48x48, 256x256) and a set of `.png` files for macOS (`.icns` creation) and Linux (e.g., 128x128, 256x256, 512x512). These converted icons should be added to the repository, perhaps in a `packaging/icons` directory.
  3. Integrate CPack into the CMake build system established in `BUILD-01`. This involves including the CPack module in the root `CMakeLists.txt`.
  4. Create or update `CPackConfig.cmake` (or write CPack settings inline in `CMakeLists.txt`):
     - Set essential package metadata: `CPACK_PACKAGE_NAME` (e.g., "RME-Qt"), `CPACK_PACKAGE_VERSION_MAJOR`, `CPACK_PACKAGE_VERSION_MINOR`, `CPACK_PACKAGE_VERSION_PATCH`, `CPACK_PACKAGE_VENDOR` (e.g., "Remere's Map Editor Team"), `CPACK_PACKAGE_DESCRIPTION_SUMMARY`.
     - Specify `CPACK_PACKAGE_ICON` for Windows (path to the project-local `.ico` file) and macOS (path to the project-local `.icns` file).
     - For Linux, ensure a `.desktop` file is generated by CMake (e.g., via `ECMGenerateDesktopFile` if using KDE's Extra CMake Modules, or manually created) and installed by CMake's `install` rules into a standard path like `share/applications`. This `.desktop` file should reference the installed PNG icon (e.g., in `share/pixmaps`).
  5. Define CPack components if necessary (e.g., `Application` for executables, `DataFiles` for assets if they need separate packaging logic).
  6. Configure CPack generators: `WIX` (for Windows MSI), `DragNDrop` or `Bundle` (for macOS DMG/.app), and `DEB` (for Debian/Ubuntu).
  7. Augment CMake's `install()` commands:
     - Ensure the main executable is installed to a standard location (e.g., `bin`).
     - For Linux, install the application icon (PNG) to a standard pixmap directory (e.g., `share/pixmaps/{CPACK_PACKAGE_NAME}/{CPACK_PACKAGE_NAME}.png`).
     - Install any required data directories.
     - Ensure Qt runtime libraries are bundled if needed (controlled by `CMAKE_INSTALL_RPATH` and potentially `BundleUtilities.cmake` or `windeployqt`/`macdeployqt`).
  8. For macOS, set the `MACOSX_BUNDLE_ICON_FILE` target property in CMake to the path of the `.icns` file (relative to `CMAKE_SOURCE_DIR`). Also set other bundle properties like `MACOSX_BUNDLE_INFO_PLIST`, `MACOSX_BUNDLE_COPYRIGHT`, etc.
  9. For Windows, ensure the application icon is embedded in the executable. This can be done via a resource file (`.rc`) compiled by CMake, or sometimes handled by `CPACK_PACKAGE_ICON` for the installed shortcuts.
  10. Test package generation (`make package` or `cpack -G <Generator>`) and installation on each target platform (Windows, macOS, Linux).
definition_of_done: |-
  The CMake build system (from BUILD-01) is extended with CPack configurations to produce platform-native installers.
  Key requirements:
  - Generates an MSI installer for Windows.
  - Generates a DMG image (containing an .app bundle) for macOS.
  - Generates a .deb package for Debian-based Linux.
  - The application icon (derived from editor_icon.xpm) is correctly:
    - Displayed by the installers (where applicable).
    - Associated with the installed application (e.g., in shortcuts, application bundles, window decorations).
    - Visible in the respective OS application menus/launchers.
  - CPack configuration is clean and includes necessary metadata (name, version, vendor).
  - Installers correctly place executables and essential data files.
  - The created packages are installable and the application launches correctly from the installed location.
boilerplate_coder_ai_prompt: |-
  Extend the CMake build system (from task BUILD-01) to support packaging with CPack for Windows (MSI), macOS (DMG/.app), and Linux (.deb).
  1. The primary application icon is `wxwidgets/brushes/icon/editor_icon.xpm`. You will need to convert this to `.ico` (for Windows, multi-resolution) and `.icns` (for macOS, from multiple PNGs of different sizes like 16x16 up to 1024x1024). Store these converted icons in a new `packaging/icons` directory in the source tree. For Linux, a high-resolution PNG (e.g., 256x256 or 512x512) from the XPM will suffice.
  2. Include the CPack module in the root `CMakeLists.txt`.
  3. Configure CPack variables: `CPACK_PACKAGE_NAME` ("RME-Qt"), `CPACK_PACKAGE_VERSION_MAJOR/MINOR/PATCH` (use placeholders or version 1.0.0), `CPACK_PACKAGE_VENDOR`, `CPACK_PACKAGE_DESCRIPTION_SUMMARY`.
  4. For Windows (WIX generator): Set `CPACK_PACKAGE_ICON` to the path of the `.ico` file.
  5. For macOS (DragNDrop or Bundle generator): Set `CPACK_PACKAGE_ICON` to the path of the `.icns` file. Also, ensure the CMake target for the application has `MACOSX_BUNDLE_ICON_FILE` set to this `.icns` file and other necessary `MACOSX_BUNDLE_*` properties are configured (e.g., `MACOSX_BUNDLE_INFO_PLIST` if a custom one is needed).
  6. For Linux (DEB generator):
     - Install the PNG icon to a standard path (e.g., `{CMAKE_INSTALL_PREFIX}/share/pixmaps/{CPACK_PACKAGE_NAME}/{CPACK_PACKAGE_NAME}.png`).
     - Create a `.desktop` file (e.g., `RME-Qt.desktop`) and install it to `{CMAKE_INSTALL_PREFIX}/share/applications/`. The `.desktop` file should specify the `Icon` key pointing to the installed application icon name (without extension, e.g., `Icon=RME-Qt`).
  7. Review and adjust `install()` commands in CMake for the executable and any required data files to ensure they are correctly picked up by CPack.
  8. Ensure that the CPack process correctly bundles necessary Qt runtime libraries if they are not expected to be system-installed (this might involve using `$<TARGET_FILE:Qt6::Widgets>` etc. with `install(FILES ...)` or platform deployment tools like `windeployqt`/`macdeployqt` called via CMake).
  9. Verify that `cpack` or `make package` successfully creates the installers and that these installers work correctly on their respective platforms, with the application icon properly displayed.
