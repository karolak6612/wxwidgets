id: TEST-04 # Changed from wbs_item_id for consistency
section: Testing # Added section for clarity
title: "Develop Unit Tests for Brush Application and Material System Logic"
original_task_id: TEST-04 # Assuming this is the original ID
description: Develop unit tests for the brush and material system. This includes testing brush application logic (e.g., how ground, wall, item, doodad, creature brushes modify the map), border auto-tiling, wall auto-connection, and correct handling of material properties and brush definitions.
dependencies:
  - "CORE-03"  # Defines mapcore::Map, mapcore::Tile, which are manipulated by brushes.
  - CORE-14-MaterialSystem  # Defines mapcore::MaterialManager and application logic.
  - CORE-BRUSH-FRAMEWORK  # Defines mapcore::Brush types.
  - "TEST-01"  # Unit tests for basic data structures (Item, Tile, etc.).
  - "CORE-01"  # For Position, Tile, Item data structures.
  - "CORE-02"  # For ItemType, CreatureType definitions used by brushes.
  - "CORE-02" # ItemManager, for resolving item types for brushes.
  - "BUILD-01" # For CMake setup to build and run tests.
input_files: [] # No wxWidgets files to port for this task.
analyzed_input_files: [] # No legacy files to analyze for this task.
documentation_references:
  - 'Qt Test Framework: https://doc.qt.io/qt-6/qttest-index.html'
  - 'Data-Driven Testing with Qt Test: https://doc.qt.io/qt-6/qttestlib-tutorial1.html#data-driven-testing'
  - 'Managing Test Data: Best practices for creating minimal, focused mock XML/data for tests.'
current_functionality_summary: |
  This task is focused on creating new unit tests for the Qt6-based brush and material system. The system itself, primarily developed under 'CORE-04' (Port Brush & Materials System), dictates how different brush types (ground, wall, item/raw, doodad, creature, eraser) interact with and modify 'mapcore::Map' and 'mapcore::Tile' objects. These unit tests will validate the core application logic of these brushes, ensuring that complex behaviors such as automatic border generation for ground tiles, connection logic for walls, and correct placement of multi-tile doodads function as specified by their XML definitions.
definition_of_done:
  - Unit tests using the Qt Test framework are created for the core application logic of each significant brush type managed by 'mapcore::MaterialManager'.
  - "Ground Brush Tests: Verify correct placement of ground item(s) on a 'mapcore::Tile' based on brush definition (including item variations and chances if applicable, tested through controlled scenarios or statistical sampling if randomness is inherent). Thoroughly test auto-bordering logic: When a ground brush is applied to a tile, assert that correct border items are placed on that tile and/or adjacent tiles based on transitions to different ground types or void tiles. Cover all 8 directional edge cases (N, S, E, W) and corner cases (NE, NW, SE, SW). Test transitions between various (mocked) material types. Verify correct handling of 'friend' brush rules (e.g., no border drawn between friendly ground types). Test conditional border logic (e.g., specific borders based on neighboring item groups) as defined in mock 'borders.xml' and 'grounds.xml' data."
  - "Wall Brush Tests: Verify correct placement of item IDs for all defined wall segment types (horizontal, vertical, poles, corners, T-junctions, diagonals, ends, intersections). Test proper auto-connection of adjacent wall segments (e.g., placing a horizontal segment next to a vertical one should result in a corner piece, or appropriate end pieces). Verify correct placement and properties of doors and windows when a wall brush that defines them is applied."
  - "Item/RAW Brush Tests: Confirm that applying an item/RAW brush places the specified item (with correct ID and attributes if applicable) onto the target tile's item stack."
  - "Doodad Brush Tests: Verify accurate placement of all constituent items for multi-tile composite doodads. This includes: Correct relative X, Y, and Z offsets of each item from the brush's application point. Items with Z-offsets are placed correctly (e.g., appear on higher effective layers or higher in the tile stack). Test simple (single-item) doodad brushes for correct item placement. Test doodad brush properties like 'on_blocking' or 'redo_borders' if they influence tile properties or trigger further actions."
  - "Creature Brush Tests: Confirm that applying a creature brush correctly associates the specified creature (by name or type) with the target 'mapcore::Tile' (e.g., by setting 'tile->setCreature(creatureInstance)' or updating a spawn list if applicable)."
  - "Eraser Brush Tests: Validate the correct removal of different map elements (ground, specific items, all items, walls, creatures, spawns) based on the eraser's configuration or mode. Test that removing an element correctly updates adjacent elements (e.g., erasing a wall segment causes adjacent walls to update their forms)."
  - All tests use a controlled 'mapcore::Map' environment, programmatically set up for each test case or sub-test.
  - Brush definitions (grounds, walls, doodads, borders, etc.) are provided to the 'mapcore::MaterialManager' using minimal, focused mock XML data snippets for each test scenario.
  - All created unit tests pass successfully.
  - Tests are integrated into the CMake build system for automated execution via 'ctest'.
estimation_effort:
  - "Very High (30-40 developer days). Testing brush logic, especially auto-bordering and auto-walling, requires setting up many intricate map scenarios with specific neighboring tile configurations. Doodad brush testing for multi-tile composites with Z-offsets is also complex. Crafting precise mock XML data for each brush type and its variations to test specific behaviors and edge cases will be very demanding."
known_missing_files: [] # Not applicable
boilerplate_coder_ai_prompt: |
  Your task is to write unit tests for the brush application logic and material system of the Qt6 Remere's Map Editor, using the Qt Test framework. This involves testing how brushes (defined by mock XML and managed by 'mapcore::MaterialManager') modify 'mapcore::Map' and 'mapcore::Tile' objects. Tests should be located in 'tests/mapcore/'.

  General Test Structure (e.g., 'TestGroundBrushLogic') -
    1.  Create test class inheriting 'QObject'. Use 'QTEST_MAIN' or integrate.
    2.  '#include "mapcore/map.h"', '#include "mapcore/tile.h"', '#include "mapcore/materialmanager.h"', '#include "mapcore/brushes/*"' (specific brush headers from 'CORE-04'), etc.
  3.  Setup ('init()' function for each test, or 'initTestCase()') -
        -   Create 'mapcore::Map testMap;'. Set small dimensions (e.g., 10x10x1).
        -   Instantiate 'mapcore::MaterialManager materialManager;'.
        -   Load mock XML data for brushes and related materials (borders, etc.) into 'materialManager'.
            Use helper functions to create XML strings or load from small test files.
            Example - 'materialManager.loadGroundsFromXMLString' with appropriate XML content.
        -   Get specific brush instances from 'materialManager' (e.g., 'mapcore::GroundBrush* grassBrush = materialManager.getGroundBrush("test_grass");').
  4.  Test Functions (private slots) -
        -   Apply the brush to a tile - 'grassBrush->apply(testMap, mapcore::Position(x, y, z), params);' (Assuming an 'apply' method or similar in brush classes).
        -   Get the modified tile - 'mapcore::Tile* resultTile = testMap.getTile(x, y, z);'.
        -   Use 'QVERIFY', 'QCOMPARE' to check 'resultTile's state (ground item ID, items in stack, flags, etc.).

  Specific Test Scenarios -

  - Ground Brush Logic ('TestGroundBrushLogic') -
        -   'testBasicPlacement()' - Apply a simple ground brush. Verify 'tile->getGroundItem()->getID()'.
        -   'testAutoBorderNorth()' -
            -   Setup - 'map.createTile(1,0,0)->setGroundItem(dirtItem);' (assuming 'dirtItem' is from a different material).
            -   Action - 'grassBrush->apply(map, Position(1,1,0));'
            -   Assert - 'map.getTile(1,1,0)' has 'grass', and also contains the correct 'grass_dirt_border_N' item(s).
        -   Create similar tests for all 8 border directions and corners.
        -   'testBorderWithVoid()' - Test bordering against an empty tile.
        -   'testFriendRule()' - Define two ground brushes as friends. Verify no border is drawn.
        -   'testComplexConditionalBorder()' - If your 'grounds.xml' supports it, test a specific conditional rule.

  - Wall Brush Logic ('TestWallBrushLogic') -
        -   'testPlaceHorizontalWall()' - Apply wall brush. Verify correct item ID for horizontal segment.
        -   'testPlaceVerticalWall()'.
        -   'testPlaceCornerWall()' - Place H, then V next to it. Verify corner forms. Or apply to a tile and check neighbors.
        -   'testWallWithDoor()' - Apply wall brush that defines a door. Verify door item and its properties.

  - Doodad Brush Logic ('TestDoodadBrushLogic') -
        -   'testSingleTileDoodad()' - Apply. Verify item.
        -   'testMultiTileCompositeDoodad()' -
            -   Define mock XML for a doodad with items at (0,0,0), (1,0,0), (0,1,0), (0,0,1).
            -   'doodadBrush->apply(map, Position(5,5,7));'
            -   Verify item at (5,5,7), (6,5,7), (5,6,7), and (5,5,6) (or however Z-offset is handled).
        -   'testDoodadOnBlocking()' - Test 'on_blocking' attribute if it affects placement.

  - Creature Brush Logic ('TestCreatureBrushLogic') -
        -   'testPlaceCreature()' - Apply brush. 'QVERIFY(tile->getCreature() != nullptr); QCOMPARE(tile->getCreature()->getName(), "TestMonster");'.

  - Eraser Brush Logic ('TestEraserBrushLogic') -
        -   'testEraseGround()' - Place ground, erase, verify ground is null, verify borders updated.
        -   'testEraseItems()' - Place items, erase, verify items removed.

  Mock XML Data Helpers -
    - Create functions returning 'QString' or 'QByteArray' with minimal XML for specific test cases.
      ```cpp
      // Example helper
      QString createMockGroundBrushXML(const QString& brushName, int itemId, const QString& borderToBrushName = "", int borderId = 0) {
          QString xml = QString("<grounds><brush name=\"%1\"><item id=\"%2\" chance=\"100\"/>").arg(brushName).arg(itemId);
          if (!borderToBrushName.isEmpty()) {
              xml += QString("<border id=\"%3\" to=\"%4\" ground_equivalent=\"%2\"/>").arg(borderId).arg(borderToBrushName).arg(itemId);
          }
          xml += "</brush></grounds>";
          return xml;
      }
      ```
  This approach ensures tests are focused on the logic of brush application and material interactions, using controlled inputs.


