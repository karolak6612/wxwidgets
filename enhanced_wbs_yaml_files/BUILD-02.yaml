id: BUILD-02
section: Build, Deployment, & Documentation
title: Implement Packaging and Deployment
original_input_files:
  - wxwidgets/application.cpp
  - wxwidgets/artprovider.cpp
analyzed_input_files:
  - file_path: wxwidgets/application.cpp
    description: |
      Handles main application lifecycle and window setup.
      Crucially, in `Application::OnInit()`, it loads the primary application icon from an XPM file (`../brushes/icon/editor_icon.xpm`, which resolves to `wxwidgets/brushes/icon/editor_icon.xpm`).
      This XPM is converted to `wxBitmap`, then `wxImage` (allowing for dynamic hue shifts), and finally set as a `wxIcon` for the main application frame.
      This file is key for identifying the source of the main application icon that needs to be processed (converted to .ico, .icns, high-res .png) for platform-native packaging.
  - file_path: wxwidgets/artprovider.cpp
    description: |
      Implements `ArtProvider` (a `wxArtProvider`) to supply various UI icons, primarily for toolbars.
      It directly includes multiple XPM files (e.g., `circular_1.xpm`, `door_normal_small.xpm`) and provides them as `wxBitmap` objects based on requested IDs.
      While these are not the main application icon, they represent other image assets embedded in the application. For a Qt6 migration, these would typically be converted to PNGs and managed via Qt's Resource System or installed as assets.
      This file's main relevance to this WBS task is informational, confirming the project uses embedded XPMs for UI elements beyond the main application icon. The core packaging work for BUILD-02 will focus on the main application icon identified in `application.cpp`.
dependencies:
- BUILD-01
current_functionality_summary: The application's primary icon is `editor_icon.xpm`, loaded in `application.cpp` and set dynamically after a possible hue shift. `artprovider.cpp` handles other UI icons. For packaging, the core task is bundling this primary icon (`editor_icon.xpm` or a converted version) with platform-native installers. The current CMake setup (from BUILD-01) does not include packaging or installation capabilities.
qt6_migration_steps: |-
  1. Locate the `editor_icon.xpm` file (expected in `wxwidgets/brushes/icon/` relative to the project root).
  2. Convert `editor_icon.xpm` to appropriate formats: an `.ico` file for Windows (containing multiple sizes like 16x16, 32x32, 48x48, 256x256) and a set of `.png` files for macOS (`.icns` creation from these PNGs) and Linux (e.g., 128x128, 256x256, 512x512). These converted icons should be added to the repository, perhaps in a `packaging/icons` directory.
  3. Integrate CPack into the CMake build system established in `BUILD-01`. This involves including the CPack module in the root `CMakeLists.txt`.
  4. Create or update `CPackConfig.cmake` (or write CPack settings inline in `CMakeLists.txt`):
     - Set essential package metadata: `CPACK_PACKAGE_NAME` (e.g., "RME-Qt"), `CPACK_PACKAGE_VERSION_MAJOR`, `CPACK_PACKAGE_VERSION_MINOR`, `CPACK_PACKAGE_VERSION_PATCH`, `CPACK_PACKAGE_VENDOR` (e.g., "Remere's Map Editor Team"), `CPACK_PACKAGE_DESCRIPTION_SUMMARY`.
     - Specify `CPACK_PACKAGE_ICON` for Windows (path to the project-local `.ico` file) and macOS (path to the project-local `.icns` file).
     - For Linux, ensure a `.desktop` file is generated by CMake (e.g., via `ECMGenerateDesktopFile` if using KDE's Extra CMake Modules, or manually created) and installed by CMake's `install` rules into a standard path like `share/applications`. This `.desktop` file should reference the installed PNG icon (e.g., in `share/pixmaps`).
  5. Define CPack components if necessary (e.g., `Application` for executables, `DataFiles` for assets if they need separate packaging logic).
  6. Configure CPack generators: `WIX` (for Windows MSI), `DragNDrop` or `Bundle` (for macOS DMG/.app), and `DEB` (for Debian/Ubuntu). Consider `RPM` for other Linux distributions.
  7. Augment CMake's `install()` commands:
     - Ensure the main executable is installed to a standard location (e.g., `bin` or `lib/{CPACK_PACKAGE_NAME}`).
     - For Linux, install the application icon (PNG) to a standard pixmap directory (e.g., `share/pixmaps/{CPACK_PACKAGE_NAME}/{CPACK_PACKAGE_NAME}.png`).
     - Install any required data directories (e.g., the `data/` directory containing `XML/clients.xml` and other XMLs/OTBs, ensuring paths are relative for runtime access).
     - Ensure Qt runtime libraries are bundled if needed (controlled by `CMAKE_INSTALL_RPATH` and potentially using `BundleUtilities.cmake` or platform deployment tools like `windeployqt`/`macdeployqt` called from CMake).
  8. For macOS, set the `MACOSX_BUNDLE_ICON_FILE` target property in CMake to the path of the `.icns` file (relative to `CMAKE_SOURCE_DIR`). Also set other bundle properties like `MACOSX_BUNDLE_INFO_PLIST`, `MACOSX_BUNDLE_COPYRIGHT`, etc.
  9. For Windows, ensure the application icon is embedded in the executable. This can be done via a resource file (`.rc`) compiled by CMake. Also, ensure shortcuts created by the installer use the icon.
  10. Test package generation (`make package` or `cpack -G <Generator>`) and installation on each target platform (Windows, macOS, Linux).
definition_of_done: |-
  The CMake build system (from BUILD-01) is extended with CPack configurations to produce platform-native installers.
  Key requirements:
  - Generates an MSI installer for Windows.
  - Generates a DMG image (containing an .app bundle) for macOS.
  - Generates a .deb package for Debian-based Linux.
  - The application icon (derived from `wxwidgets/brushes/icon/editor_icon.xpm`) is correctly:
    - Displayed by the installers (where applicable).
    - Associated with the installed application (e.g., in shortcuts, application bundles, window decorations).
    - Visible in the respective OS application menus/launchers.
  - CPack configuration is clean and includes necessary metadata (name, version, vendor).
  - Installers correctly place executables, essential data files (like XML configurations), and icons.
  - The created packages are installable, and the application launches correctly from the installed location, finding all its resources.
  - Qt runtime dependencies are correctly bundled or handled for each platform.
boilerplate_coder_ai_prompt: |-
  Extend the CMake build system (from task BUILD-01) to support packaging with CPack for Windows (MSI), macOS (DMG/.app), and Linux (.deb).
  1. The primary application icon is `wxwidgets/brushes/icon/editor_icon.xpm`. You will need to convert this to `.ico` (for Windows, multi-resolution: 16,32,48,256px) and `.icns` (for macOS, from multiple PNGs: 16,32,64,128,256,512,1024px). Store these converted icons in a new `packaging/icons` directory in the source tree. For Linux, a high-resolution PNG (e.g., 256x256 or 512x512) derived from the XPM will suffice.
  2. Include the CPack module in the root `CMakeLists.txt`.
  3. Configure CPack variables: `CPACK_PACKAGE_NAME` ("RME-Qt"), `CPACK_PACKAGE_VERSION_MAJOR` (1), `CPACK_PACKAGE_VERSION_MINOR` (0), `CPACK_PACKAGE_VERSION_PATCH` (0), `CPACK_PACKAGE_VENDOR` ("Remere's Map Editor Team"), `CPACK_PACKAGE_DESCRIPTION_SUMMARY` ("A modern map editor for OTBM maps").
  4. For Windows (WIX generator): Set `CPACK_PACKAGE_ICON` to `packaging/icons/RME-Qt.ico`. Ensure the application executable also has this icon embedded (e.g., via a CMake-managed .rc file).
  5. For macOS (DragNDrop or Bundle generator): Set `CPACK_PACKAGE_ICON` to `packaging/icons/RME-Qt.icns`. Ensure the CMake target for the application has `MACOSX_BUNDLE_ICON_FILE` set to this `.icns` file and other necessary `MACOSX_BUNDLE_*` properties are configured (e.g., `MACOSX_BUNDLE_INFO_PLIST` if a custom one is needed, `MACOSX_BUNDLE_BUNDLE_NAME`).
  6. For Linux (DEB generator):
     - Install the PNG icon (e.g., `packaging/icons/RME-Qt-256.png`) to `{CMAKE_INSTALL_PREFIX}/share/pixmaps/{CPACK_PACKAGE_NAME}/{CPACK_PACKAGE_NAME}.png`.
     - Create a `.desktop` file (e.g., `RME-Qt.desktop`) with appropriate entries (Name, Comment, Exec, Icon, Terminal, Type, Categories) and install it to `{CMAKE_INSTALL_PREFIX}/share/applications/`. The `Icon` key should point to `RME-Qt` (the installed icon name without path or extension).
  7. Review and establish `install()` commands in CMake for:
     - The main executable target (`RME_Qt`) to `bin/` or `lib/RME-Qt/`.
     - The `packaging/icons` directory content to an appropriate share location (e.g., `share/icons/hicolor/...` for Linux, or within the app bundle for macOS).
     - Data files like `XML/clients.xml` and other XML/OTB files (from `XML/` and `XML/760/`) into a `data/` subdirectory relative to the executable or a standard share location.
  8. Implement robust bundling of Qt runtime libraries for each platform. Consider using `$<TARGET_FILE:Qt6::Widgets>` with `install(FILES ...)` for component libraries, or platform-specific tools like `windeployqt` and `macdeployqt` (potentially invoked via `install(CODE ...)` or `add_custom_command`). Ensure RPATHs are correctly set for Linux/macOS.
  9. Verify that `cpack` or `make package` successfully creates the installers/packages and that these install and run correctly on their respective platforms, with the application icon and resources properly handled.
documentation_references:
  - "https://cmake.org/cmake/help/latest/module/CPack.html"
  - "https://cmake.org/cmake/help/latest/module/CPackComponent.html"
  - "https://cmake.org/cmake/help/latest/cpack_gen/wix.html"
  - "https://cmake.org/cmake/help/latest/cpack_gen/dmg.html"
  - "https://cmake.org/cmake/help/latest/cpack_gen/deb.html"
  - "https://cmake.org/cmake/help/latest/cpack_gen/bundle.html"
  - "https://doc.qt.io/qt-6/linux-deployment.html"
  - "https://doc.qt.io/qt-6/windows-deployment.html"
  - "https://doc.qt.io/qt-6/macos-deployment.html"
  - "https://specifications.freedesktop.org/desktop-entry-spec/latest/"
  - "https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFBundles/BundleTypes/BundleTypes.html#//apple_ref/doc/uid/10000123i-CH101-SW1"
