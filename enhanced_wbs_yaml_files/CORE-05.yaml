wbs_item_id: CORE-05
name: Port Selection & Clipboard
description: Migrate selection management (map objects, items) and clipboard operations
  (cut, copy, paste) from `mapcore` (likely `selection.cpp`/`.h` and potentially missing
  `clipboard.cpp`/`.h`) to Qt6/C++. This includes handling complex selections and
  serializing/deserializing data for the clipboard.
dependencies:
- CORE-04
input_files:
- wxwidgets/selection.cpp
- wxwidgets/selection.h
analyzed_input_files:
- file_path: wxwidgets/selection.cpp
  description: Implementation of the Selection class, managing selected tiles and
    objects, and integrating with an ActionQueue for undo/redo. Includes a SelectionThread
    for background selection operations.
- file_path: wxwidgets/selection.h
  description: Header file for the Selection and SelectionThread classes, defining
    interfaces for managing selections of map objects.
documentation_references:
- 'QClipboard: https://doc.qt.io/qt-6/qclipboard.html'
- 'QMimeData: https://doc.qt.io/qt-6/qmimedata.html'
- 'QDataStream: https://doc.qt.io/qt-6/qdatastream.html'
- 'QSet: https://doc.qt.io/qt-6/qset.html'
- 'Qt Undo Framework: https://doc.qt.io/qt-6/qundostack.html'
current_functionality_summary: The wxWidgets `Selection` class manages a set of selected
  `Tile` objects. It uses a session-based approach (`start`, `commit`, `finish`) to
  group selection changes into `Action` objects for an `ActionQueue`. Methods like
  `add` and `remove` create deep copies of tiles with modified selection states and
  add these as `Change` objects to the current action. A `SelectionThread` allows
  performing selection operations in a separate thread. Clipboard logic (cut/copy/paste)
  is not explicitly detailed in these files but would typically involve serializing/deserializing
  the selected tiles and their contents.
definition_of_done:
- A `SelectionManager` class is implemented in Qt6/C++ to manage selected map objects
  (Tiles, Items, Creatures, Spawns).
- 'The `SelectionManager` supports:'
- '  - Adding objects (individual items, creatures, spawns, or entire tiles) to the
  current selection.'
- '  - Removing objects from the current selection.'
- '  - Clearing the entire selection.'
- All selection modifications are integrated with the `ActionQueue` (from CORE-03)
  to ensure undo/redo functionality.
- 'Clipboard operations are implemented:'
- '  - `copySelection()`: Serializes the currently selected objects into a well-defined
  clipboard format. Data can be placed on `QClipboard` or an internal buffer.'
- '  - `cutSelection()`: Performs a copy operation and then creates an action to delete
  the selected objects from the map.'
- '  - `pasteSelection(Position target_position)`: Deserializes objects from the clipboard
  data format and creates an action to add them to the map at the specified target
  position, maintaining relative placements.'
- A clear data format for clipboard content is defined and documented (e.g., custom
  binary structure, XML, or JSON representation of tiles and their contents).
- The system correctly handles selection of various map elements (ground, items on
  tile, creatures, spawns).
- Memory management for selected objects and clipboard data is handled using modern
  C++ practices.
- 'Basic unit tests are created for:'
- '  - `SelectionManager`: add, remove, clear selection operations.'
- '  - Clipboard: copy and paste of a simple selection (e.g., a few tiles with items).'
- The ported code compiles successfully within a Qt6 project structure.
- A brief report outlines the design of the selection and clipboard system and the
  chosen clipboard data format.
boilerplate_coder_ai_prompt: "The user wants to migrate a selection and clipboard\
  \ system from an old C++/wxWidgets application to Qt6/modern C++.\nAnalyze the provided\
  \ C++ header and source file snippets for `Selection` (from `wxwidgets/selection.cpp`\
  \ and `wxwidgets/selection.h`). Assume clipboard logic might have been in separate,\
  \ currently unavailable files (`clipboard.cpp`/`.h`) or integrated/handled by UI\
  \ code.\n\n**1. SelectionManager Class:**\n   - Design a `SelectionManager` class.\n\
  \   - It should maintain a collection of currently selected objects. This could\
  \ be a `QSet<Tile*>` if selection is tile-based, or a more complex structure if\
  \ individual items/creatures within unselected tiles can be selected (the provided\
  \ code suggests tile-based selection primarily, where operations on items within\
  \ a tile lead to a modified copy of the tile being part of the action). The original\
  \ `Selection::tiles` is a `TileSet`.\n   - Implement methods like:\n     - `void\
  \ add(Tile* tile, Item* item = nullptr, Creature* creature = nullptr, Spawn* spawn\
  \ = nullptr)`: Adds the specified object(s) to the selection. If an item/creature/spawn\
  \ is specified, the containing tile is effectively part of the selection context.\
  \ This should create an `Action` (see CORE-03) that, when executed, marks the objects\
  \ as selected and updates the tile state.\n     - `void remove(Tile* tile, Item*\
  \ item = nullptr, Creature* creature = nullptr, Spawn* spawn = nullptr)`: Removes\
  \ object(s) from selection, also via an `Action`.\n     - `void clearSelection()`:\
  \ Clears the current selection, via an `Action`.\n     - `const QSet<Tile*>& getSelectedTiles()\
  \ const;` (or equivalent for your chosen representation).\n     - `bool isSelected(Tile*\
  \ tile, Item* item = nullptr, ...) const;`\n   - The original `Selection` class\
  \ uses `start()`, `commit()`, `finish()` methods to batch selection changes into\
  \ `Action` objects submitted to an `ActionQueue`. Adapt this pattern. An `Action`\
  \ for selection might store copies of tiles in their pre-selected and post-selected\
  \ states.\n\n**2. Clipboard Functionality (to be integrated or a separate ClipboardHandler):**\n\
  \   - **Data Format:** Define a data format for storing copied map data. This could\
  \ be:\n     - A list of `Tile` objects (deep copies).\n     - A custom structure\
  \ like `ClipboardContent { Position offset; QList<TileData> tiles; }`.\n     - Serialized\
  \ data (e.g., using `QDataStream` for binary, or XML/JSON).\n     This format must\
  \ capture all necessary information: items, ground, creatures, spawns, tile flags,\
  \ relative positions.\n   - `void copySelection()`:\n     - Get the current selection\
  \ from `SelectionManager`.\n     - Determine the bounding box or reference point\
  \ (e.g., minPosition from original code).\n     - Create deep copies of the selected\
  \ tiles and their contents.\n     - Serialize this data into the defined clipboard\
  \ format.\n     - Place the serialized data onto `QApplication::clipboard()` using\
  \ a custom MIME type, or store it in an internal buffer.\n   - `void cutSelection()`:\n\
  \     - Perform `copySelection()`.\n     - Create and execute an `Action` (via `ActionQueue`)\
  \ to delete the selected objects/tiles from the map.\n   - `void pasteSelection(const\
  \ Position& target_paste_position)`:\n     - Retrieve data from `QApplication::clipboard()`\
  \ or the internal buffer.\n     - Deserialize it back into a list of `Tile` objects\
  \ or the intermediate structure.\n     - Create and execute an `Action` to add these\
  \ tiles/objects to the map at `target_paste_position`, applying appropriate offsets\
  \ so their relative arrangement is preserved.\n\n**3. Integration with Actions (CORE-03):**\n\
  \   - All operations that modify selection state or map data (cut, paste) must be\
  \ performed through `Action` objects pushed to the `ActionQueue` to ensure undo/redo\
  \ capability.\n   - A `SelectAction` might store the state of selection before and\
  \ after.\n   - A `PasteAction` would store the data being pasted to allow its removal\
  \ on undo.\n\n**General Porting Instructions:**\n   - Replace wxWidgets types (e.g.,\
  \ `wxThread` for `SelectionThread`) with Qt equivalents (`QThread`, `QtConcurrent::run`,\
  \ or handle synchronously if `SelectionThread`'s complexity is initially too high).\n\
  \   - Use smart pointers for managing dynamically allocated objects like `Tile`\
  \ copies for clipboard or actions.\n   - Interactions with `Editor`, `Map`, `Tile`,\
  \ `Item`, `ActionQueue` are key. Define clear interfaces or pass necessary references.\n\
  \   - The concept of `SessionFlags` (INTERNAL, SUBTHREAD) in the original code might\
  \ be simplified or re-evaluated based on how actions are batched.\n   - Provide\
  \ header (.h) and source (.cpp) files for the `SelectionManager` and any clipboard-specific\
  \ helper classes or data structures.\n   - Include basic unit tests for selection\
  \ changes and copy/paste operations.\n"
