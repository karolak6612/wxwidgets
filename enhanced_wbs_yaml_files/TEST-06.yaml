id: TEST-06 # Changed from wbs_item_id for consistency
section: Testing # Added section for clarity
title: "Develop Unit Tests for Network Protocol Message Handling"
original_task_id: TEST-06 # Assuming this is the original ID
description: Develop unit tests for network protocol message creation, serialization, and deserialization. This covers various message types defined in `mapcore::network` (from NET-01), including different data fields and error conditions during parsing.
dependencies:
  - "NET-01"   # Defines mapcore::network::NetworkMessage, mapcore::network::MapProtocolCodec, mapcore::network::LivePacketType
  - "TEST-01"  # Unit tests for core data structures (like mapcore::Position) that are part of network messages.
  - "CORE-01"  # For mapcore::Position and other fundamental types used in messages.
  - "BUILD-01" # For CMake setup to build and run tests.
input_files: [] # No wxWidgets files to port for this task.
analyzed_input_files: [] # No legacy files to analyze for this task.
documentation_references:
  - 'Qt Test Framework: https://doc.qt.io/qt-6/qttest-index.html'
  - 'QByteArray: https://doc.qt.io/qt-6/qbytearray.html'
  - 'QDataStream: https://doc.qt.io/qt-6/qdatastream.html (Relevant if NetworkMessage uses it, though NET-01 implies a custom std::vector based approach)'
  - 'Google Protocol Buffers (protobuf) - For ideas on robust serialization, though not directly used: https://developers.google.com/protocol-buffers'
current_functionality_summary: |
  This task is dedicated to creating new unit tests for the Qt6 network protocol implementation, specifically the message serialization and deserialization logic developed as part of `NET-01` (Isolate and Port Network Protocol). The `mapcore::network` module from `NET-01` provides the `NetworkMessage` class for buffer manipulation and the `MapProtocolCodec` (or equivalent) for handling the serialization/deserialization of complex map data structures and various `LivePacketType` messages. These tests will ensure that all defined network messages can be correctly encoded into a byte stream and decoded back into their structured object forms, maintaining data integrity across the network layer.
definition_of_done:
  - Unit tests using the Qt Test framework are created for each distinct network message type handled by `mapcore::network::NetworkMessage` and `mapcore::network::MapProtocolCodec` (or equivalent serialization/deserialization utilities).
  - **Message Types to Test (based on `LivePacketType` and `LiveSocket` helpers from `NET-01` analysis):**
    - Client Hello (`PACKET_HELLO_FROM_CLIENT`)
    - Server Hello (`PACKET_HELLO_FROM_SERVER` - including map name, dimensions)
    - Kick (`PACKET_KICK` - with reason string)
    - Client Accepted (`PACKET_ACCEPTED_CLIENT`)
    - Change Client Version (`PACKET_CHANGE_CLIENT_VERSION`)
    - Server Talk (`PACKET_SERVER_TALK` - speaker, message)
    - Client Talk (`PACKET_CLIENT_TALK` - message)
    - Node Data (`PACKET_NODE` - including node coordinates, floor mask, and serialized floor/tile data using `MapProtocolCodec`)
    - Cursor Update (`PACKET_CLIENT_UPDATE_CURSOR`, `PACKET_CURSOR_UPDATE` - including cursor ID, color, position)
    - Color Update (`PACKET_CLIENT_COLOR_UPDATE`, `PACKET_COLOR_UPDATE` - client ID, color)
    - Request Nodes (`PACKET_REQUEST_NODES` - list of node coordinates/IDs)
    - Change List (`PACKET_CHANGE_LIST` - serialized tile changes using `MapProtocolCodec`)
    - Start/Update Operation (`PACKET_START_OPERATION`, `PACKET_UPDATE_OPERATION`)
    - (Add any other specific messages like those for house edits if their payload structure is defined by `MapProtocolCodec`).
  - **Round-Trip Serialization/Deserialization Tests for Each Message Type:**
    - A message object/data structure is instantiated and populated with representative test data for all its fields.
    - The message is serialized into a `mapcore::NetworkMessage` buffer using the appropriate `MapProtocolCodec` methods or `NetworkMessage::write<T>` calls.
    - The `mapcore::NetworkMessage` buffer content is then deserialized back into a new message object/data structure of the expected type using `MapProtocolCodec` or `NetworkMessage::read<T>`.
    - A field-by-field comparison is performed between the original and deserialized message data to ensure all values are identical.
  - Tests cover messages containing various data types: primitive types (integers of various sizes, booleans), `std::string` (empty, typical, long), `mapcore::Position`, `mapcore::NetworkColor`, and lists/vectors of these where applicable (e.g., list of node IDs in `PACKET_REQUEST_NODES`).
  - For messages containing complex serialized data (like `PACKET_NODE` or `PACKET_CHANGE_LIST`), tests verify the integrity of the nested serialized map structures by deserializing them and comparing key attributes.
  - **Error Handling in Deserialization Tests:**
    - Attempting to deserialize from an incomplete/truncated `NetworkMessage` buffer (e.g., too few bytes for all declared fields).
    - Attempting to deserialize a `NetworkMessage` buffer containing corrupted data (e.g., string length longer than remaining buffer, invalid enum values if applicable).
    - The deserialization logic should robustly handle these errors (e.g., throw an exception, return an error indicator) without crashing.
  - All created unit tests pass successfully.
  - Tests are integrated into the CMake build system for automated execution via `ctest`.
estimation_effort:
  - "High (15-25 developer days). While `NetworkMessage` itself is relatively simple, testing the serialization/deserialization of each packet type, especially those involving complex nested data structures (like `PACKET_NODE` with its tile data, or `PACKET_CHANGE_LIST`), requires careful setup of test data and comprehensive verification. Error handling tests also add significant effort."
known_missing_files: [] # Not applicable
boilerplate_coder_ai_prompt: |
  Your task is to write unit tests for the network protocol message handling within the `mapcore::network` module, specifically testing `NetworkMessage` and the serialization/deserialization logic provided by `MapProtocolCodec` (developed in `NET-01`). Use the Qt Test framework. Tests should be located in `tests/mapcore/network/`.

  **General Test Strategy: Round-Trip Testing for Each Message Type**
  1.  **Test Class Setup:** Create a test class (e.g., `TestNetworkProtocol`) inheriting `QObject`.
  2.  **Instantiate & Populate:** For each `LivePacketType`:
      - Create the data that would constitute the message (e.g., for `PACKET_HELLO_FROM_CLIENT`: RME version, net version, client version, name string, password string).
  3.  **Serialize into `NetworkMessage`:**
      - `mapcore::NetworkMessage outMsg;`
      - `outMsg.write<uint8_t>(PACKET_ID);`
      - Use `outMsg.write<T>()` for primitive fields.
      - For complex data like tiles in `PACKET_NODE` or `PACKET_CHANGE_LIST`, use the (mocked or real) `MapProtocolCodec::serializeTile/Node` into the `outMsg`.
  4.  **Deserialize from `NetworkMessage`:**
      - `mapcore::NetworkMessage inMsg; inMsg.buffer = outMsg.buffer; inMsg.size = outMsg.size; inMsg.position = 0; // Reset position for reading`
      - `LivePacketType type = static_cast<LivePacketType>(inMsg.read<uint8_t>()); QCOMPARE(type, PACKET_ID);`
      - Use `inMsg.read<T>()` for primitive fields.
      - For complex data, use `MapProtocolCodec::deserializeTile/Node` from `inMsg`.
  5.  **Verify:** Compare all original populated data with the deserialized data using `QCOMPARE` and `QVERIFY`.

  **Key `LivePacketType` Messages and Data to Test:**

  *   **`PACKET_HELLO_FROM_CLIENT` / `PACKET_HELLO_FROM_SERVER`:**
      - Versions, map name (string), map dimensions (uint16_t).
  *   **`PACKET_KICK`:** Reason (string).
  *   **`PACKET_SERVER_TALK` / `PACKET_CLIENT_TALK`:** Speaker (string, for server), message (string). Test empty and long strings.
  *   **`PACKET_CURSOR_UPDATE` (and `PACKET_CLIENT_UPDATE_CURSOR`):**
      - `LiveCursor` data: `id` (uint32_t), `NetworkColor` (r,g,b,a uint8_t), `Position` (x,y,z).
  *   **`PACKET_COLOR_UPDATE` (and `PACKET_CLIENT_COLOR_UPDATE`):**
      - `clientId` (uint32_t), `NetworkColor`.
  *   **`PACKET_REQUEST_NODES`:** `count` (uint32_t), then `count` * node identifiers (uint32_t). Test with 0, 1, and multiple nodes.
  *   **`PACKET_NODE`:**
      - Node identifier (uint32_t: ndx, ndy, underground flag).
      - Floor mask (uint16_t).
      - For each floor in mask:
          - Tile mask (uint16_t).
          - Serialized tile data (string-like blob from `MapProtocolCodec::serializeFloor/Tile`). This part needs careful setup with `mapcore::Tile` objects having various items, flags, etc., then serializing them, and comparing key attributes after deserialization.
  *   **`PACKET_CHANGE_LIST`:** Serialized tile changes (string-like blob from `MapProtocolCodec`). Similar to `PACKET_NODE`, requires setting up `mapcore::Tile` objects, serializing, then deserializing and comparing critical attributes.
  *   **`PACKET_START_OPERATION` / `PACKET_UPDATE_OPERATION`:** Operation message (string), percentage (uint32_t).

  **Error Handling Tests for `NetworkMessage::read<T>()` and `MapProtocolCodec` Deserialization:**
  -   `testReadPastEndOfBuffer()`: Try to read more data than available.
  -   `testReadStringTooLong()`: String length prefix indicates more bytes than available in buffer.
  -   `testCorruptedNodeData()`: Feed malformed serialized tile/node data to `MapProtocolCodec::deserializeNode/Tile` (this might be harder to unit test without specific error paths in the codec, but test with truncated data).

  **Test Structure Example (`TestNetworkMessages.cpp`):**
  ```cpp
  #include <QtTest>
  #include "mapcore/network/network_message.h"
  #include "mapcore/network/live_packets.h"
  #include "mapcore/network/map_protocol_codec.h" // Assuming this exists
  #include "mapcore/position.h"
  // Include mapcore::Tile, mapcore::Map etc. if needed for MapProtocolCodec tests

  class TestNetworkMessages : public QObject {
      Q_OBJECT
  private slots:
      void testHelloClientServer() {
          // Client -> Server
          mapcore::NetworkMessage outMsgC;
          outMsgC.write<uint8_t>(PACKET_HELLO_FROM_CLIENT);
          outMsgC.write<uint32_t>(123); // rme version
          outMsgC.write<uint32_t>(1);   // net version
          outMsgC.write<uint32_t>(1280); // client version
          outMsgC.write<std::string>("TestUser");
          outMsgC.write<std::string>("TestPass");

          mapcore::NetworkMessage inMsgC;
          inMsgC.buffer = outMsgC.buffer; inMsgC.size = outMsgC.size; inMsgC.position = 0;
          QCOMPARE(static_cast<LivePacketType>(inMsgC.read<uint8_t>()), PACKET_HELLO_FROM_CLIENT);
          QCOMPARE(inMsgC.read<uint32_t>(), 123u);
          QCOMPARE(inMsgC.read<uint32_t>(), 1u);
          QCOMPARE(inMsgC.read<uint32_t>(), 1280u);
          QCOMPARE(inMsgC.read<std::string>(), "TestUser");
          QCOMPARE(inMsgC.read<std::string>(), "TestPass");
          QVERIFY(inMsgC.position == inMsgC.size); // Ensure all data was read
      }

      void testCursorUpdate() {
          mapcore::NetworkMessage outMsg;
          outMsg.write<uint8_t>(PACKET_CURSOR_UPDATE);
          mapcore::NetworkColor color = {10, 20, 30, 255};
          mapcore::Position pos(100, 200, 7);
          // Assume MapProtocolCodec::writeLiveCursor exists
          mapcore::MapProtocolCodec::writeLiveCursor(outMsg, 5u, color, pos);

          mapcore::NetworkMessage inMsg;
          inMsg.buffer = outMsg.buffer; inMsg.size = outMsg.size; inMsg.position = 0;
          QCOMPARE(static_cast<LivePacketType>(inMsg.read<uint8_t>()), PACKET_CURSOR_UPDATE);
          uint32_t id; mapcore::NetworkColor c; mapcore::Position p;
          mapcore::MapProtocolCodec::readLiveCursor(inMsg, id, c, p);
          QCOMPARE(id, 5u);
          QCOMPARE(c.r, 10); QCOMPARE(c.g, 20); QCOMPARE(c.b, 30); QCOMPARE(c.a, 255);
          QCOMPARE(p, pos);
          QVERIFY(inMsg.position == inMsg.size);
      }

      // ... more tests for other packet types and error conditions ...
  };
  ```
  Focus on verifying that each defined packet type can be serialized and deserialized correctly, including all its fields and data types.

[end of enhanced_wbs_yaml_files/TEST-06.yaml]
