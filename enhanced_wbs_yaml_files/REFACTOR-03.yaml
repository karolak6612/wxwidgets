id: REFACTOR-03
section: Post-Migration Refactoring & Optimization
title: "Implement Rendering Optimizations Based on Profiling Report"
original_task_id: REFACTOR-03 # Keep original ID
original_input_files:
  - "Conceptual: Qt6 MapView class source code (from RENDER-01 and subsequent tasks)"
  - "Conceptual: Qt6 TextureManager class source code (from RENDER-03 and subsequent tasks)"
  - "Conceptual: Profiling Report document (output of REFACTOR-02)"
dependencies:
  - "REFACTOR-02" # Profiling Report which guides this task
  - "RENDER-01"   # Initial MapView implementation
  - "RENDER-03"   # TextureManager implementation
  - "RENDER-04"   # Lighting System (if shaders are involved)
  - "CORE-01"     # Map data structures (for culling, data access)
analyzed_input_files:
  - filepath: "Conceptual: Qt6 MapView class source code"
    description: "The existing Qt6 'MapView' class (primarily its 'paintGL' or equivalent rendering methods) is a key input for this task. The Profiling Report from REFACTOR-02 will have identified specific areas within this class that are performance hotspots."
  - filepath: "Conceptual: Qt6 TextureManager class source code"
    description: "The existing Qt6 'TextureManager' class is another key input. The Profiling Report may indicate inefficiencies in texture atlas usage, texture loading, or management that contribute to rendering bottlenecks."
  - filepath: "Conceptual: Profiling Report document (output of REFACTOR-02)"
    description: "This is a critical input document. It contains the detailed findings of performance and memory profiling, pinpointing specific bottlenecks in the rendering pipeline that this task must address."
current_functionality_summary: |
  This task involves implementing targeted code optimizations within the rendering pipeline of the RME-Qt application, specifically focusing on the 'MapView' and 'TextureManager' classes (and potentially related rendering components like shaders if used). The optimizations are not new features but rather improvements to existing rendering code, directly guided by the performance bottlenecks and memory usage issues identified in the Profiling Report from task 'REFACTOR-02'. The goal is to enhance rendering efficiency, improve frame rates, and reduce memory overhead associated with map display.
qt6_migration_steps: |
  1.  **Detailed Review of Profiling Report ('REFACTOR-02' Output):**
      *   Thoroughly analyze the Profiling Report to understand the highest-impact performance bottlenecks (CPU hotspots, excessive draw calls, slow shader execution) and memory issues (high texture memory usage, inefficient data handling for rendering) related to 'MapView' and 'TextureManager'.
      *   Prioritize the reported issues based on their impact on user experience (FPS, responsiveness, memory footprint).

  2.  **Implement Targeted Optimizations in 'MapView' and 'TextureManager':**
      *   **Culling Techniques:**
          - Based on the report, if insufficient culling is an issue:
              - Implement or refine frustum culling in 'MapView`'s rendering loop to ensure only elements visible to the camera are processed. Leverage the map's spatial index (e.g., quadtree from 'mapcore') for efficient determination of visible map sections.
              - If overdraw is significant, investigate and implement simple and effective occlusion culling strategies if feasible (e.g., depth pre-pass if using shaders, or software-based tile/object visibility checks).
      *   **Rendering Batching & State Change Reduction:**
          - If the report indicates too many draw calls or OpenGL state changes:
              - Refactor 'MapView`'s rendering logic to group draw calls for objects sharing the same texture atlas page, shader program (if any), and blending modes. This might involve creating lists of renderable objects sorted by state or using techniques like geometry instancing if applicable.
              - Review and potentially optimize 'TextureManager`'s atlas generation or sprite packing strategy if it contributes to frequent texture swaps or poor batching opportunities.
      *   **Shader Optimization (if custom shaders from 'RENDER-04' are identified as bottlenecks):**
          - Analyze and refactor specific GLSL shader code identified in the report.
          - Simplify complex calculations, minimize texture lookups, optimize loops and conditional statements within shaders.
          - Consider using lower precision types if acceptable for visual quality.
      *   **Efficient OpenGL Usage:**
          - Ensure Vertex Buffer Objects (VBOs) and Vertex Array Objects (VAOs) are used optimally. This includes appropriate usage of static vs. dynamic VBOs and minimizing data transfers to the GPU.
          - Minimize redundant OpenGL state changes within the rendering loop of 'MapView'.
      *   **Data Structure & Algorithm Optimization for Rendering:**
          - If the report points to inefficient data access or iteration patterns when 'MapView' prepares rendering data from 'mapcore' structures, refactor these parts. This could involve optimizing loops, using more efficient data lookup methods, or pre-calculating certain rendering-specific information.
      *   **Texture Memory Optimization:**
          - If 'TextureManager' or texture handling in 'MapView' is flagged for high memory usage:
              - Investigate options for texture compression (e.g., ASTC, S3TC/DXT if hardware supports and quality is acceptable).
              - Implement or refine mipmapping strategies in 'TextureManager'.
              - Ensure textures are loaded and unloaded efficiently, especially if dealing with very large numbers of sprites or dynamic texture changes.

  3.  **Iterative Re-Profiling and Verification:**
      *   After implementing each significant optimization, re-run the specific profiling scenario(s) from 'REFACTOR-02' that highlighted the original bottleneck.
      *   Measure the performance improvement (e.g., FPS increase, CPU time reduction in specific functions, memory usage decrease).
      *   Conduct thorough visual testing to confirm that the optimizations have not introduced any rendering artifacts, visual regressions, or incorrect behavior. Document these re-profiling results.

  4.  **Code Review and Documentation:**
      *   Ensure that all optimized code in 'MapView' and 'TextureManager' is clean, maintainable, and well-commented, explaining the rationale behind the changes.
      *   Update any relevant internal documentation regarding the rendering pipeline.
definition_of_done:
  - Key rendering bottlenecks in 'MapView' and 'TextureManager', as identified by the 'REFACTOR-02' Profiling Report, have been addressed with specific code optimizations.
  - Measurable performance improvements (e.g., increased frame rate, reduced CPU/GPU load during rendering, lower memory usage for textures) are demonstrated and documented for the previously identified bottleneck scenarios.
  - Optimizations do not introduce any new visual rendering errors, artifacts, or functional regressions in the map display.
  - The source code of 'MapView' and 'TextureManager' remains clear, maintainable, and appropriately commented after the optimization changes.
  - A brief report summarizing the optimizations implemented and their measured impact is produced as an addendum or follow-up to the initial profiling report.
estimation_effort:
  - "High (20-30 developer days). The effort depends heavily on the number and complexity of bottlenecks identified in REFACTOR-02. Implementing advanced culling, overhauling rendering batching logic, or deep shader optimization can be very time-consuming. Each optimization requires careful implementation, testing, and re-profiling."
known_missing_files: []
boilerplate_coder_ai_prompt: |
  **Task: Implement Rendering Optimizations in RME-Qt**

  **Input:**
  - The Profiling Report document generated from task 'REFACTOR-02'.
  - The existing Qt 6 source code for the 'MapView' class (and its rendering methods like 'paintGL').
  - The existing Qt 6 source code for the 'TextureManager' class.
  - (If applicable) GLSL shader source code used by the rendering pipeline.

  **Procedure:**

  You are to implement targeted optimizations based *only* on the findings and recommendations present in the 'REFACTOR-02' Profiling Report. For each identified bottleneck:

  1.  **Understand the Bottleneck:** Refer to the Profiling Report to understand why a specific part of 'MapView' or 'TextureManager' (or associated shaders) is slow or memory-intensive.
  2.  **Implement the Recommended Optimization:**
      *   **If Frustum Culling is recommended for 'MapView':**
          - Modify the rendering loop in 'MapView::paintGL' (or equivalent).
          - Before drawing map elements (tiles, items, etc.), check if their bounding boxes intersect with the current view frustum.
          - Utilize the map's spatial index (e.g., quadtree in 'mapcore') for efficient querying of elements within the frustum.
          - Only issue draw calls for elements that are visible.
      *   **If Draw Call Batching is recommended for 'MapView':**
          - Refactor the rendering loop to group elements by shared state (texture atlas, shader, blend mode).
          - Consolidate vertex data for batched elements into larger VBOs if possible.
          - Issue fewer 'glDrawArrays' or 'glDrawElements' calls.
          - If 'TextureManager`'s atlas strategy is implicated, propose changes or implement them if straightforward (e.g., better sprite packing heuristics if the report suggests this).
      *   **If Shader Optimization is recommended:**
          - Modify the specific GLSL shader file(s) identified.
          - Apply standard shader optimization techniques: reduce arithmetic complexity, minimize texture lookups, unroll loops where beneficial, optimize conditional execution.
      *   **If OpenGL Call Efficiency is recommended:**
          - Review 'MapView' for redundant state changes (e.g., 'glBindTexture', 'glUseProgram', 'glEnable/Disable') within loops and minimize them.
          - Ensure VBOs/VAOs are correctly used for static and dynamic geometry.
      *   **If Data Access for Rendering is a bottleneck:**
          - Refactor how 'MapView' iterates map tiles or accesses item/creature data from 'mapcore' specifically for rendering preparation. Optimize these loops or data lookups.
  3.  **Test and Verify:**
      *   After each significant optimization, build and run the RME-Qt application.
      *   Visually inspect the rendering to ensure no new artifacts or regressions have been introduced.
      *   If possible with your tools, re-run the specific scenario from the Profiling Report that the optimization targeted, and note any observed improvements (e.g., FPS). This is a lightweight verification; full re-profiling is part of the task's broader scope done by a developer.
  4.  **Document Changes:** Add comments to your code explaining the optimization implemented and why.

  Focus: only on implementing optimizations based on the provided Profiling Report. Do not introduce new features or refactor code unrelated to the identified performance issues.
