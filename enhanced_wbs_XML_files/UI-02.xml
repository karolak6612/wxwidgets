<?xml version="1.0" ?>
<UI-02>
  <id>UI-02</id>
  <section>UI Elements</section>
  <title>Port Main Application Toolbars and Comprehensive Palette System</title>
  <original_input_files>
    <original_input_file>wxwidgets/main_toolbar.cpp</original_input_file>
    <original_input_file>wxwidgets/main_toolbar.h</original_input_file>
    <original_input_file>wxwidgets/palette_window.cpp</original_input_file>
    <original_input_file>wxwidgets/palette_window.h</original_input_file>
    <original_input_file>wxwidgets/palette_brushlist.cpp</original_input_file>
    <original_input_file>wxwidgets/palette_brushlist.h</original_input_file>
    <original_input_file>wxwidgets/palette_creature.cpp</original_input_file>
    <original_input_file>wxwidgets/palette_creature.h</original_input_file>
    <original_input_file>wxwidgets/palette_house.cpp</original_input_file>
    <original_input_file>wxwidgets/palette_house.h</original_input_file>
    <original_input_file>wxwidgets/palette_waypoints.cpp</original_input_file>
    <original_input_file>wxwidgets/palette_waypoints.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <filepath>wxwidgets/main_toolbar.h</filepath>
      <description>Declares `MainToolBar` class (derived from `wxEvtHandler`). It defines constants for toolbar names (`STANDARD_BAR_NAME`, `BRUSHES_BAR_NAME`, etc.) and IDs (`TOOLBAR_STANDARD`, etc.). Holds pointers to four `wxAuiToolBar` instances (`standard_toolbar`, `brushes_toolbar`, `position_toolbar`, `sizes_toolbar`) and specific controls within them, like `NumberTextCtrl` for X,Y,Z inputs (`x_control`, `y_control`, `z_control`) and a `wxButton` (`go_button`) for the position toolbar.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/main_toolbar.cpp</filepath>
      <description>Implements `MainToolBar`.
- Constructor: Initializes four `wxAuiToolBar`s:
  1.  `standard_toolbar`: Standard operations (New, Open, Save, Undo, Redo, Cut, Copy, Paste) using `wxArtProvider` icons. Event IDs like `wxID_NEW`, `wxID_OPEN`.
  2.  `brushes_toolbar`: Toggle buttons for specialized brushes (Optional Border, Eraser, PZ, NoPVP, NoLogout, PvPZone, Zone, various Door types, Window types) using `wxArtProvider` and custom PNGs loaded via `_wxGetBitmapFromMemory`. Event IDs like `PALETTE_TERRAIN_OPTIONAL_BORDER_TOOL`.
  3.  `position_toolbar`: Contains `NumberTextCtrl`s for X, Y, Z coordinates and a 'Go' button (`TOOLBAR_POSITION_GO`) with an icon.
  4.  `sizes_toolbar`: Toggle buttons for brush shape (Rectangular, Circular - `TOOLBAR_SIZES_RECTANGULAR`, `TOOLBAR_SIZES_CIRCULAR`) and predefined brush sizes (1-7, e.g., `TOOLBAR_SIZES_1`).
- Toolbars are added to `wxAuiManager` with names, docking positions, and properties.
- Event handlers (`OnStandardButtonClick`, `OnBrushesButtonClick`, etc.) translate toolbar interactions into calls to `g_gui` methods (e.g., `g_gui.NewMap()`, `g_gui.SelectBrush()`, `g_gui.SetBrushShape()`, `g_gui.SetBrushSize()`, `g_gui.SetScreenCenterPosition()`).
- `UpdateButtons()`: Enables/disables tools based on editor state.
- `UpdateBrushButtons()`: Toggles brush tools based on `g_gui.GetCurrentBrush()`.
- `UpdateBrushSize()`: Updates size/shape toggles based on `g_gui.GetBrushShape()` and `g_gui.GetBrushSize()`.
- `LoadPerspective()`/`SavePerspective()`: Manages toolbar visibility and layout using `g_settings` and `wxAuiManager`.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_window.h</filepath>
      <description>Declares `PaletteWindow` (derived from `wxPanel`). This class is the main container for all palettes. It uses a `wxChoicebook` (`choicebook`) to switch between palette categories (Terrain, Doodad, Item, Collection, Creature, House, Waypoint, RAW). Includes `wxTextCtrl` (`action_id_input`) and `wxCheckBox` (`action_id_checkbox`) for a global Action ID. Holds pointers to each specific palette panel (e.g., `BrushPalettePanel* terrain_palette`, `CreaturePalettePanel* creature_palette`). Defines event IDs like `PALETTE_CHOICEBOOK`.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_window.cpp</filepath>
      <description>Implements `PaletteWindow`.
- Constructor: Initializes `action_id` and `action_id_enabled`. Creates the main `wxChoicebook`. Calls static `Create...Palette` methods (e.g., `CreateTerrainPalette`) to instantiate each palette panel type and adds them as pages to the `choicebook`.
- `Create...Palette` static methods: Each one news up the specific palette panel (e.g., `BrushPalettePanel` for Terrain, `CreaturePalettePanel` for Creature) and potentially adds tool panels (like `BrushToolPanel`, `BrushSizePanel`) to them.
- Event handling: `OnSwitchingPage`/`OnPageChanged` for `PALETTE_CHOICEBOOK` call `OnSwitchIn`/`OnSwitchOut` on the relevant panels and notify `g_gui` of brush changes. `OnActionIDChange`/`OnActionIDToggle` update `action_id` and `action_id_enabled`.
- `GetSelectedBrush()`: Delegates to the current palette page's `GetSelectedBrush()`.
- `ReloadSettings()`: Updates child palettes' settings (list style, icon sizes).
- `InvalidateContents()`: Calls `InvalidateContents()` on all child palettes.
- `OnSelectBrush()`: Programmatically changes active page and brush.
- `OnUpdateBrushSize()`/`OnUpdate()`: Forwards updates to the current palette page.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_brushlist.h</filepath>
      <description>Declares core classes for brush display in palettes.
- `BrushBoxInterface`: Abstract base class defining an interface for various brush display views (e.g., `SelectFirstBrush`, `GetSelectedBrush`, `SelectBrush`).
- `BrushListBox`: `wxVListBox`-based implementation of `BrushBoxInterface` for a simple list view with icons and text.
- `BrushIconBox`: `wxScrolledWindow`-based `BrushBoxInterface` displaying brushes as a grid of `BrushButton`s (custom `wxToggleButton`s).
- `BrushGridBox`: Another `wxScrolledWindow`-based `BrushBoxInterface` using `wxFlexGridSizer` for a dynamic grid of `BrushButton`s.
- `DirectDrawBrushPanel`: `wxScrolledWindow`-based `BrushBoxInterface` with custom drawing for RAW items, featuring progressive loading.
- `SeamlessGridPanel`: Advanced `wxScrolledWindow`-based `BrushBoxInterface` with direct sprite rendering, zooming, item ID display (optional), progressive loading, sprite caching, and chunking for very large tilesets. Declares `CachedSprite` struct.
- `BrushPanel`: A `wxPanel` that hosts one of the `BrushBoxInterface` implementations. It allows switching view modes (list vs. grid via `view_mode_toggle`, direct draw for RAW via `view_type_choice`, show item IDs via `show_ids_toggle`). It uses `g_brush_panel_cache` (a `std::map&lt;const TilesetCategory*, BrushPanelState&gt;`) to cache `BrushBoxInterface` instances and their states (grid view, list view, zoom controls) to improve performance when switching between tilesets or view modes.
- `BrushPalettePanel`: Derived from `PalettePanel`. This is the main panel for generic categories (Terrain, Doodad, Item, RAW, Collection). It contains an inner `wxChoicebook` to select a `TilesetCategory` (e.g., a specific group of ground sprites). Each page of this inner choicebook is a `BrushPanel`. It also manages adding tool panels (e.g., `BrushToolPanel`, `BrushSizePanel`, `BrushThicknessPanel`, `ZoneBrushPanel`) and provides UI buttons (&quot;Add new Tileset&quot;, &quot;Add new Item&quot;, &quot;Quick Add Item&quot;, &quot;Create Border&quot;) that invoke dialogs (like `AddTilesetWindow`, `AddItemWindow` from UI-05, `BorderEditorDialog` from UI-05).</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_brushlist.cpp</filepath>
      <description>Implements classes from `palette_brushlist.h`.
- `BrushPalettePanel`: Constructor sets up the inner `wxChoicebook` and populates it with `BrushPanel` instances for each `TilesetCategory` of the palette's type. Handles events for its buttons, invoking dialogs as needed (e.g., `AddTilesetWindow`, `AddItemWindow`, `BorderEditorDialog`). `OnClickQuickAddItemTileset` adds the current `RAWBrush` to the last used tileset.
- `BrushPanel`: Constructor initializes view mode toggles (`view_mode_toggle`, `show_ids_toggle`, `view_type_choice`). `LoadViewMode()` dynamically creates or retrieves from `g_brush_panel_cache` the appropriate `BrushBoxInterface` (e.g., `BrushListBox`, `SeamlessGridPanel`) based on settings and view mode. `OnViewModeToggle` handles switching between cached list and grid views, creating them if not cached, and managing zoom controls for `SeamlessGridPanel`.
- `SeamlessGridPanel`: Implements sophisticated rendering (`DrawSpriteAt` with caching, scaling based on `zoom_level`), scroll handling, mouse interaction (selection, hover), keyboard navigation (`OnKeyDown`), progressive loading (`StartProgressiveLoading`, `OnTimer`), and chunk navigation for large tilesets (`CreateNavigationPanel`, `UpdateNavigationPanel`, `OnNavigationButtonClicked`). `ManageSpriteCache` implements logic to limit cache size.
- Other `BrushBoxInterface` views (`BrushListBox`, `BrushIconBox`, `BrushGridBox`, `DirectDrawBrushPanel`) implement their specific rendering and interaction logic.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_creature.h</filepath>
      <description>Declares `CreaturePalettePanel` (derived from `PalettePanel`) for creature selection and spawn settings. Declares `CreatureSpritePanel` (basic sprite grid) and `CreatureSeamlessGridPanel` (advanced sprite grid, similar to the generic `SeamlessGridPanel` but tailored for creatures). UI controls include `wxChoice` for creature categories, `SortableListBox` for list view, search field, spin controls for spawn time/radius, toggles for brush mode (Creature/Spawn) and view preferences (list/sprite, sprite size, zoom), and buttons for loading NPC/Monster XML data and purging creatures.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_creature.cpp</filepath>
      <description>Implements `CreaturePalettePanel`.
- Constructor: Sets up UI elements including tileset choice, search field, view mode toggles (list vs. sprite, large sprites, zoom), creature/spawn brush toggles, spawn time/radius spin controls, and load/purge buttons.
- Populates creature categories from `g_materials.tilesets` (type `TILESET_CREATURE`).
- `FilterCreatures()`: Filters the displayed creature list by name or looktype ID based on `search_field` input.
- `SetViewMode()`: Handles switching between `creature_list` (list view), `sprite_panel` (basic grid), and `seamless_panel` (advanced grid). Manages visibility and content loading for these views. `CreatureSeamlessGridPanel` has its own zooming and sprite sizing logic.
- Event Handlers:
  - Tileset/list/sprite selection: Updates the current brush by calling `g_gui.SelectBrush()`.
  - Brush mode toggles (`OnClickCreatureBrushButton`, `OnClickSpawnBrushButton`): Switch between `CreatureBrush` and `SpawnBrush`.
  - Spawn settings (`OnChangeSpawnTime`, `OnChangeSpawnSize`): Update global spawn settings via `g_gui`.
  - Load/Purge buttons (`OnClickLoadNPCsButton`, `OnClickLoadMonstersButton`, `OnClickPurgeCreaturesButton`): Use `wxDirDialog` to get folders, call `g_creatures.importXMLFromOT()` for loading, or `g_creatures.clear()` and `g_materials` updates for purging. Refreshes palettes afterwards.
- `OnUpdate()`: Reloads creature categories and refreshes the display.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_house.h</filepath>
      <description>Declares `HousePalettePanel` (derived from `PalettePanel`) for the 'Houses' palette tab. Manages UI for house selection, town filtering, and house brush/exit brush mode. Declares `wxChoice` for towns (`town_choice`), `SortableListBox` for houses (`house_list`), buttons for Add/Edit/Remove house, and toggle buttons for House/Exit brush mode. Also declares `EditHouseDialog` for modifying house properties (name, rent, town, guildhall status, ID).</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_house.cpp</filepath>
      <description>Implements `HousePalettePanel` and `EditHouseDialog`.
- `HousePalettePanel`:
  - `SetMap()`: Initializes/updates the panel with data from the current map.
  - `OnUpdate()`: Populates `town_choice` from `map-&gt;towns`.
  - `SelectTown()`: Populates `house_list` based on the selected town.
  - `OnClickAddHouse`: Adds a new `House` object to `map-&gt;houses`.
  - `OnClickEditHouse`: Shows an `EditHouseDialog` for the selected house.
  - `OnClickRemoveHouse`: Removes selected house(s) from `map-&gt;houses`.
  - `OnClickHouseBrushButton`/`OnClickSelectExitButton`: Toggle between `HouseBrush` and `HouseExitBrush`.
  - `OnListBoxContextMenu`/`OnMoveHouseToTown`: Handles moving a house to a different town.
- `EditHouseDialog`: A `wxDialog` with `wxTextCtrl` for name/rent, `wxChoice` for town, `wxSpinCtrl` for ID, and `wxCheckBox` for guildhall. Validates input (e.g., unique house ID if changed, non-empty name) and updates the `House` object. Warns about consequences of changing existing house IDs.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_waypoints.h</filepath>
      <description>Declares `WaypointPalettePanel` (derived from `PalettePanel`) for the 'Waypoints' palette tab. Uses a `wxListCtrl` (`waypoint_list`) in report view (single column) for displaying and allowing in-place editing of waypoint names.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_waypoints.cpp</filepath>
      <description>Implements `WaypointPalettePanel`. Populates `waypoint_list` from `map-&gt;waypoints`. Handles adding new waypoints (`OnClickAddWaypoint`), removing selected waypoints (`OnClickRemoveWaypoint`), and renaming waypoints directly in the `wxListCtrl` (`OnEditWaypointLabel`). Selecting a waypoint in the list sets it for the `WaypointBrush` (via `g_gui.waypoint_brush-&gt;setWaypoint()`) and navigates the map view to the waypoint's location.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>UI-01</dependencie>
    <dependencie>BUILD-01</dependencie>
    <dependencie>LOGIC-01</dependencie>
    <dependencie>CORE-06</dependencie>
    <dependencie>RENDER-01</dependencie>
    <dependencie>RENDER-03</dependencie>
    <dependencie>CORE-BRUSH-FRAMEWORK</dependencie>
  </dependencies>
  <documentation_references>
    <documentation_reference>QToolBar: https://doc.qt.io/qt-6/qtoolbar.html</documentation_reference>
    <documentation_reference>QAction: https://doc.qt.io/qt-6/qaction.html</documentation_reference>
    <documentation_reference>QDockWidget: https://doc.qt.io/qt-6/qdockwidget.html</documentation_reference>
    <documentation_reference>QTabWidget: https://doc.qt.io/qt-6/qtabwidget.html</documentation_reference>
    <documentation_reference>QListView / QListWidget: https://doc.qt.io/qt-6/qlistview.html &amp; https://doc.qt.io/qt-6/qlistwidget.html</documentation_reference>
    <documentation_reference>QComboBox: https://doc.qt.io/qt-6/qcombobox.html</documentation_reference>
    <documentation_reference>QSpinBox, QLineEdit, QPushButton, QRadioButton: Standard input widgets.</documentation_reference>
    <documentation_reference>QAbstractItemModel / QStyledItemDelegate: For custom views in QListView/QTreeView if needed for advanced brush display.</documentation_reference>
    <documentation_reference>QGridLayout / QVBoxLayout / QHBoxLayout: For arranging widgets within palettes.</documentation_reference>
    <documentation_reference>QStackedWidget: https://doc.qt.io/qt-6/qstackedwidget.html (For managing different brush views within a BrushPanel)</documentation_reference>
  </documentation_references>
  <current_functionality_summary>The legacy system includes a `MainToolBar` class managing four `wxAuiToolBar` instances (Standard, Brushes, Position, Sizes) populated with tools and actions, using `wxAuiManager` for layout. The palette system is anchored by `PaletteWindow`, which uses a `wxChoicebook` for main categories (Terrain, Doodad, Item, Creature, House, Waypoint, etc.). Each category can contain `BrushPalettePanel` instances, which in turn might use another `wxChoicebook` for tilesets (sub-categories) and host various `BrushBoxInterface` views like `BrushListBox` (simple list), `BrushIconBox` (icon grid), `DirectDrawBrushPanel` (custom drawing), and the complex `SeamlessGridPanel` (featuring zooming, progressive loading, sprite caching, and chunking for large datasets). Specialized palettes like `CreaturePalettePanel`, `HousePalettePanel`, and `WaypointPalettePanel` have unique UIs and data handling logic integrated within this framework.
</current_functionality_summary>
  <qt6_migration_steps>1.  **Port `MainToolBar` to `MainWindowQt`:**
    -   Create four `QToolBar` members in `MainWindowQt` (e.g., `standardToolbar`, `brushesToolbar`, `positionToolbar`, `sizesToolbar`).
    -   Populate `standardToolbar` with `QAction`s for New, Open, Save, Undo, Redo, Cut, Copy, Paste, using `QIcon::fromTheme` or custom icons. Connect to `EditorController` slots or `MainWindowQt` handlers.
    -   Populate `brushesToolbar` with checkable `QAction`s for specialized brushes (Eraser, Zone types, Door types, Window types). Use `QActionGroup` where appropriate for mutually exclusive brushes. Connect to `EditorController` or `BrushManagerService`.
    -   Populate `positionToolbar` with `QSpinBox` for X, Y, Z and a `QPushButton` &quot;Go&quot;. Connect to `EditorController` or `MapViewQt` slots.
    -   Populate `sizesToolbar` with `QActionGroup`s for brush shape (Rectangular, Circular) and brush size. Connect to `BrushManagerService`.
    -   Implement `MainWindowQt::updateToolbars()`, `updateBrushToolbarStates()`, `updateBrushSizeToolbar()` to manage action/button states.
    -   Use `QMainWindow::addToolBar()` and allow user to show/hide/move them. Toolbar states (visibility, position) can be saved/restored using `QMainWindow::saveState()` / `restoreState()`.

2.  **Create Main Palette Container (`PaletteDockWidget`):**
    -   Create a `QDockWidget` subclass (e.g., `PaletteDockWidget`).
    -   Inside it, place a `QTabWidget` (`paletteTabWidget`) as its main widget. This will host the different palette categories.

3.  **Design Base Palette Tab/Panel (`BasePaletteTab` - Conceptual):**
    -   Consider a common base `QWidget` subclass for all palette tabs if there's significant shared functionality (e.g., interaction with `BrushManagerService`, `ClientDataService`).

4.  **Implement Generic Brush Palette Tabs (`GenericBrushPaletteTab` for Terrain, Doodad, Item, RAW, Collection):**
    -   Create a `QWidget` subclass (e.g., `GenericBrushPaletteTab`).
    -   It will contain a `QComboBox` (or another `QTabWidget`) for &quot;tileset&quot; selection (sub-categories).
    -   It will contain a `QStackedWidget` to switch between different view modes (List, Icon Grid, Seamless Grid).
    -   **View Modes:**
        -   **List View:** `QListView` with a custom model (`QAbstractListModel`) and `QStyledItemDelegate` to display brush icon and name.
        -   **Icon Grid View:** `QListView` set to `QListView::IconMode` or a custom `QTableView` with a custom model/delegate.
        -   **Seamless Grid View (`SeamlessGridPaletteView`):** A custom `QAbstractScrollArea`-based widget (similar to `SeamlessGridPanel`).
            -   Implement `paintEvent` to draw sprites directly.
            -   Handle mouse events for selection, hover.
            -   Implement zooming, sprite caching, progressive loading, chunking for very large lists.
            -   Display item IDs optionally.
    -   A `QLineEdit` for filtering brushes within the current tileset.
    -   Integrate tool panels (Brush Tools, Thickness, Size) if they are part of these palette types.
    -   Populate from `MaterialManager` based on palette type (Terrain, Doodad, etc.) and selected tileset.
    -   On selection, signal `EditorController` or `BrushManagerService` with the chosen `Brush*`.

5.  **Implement Specialized Palette Tabs:**
    -   **`CreaturePaletteTab`:**
        -   UI: `QComboBox` for creature categories, `QLineEdit` for search, display area (list or custom grid like `CreatureSeamlessGridPaletteView`), `QSpinBox` for spawn time/radius, `QRadioButton`s for Creature/Spawn brush mode, `QPushButton`s for Load NPCs/Monsters, Purge.
        -   Populate from `CreatureManager` and `MaterialManager` (for creature tilesets).
        -   Filter logic for search. View mode switching.
        -   Connect signals to `EditorController` / `BrushManagerService` / `SpawnSettingsService`.
    -   **`HousePaletteTab`:**
        -   UI: `QComboBox` for towns, `QListWidget` for houses, Add/Edit/Remove buttons, `QRadioButton`s for House/Exit brush mode.
        -   Populate from `Map::getHouseManager()` and `Map::getTownManager()`.
        -   Invokes dialogs (e.g., `EditHouseDialogQt` from UI-05) for editing.
        -   Connects signals to `EditorController` / `BrushManagerService`.
    -   **`WaypointPaletteTab`:**
        -   UI: `QListWidget` with editable items, Add/Remove buttons.
        -   Populate from `Map::getWaypointManager()`.
        -   Connects signals to `EditorController` / `BrushManagerService`.

6.  **Integrate Palettes into `PaletteDockWidget`:**
    -   Add instances of `GenericBrushPaletteTab` (configured for Terrain, Doodad, etc.) and specialized palette tabs (`CreaturePaletteTab`, etc.) to the `paletteTabWidget`.

7.  **Connect Selections and Settings:**
    -   Ensure `EditorController` or relevant services are notified of palette selections to update the current active brush/tool.
    -   Palette views should respect global settings (e.g., from `AppSettingsService`) for icon sizes, list styles, etc.
    -   Global Action ID input (from original `PaletteWindow`) needs a Qt equivalent, perhaps in a shared toolbar or status bar area, or a dedicated small dialog/widget.</qt6_migration_steps>
  <definition_of_done>- All four main toolbars (Standard, Brushes, Position, Sizes) are ported to `QToolBar`s and populated with equivalent `QAction`s and controls, and are functional.
- Toolbar states (enabled, checked) are dynamically updated based on application context.
- A `QDockWidget` hosts the main palette system, containing a `QTabWidget` for different palette categories (Terrain, Doodad, Item, RAW, Collection, Creature, House, Waypoint).
- Generic palette tabs (Terrain, Doodad, Item, RAW, Collection) correctly display brushes/items from their respective tilesets using appropriate Qt views (e.g., `QListView` with custom delegate or `QListWidget`). They allow selection which updates the active brush via `BrushManagerService`. Basic filtering is implemented.
- The advanced `SeamlessGridPanel` functionality (zooming, progressive loading, sprite caching, optional ID display, chunking for very large lists) is substantially replicated in a custom Qt widget (`SeamlessGridPaletteView`) and used where appropriate (e.g., for RAW or Doodad palettes if configured).
- Specialized palettes (`CreaturePaletteTab`, `HousePaletteTab`, `WaypointPaletteTab`) are implemented with their core UI elements and correctly display and manage their specific data types, interacting with relevant managers.
- All palette selections correctly update the application's active brush/tool state via `BrushManagerService`.
- Palettes are visually organized, reasonably performant, and user-friendly.
- The global Action ID input field and checkbox are reimplemented and functional.</definition_of_done>
  <known_missing_files>
    <known_missing_file>wxwidgets/edit_house_dialog.cpp</known_missing_file>
    <known_missing_file>wxwidgets/edit_house_dialog.h</known_missing_file>
  </known_missing_files>
  <boilerplate_coder_ai_prompt>Implement the Qt6 toolbars and the comprehensive palette system. This involves creating multiple `QToolBar`s and a tabbed `QDockWidget` for various palettes (Terrain, Doodad, Item, RAW, Collection, Creature, House, Waypoint).

**I. Main Toolbars (in `MainWindowQt`):**
1.  Create and add four `QToolBar` members: `standardToolbar`, `brushesToolbar`, `positionToolbar`, `sizesToolbar`.
2.  Populate `standardToolbar` with `QAction`s (New, Open, Save, Undo, Redo, Cut, Copy, Paste). Use `QIcon::fromTheme` or provide paths to custom icons. Connect to slots in `EditorController` or `MainWindowQt`.
3.  Populate `brushesToolbar` with checkable `QAction`s (Eraser, Zones, Doors, Windows). Use `QActionGroup` if appropriate. Connect to `BrushManagerService` or `EditorController`.
4.  Populate `positionToolbar` with three `QSpinBox` (X,Y,Z) and a &quot;Go&quot; `QPushButton`. Connect to `EditorController` or `MapViewQt`.
5.  Populate `sizesToolbar` with `QActionGroup`s for brush shape (Rectangular, Circular) and size. Connect to `BrushManagerService`.
6.  Implement `updateToolbars()` in `MainWindowQt` to manage enabled/checked states.

**II. Palette System (`PaletteDockWidget` containing a `QTabWidget` `paletteTabWidget`):**

**A. `GenericBrushPaletteTab` (Base for Terrain, Doodad, Item, RAW, Collection):**
   - Create a `QWidget` subclass.
   - UI: `QComboBox* tilesetCombo; QLineEdit* filterEdit; QStackedWidget* viewStack; QListView* listView; SeamlessGridPaletteView* gridView;`
   - Constructor: Takes `PaletteCategoryType category, MaterialManager* matMgr, ClientDataService* clientDataMgr, BrushManagerService* brushMgrService`.
   - Populate `tilesetCombo` from `matMgr-&gt;getTilesetsForCategory(category)`.
   - On `tilesetCombo` change or `filterEdit` change:
      - Get `Brush*` list from `matMgr`.
      - Populate `listView` (using a custom model/delegate for icon+text) and `gridView`.
   - `SeamlessGridPaletteView` (custom `QAbstractScrollArea`):
      - Implement `paintEvent` to draw brush sprites in a grid.
      - Handle mouse for selection, hover. Implement zooming, sprite caching (use `clientDataMgr-&gt;getSpriteManager()`), progressive loading, optional item ID display.
   - Connect item selection from views to `brushMgrService-&gt;setActiveBrush()`.

**B. Specialized Palette Tabs:**
   - **`CreaturePaletteTab`:** UI for category, search, list/grid view (can use `SeamlessGridPaletteView`), spawn settings, brush mode. Connects to `CreatureManager`, `BrushManagerService`.
   - **`HousePaletteTab`:** UI for town, house list, Add/Edit/Remove, House/Exit brush mode. Connects to `Map::getHouseManager()`, `BrushManagerService`. Invokes `EditHouseDialogQt`.
   - **`WaypointPaletteTab`:** UI for waypoint list (editable names), Add/Remove. Connects to `Map::getWaypointManager()`, `BrushManagerService`.

**General:**
- Ensure all palettes load their data from the respective managers (`MaterialManager`, `CreatureManager`, map data).
- Use signals/slots for interactions (e.g., palette selection -&gt; `BrushManagerService` -&gt; `EditorController`).
- Palettes should be dockable within `MainWindowQt`.
- Strive for responsive UI, especially in `SeamlessGridPaletteView`.</boilerplate_coder_ai_prompt>
  <estimation_effort>X-Large (25-35 developer days)</estimation_effort>
</UI-02>
