<?xml version="1.0" ?>
<CORE-11-WaypointSystem>
  <id>CORE-11-WaypointSystem</id>
  <section>Core Migration Tasks</section>
  <title>Port Waypoint System Data Structures</title>
  <original_input_files>
    <original_input_file>wxwidgets/waypoints.h</original_input_file>
    <original_input_file>wxwidgets/waypoints.cpp</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/waypoints.h</file_path>
      <description>Defines the `Waypoint` class and `Waypoints` (likely a typedef for a collection like `std::map&lt;std::string, Waypoint*&gt;`).
- `Waypoint` class: Represents a named navigation point on the map.
  - Stores a unique name (string) as its identifier.
  - Stores its `Position` on the map.
  - May store a list of connections to other waypoint names (`std::vector&lt;std::string&gt;`).
- The `Map` class (in `map.h`) likely contains a `Waypoints` collection to manage all waypoints in the map.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/waypoints.cpp</file_path>
      <description>Implementation of the `Waypoint` class.
- Constructor likely takes name and `Position`.
- Methods to manage connections (add/remove connection to another waypoint name).
- Accessors for name and position.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-03</dependencie>
  </dependencies>
  <current_functionality_summary>- The `Waypoint` class (`waypoints.h/cpp`) defines a named navigation point with a `Position` and potentially connections to other waypoints by their names.
- The main `Map` object manages a collection of all waypoints, likely mapping unique waypoint names to `Waypoint` objects.
- Map I/O operations (e.g., OTBM parsing) read and write waypoint data.
</current_functionality_summary>
  <qt6_migration_steps>1.  **Define `WaypointData` Class (in `mapcore/navigation/WaypointData.h/cpp`):**
    -   Create `WaypointData.h` and `WaypointData.cpp`. This class represents a single waypoint.
    -   Store members: `QString name;` (unique identifier), `Position position;`.
    -   Store connections: `QSet&lt;QString&gt; connectedWaypointNames;` (using a QSet for efficient add/remove/lookup of connections).
    -   Implement constructor: `WaypointData(const QString&amp; name, const Position&amp; pos);`.
    -   Implement methods: `addConnection(const QString&amp; otherName)`, `removeConnection(const QString&amp; otherName)`, `isConnectedTo(const QString&amp; otherName) const`.
    -   Implement accessors for name, position, and the set of connections.

2.  **Integrate with `Map` Class:**
    -   `Map` class (from `CORE-03`):
        -   Add a member like `QMap&lt;QString, WaypointData&gt; waypointsByName;`.
        -   Implement methods in `Map` like:
            -   `bool addWaypoint(WaypointData&amp;&amp; waypoint);` (returns false if name exists)
            -   `WaypointData* getWaypoint(const QString&amp; name);`
            -   `const WaypointData* getWaypoint(const QString&amp; name) const;`
            -   `bool removeWaypoint(const QString&amp; name);`
            -   `const QMap&lt;QString, WaypointData&gt;&amp; getWaypoints() const { return waypointsByName; }`
            -   Consider helper methods for managing connections between waypoints if logic is complex (e.g., ensuring bidirectional connections if required by design).

3.  **Update Map I/O (`CORE-07-MapIO` - `OtbmMapIO`):**
    -   Modify `OtbmMapIO::loadMap` to parse OTBM waypoint nodes:
        -   Read waypoint attributes (name, position).
        -   Read connection data if stored per waypoint.
        -   Create `WaypointData` objects and add them to `Map::waypointsByName`.
        -   After all waypoints are loaded, resolve and set connections if they are stored as references.
    -   Modify `OtbmMapIO::saveMap` to serialize `WaypointData` from `Map::waypointsByName` into OTBM waypoint nodes, including connection information.

4.  **Unit Tests:**
    -   Test `WaypointData` construction, property management, and connection management.
    -   Test `Map`'s ability to add, retrieve, and remove `WaypointData` objects.
    -   Test connection logic (adding, removing, checking connections).
    -   Test (conceptually, or as part of `CORE-07`'s tests) that waypoint data is correctly loaded and saved with maps.
</qt6_migration_steps>
  <definition_of_done>- A `WaypointData` class is implemented in `mapcore/navigation/` to store properties of a waypoint (unique name, position, connections to other waypoint names).
- The `Map` class (from `CORE-03`) is updated to manage a collection of `WaypointData` objects (e.g., `QMap&lt;QString, WaypointData&gt;`).
- The OTBM map I/O system (`CORE-07-MapIO`) is extended to correctly load and save waypoint definitions and their connections.
- Unit tests are created for `WaypointData` and for the `Map` class's waypoint management capabilities, including connection logic.
- The new classes compile successfully within the `mapcore` library.
</definition_of_done>
  <boilerplate_coder_ai_prompt>You are to port the Waypoint system data structures from a legacy C++ codebase (based on `waypoints.h/cpp`) to a modern C++/Qt6 environment within the `mapcore` library. This includes defining the `WaypointData` class and integrating it with the `Map` class.

**1. `WaypointData` Class (`mapcore/navigation/WaypointData.h/cpp`):**
   - Define class `WaypointData`.
   - Members:
     ```cpp
     #include &lt;QString&gt;
     #include &lt;QSet&gt;
     #include &quot;core/position.h&quot; // Or your Position header

     class WaypointData {
     public:
         QString name;          // Unique name
         Position position;
         QSet&lt;QString&gt; connectedWaypointNames;

         WaypointData(const QString&amp; n = QString(), const Position&amp; pos = Position()) : name(n), position(pos) {}

         void addConnection(const QString&amp; otherName) { connectedWaypointNames.insert(otherName); }
         void removeConnection(const QString&amp; otherName) { connectedWaypointNames.remove(otherName); }
         bool isConnectedTo(const QString&amp; otherName) const { return connectedWaypointNames.contains(otherName); }
         // Add other constructors, getters, setters as needed
     };
     ```

**2. Update `Map` Class (Modify `mapcore/map/Map.h/cpp` from `CORE-03`):**
   - Add a member: `QMap&lt;QString, WaypointData&gt; waypointsByName;`.
   - Implement public methods:
     - `bool addWaypoint(WaypointData&amp;&amp; waypointData);` // Store waypointData by name, ensure name is unique
     - `WaypointData* getWaypoint(const QString&amp; name);`
     - `const WaypointData* getWaypoint(const QString&amp; name) const;`
     - `bool removeWaypoint(const QString&amp; name);`
     - `const QMap&lt;QString, WaypointData&gt;&amp; getWaypoints() const { return waypointsByName; }`

**3. Integration with Map I/O (`CORE-07-MapIO`):**
   - This task defines the data structures. The actual loading/saving logic will be implemented as part of `CORE-07-MapIO`'s `OtbmMapIO` class. Ensure that `OtbmMapIO` is updated to:
      - Read waypoint data (name, position, connections) from OTBM waypoint nodes and populate `Map::waypointsByName`.
      - Write `WaypointData` from `Map::waypointsByName` back to OTBM.

**General Requirements:**
   - Use C++17/Qt6 types and practices.
   - Provide header and source files.
   - Write basic Qt Test unit tests for `WaypointData` (including connection management) and `Map`'s waypoint management.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>QMap: https://doc.qt.io/qt-6/qmap.html</documentation_reference>
    <documentation_reference>QSet: https://doc.qt.io/qt-6/qset.html</documentation_reference>
    <documentation_reference>QString: https://doc.qt.io/qt-6/qstring.html</documentation_reference>
  </documentation_references>
  <estimation_effort>Medium</estimation_effort>
</CORE-11-WaypointSystem>
