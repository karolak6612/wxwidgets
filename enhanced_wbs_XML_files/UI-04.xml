<?xml version="1.0" ?>
<UI-04>
  <id>UI-04</id>
  <section>UI Elements</section>
  <title>Port Item, Creature, and Spawn Properties Dialogs</title>
  <original_task_id>UI-04</original_task_id>
  <description>Recreate UI dialogs for viewing and editing properties of map items (general, container contents, custom attributes, type-specific attributes), creatures (spawn time, direction), and spawns (radius) using Qt6.</description>
  <dependencies>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>LOGIC-02</dependencie>
    <dependencie>LOGIC-04</dependencie>
    <dependencie>LOGIC-05</dependencie>
    <dependencie>LOGIC-07</dependencie>
    <dependencie>UI-11</dependencie>
    <dependencie>REFACTOR-01</dependencie>
    <dependencie>BUILD-01</dependencie>
  </dependencies>
  <input_files>
    <input_file>wxwidgets/properties_window.cpp</input_file>
    <input_file>wxwidgets/properties_window.h</input_file>
    <input_file>wxwidgets/old_properties_window.cpp</input_file>
    <input_file>wxwidgets/old_properties_window.h</input_file>
    <input_file>wxwidgets/container_properties_window.cpp</input_file>
    <input_file>wxwidgets/container_properties_window.h</input_file>
  </input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <filepath>wxwidgets/properties_window.h</filepath>
      <description>Declares 'PropertiesWindow' (derived from 'ObjectPropertiesWindowBase', a 'wxDialog'). This class is a newer, item-specific properties editor. It uses a 'wxNotebook' to manage different property editing panels for an 'Item'. Panels include 'Simple' (general attributes like ActionID, UniqueID), 'Contents' (for containers, using 'ContainerItemButton's), and 'Advanced' (for custom key-value attributes using 'wxGrid').</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/properties_window.cpp</filepath>
      <description>Implements 'PropertiesWindow'. 'createGeneralPanel' sets up basic item ID display and 'wxSpinCtrl' for ActionID/UniqueID. 'createContainerPanel' creates a grid of 'ContainerItemButton' widgets to manage items within a container. 'createAttributesPanel' sets up a 'wxGrid' for custom attributes, allowing users to add/remove/edit keys and their typed values (String, Number, Float, Boolean), using 'wxGridCellChoiceEditor' for type selection and appropriate editors for values. 'OnClickOK' saves data from the active panel back to the 'Item' copy. 'OnGridValueChanged' handles type changes in the attributes grid.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/old_properties_window.h</filepath>
      <description>Declares 'OldPropertiesWindow' (derived from 'ObjectPropertiesWindowBase', a 'wxDialog'). This is an older, versatile dialog that dynamically adjusts its layout and controls based on the type of object being edited: 'Item', 'Creature', or 'Spawn'. It holds pointers to various 'wxSpinCtrl', 'wxTextCtrl', 'wxChoice', and 'wxCheckBox' widgets for these different properties.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/old_properties_window.cpp</filepath>
      <description>Implements: 'OldPropertiesWindow'. The constructor inspects the type of 'edit_item', 'edit_creature', or 'edit_spawn'.
- &quot;For Items: It dynamically creates UI controls for common attributes (ActionID, UniqueID, Count/Subtype) and specialized fields based on 'ItemType' properties:&quot;
    - Containers: Displays items using 'ContainerItemButton's.
    - Writeables/Books: 'wxTextCtrl' for text.
    - Splashes/Fluids: 'wxChoice' for liquid type.
    - Depots: 'wxChoice' for Town ID (from 'map-&gt;towns').
    - Doors: 'wxSpinCtrl' for Door ID (enabled if on a house tile).
    - Teleports: 'wxSpinCtrl's for Destination X, Y, Z.
    - Podiums: 'wxChoice' for Direction; 'wxCheckBox'es for Show Outfit/Mount/Platform; 'wxSpinCtrl's for LookType, Head, Body, Legs, Feet, Addons, LookMount, and mount color components.
    - Tiered Items: 'wxSpinCtrl' for Tier (for newer client versions).
- &quot;For Creatures: Creates 'wxSpinCtrl' for spawn interval ('count_field' in this context) and 'wxChoice' for direction ('direction_field').&quot;
- &quot;For Spawns: Creates 'wxSpinCtrl' for spawn radius ('count_field' in this context).&quot;
'OnClickOK' validates inputs (e.g., UID/AID ranges, text lengths, valid depot/town IDs, podium looktypes/colors) and saves the changes back to the edited object copy.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/container_properties_window.h</filepath>
      <description>Declares 'ContainerItemButton' (custom 'ItemButton' for displaying items within a container editor UI, handling left/right clicks) and 'ContainerItemPopupMenu' (a 'wxMenu' for actions like Add/Edit/Remove item in a container slot). These are helper components used by 'PropertiesWindow' and 'OldPropertiesWindow'.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/container_properties_window.cpp</filepath>
      <description>Implements 'ContainerItemButton' and 'ContainerItemPopupMenu'. 'ContainerItemButton::OnMouseDoubleLeftClick' triggers edit (if item exists) or add. 'ContainerItemButton::OnMouseRightRelease' shows the 'ContainerItemPopupMenu'. Menu actions ('OnAddItem', 'OnEditItem', 'OnRemoveItem') either open 'FindItemDialog' to add an item, open a new properties dialog ('PropertiesWindow' or 'OldPropertiesWindow') for the contained item, or remove the item from the parent 'Container`'s item vector. Updates the parent properties window after modification.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <documentation_references>
    <documentation_reference>QDialog: https://doc.qt.io/qt-6/qdialog.html</documentation_reference>
    <documentation_reference>QTabWidget: https://doc.qt.io/qt-6/qtabwidget.html</documentation_reference>
    <documentation_reference>QSpinBox, QLineEdit, QTextEdit, QComboBox, QCheckBox: Standard input widgets.</documentation_reference>
    <documentation_reference>QTableWidget: https://doc.qt.io/qt-6/qtablewidget.html (for custom attributes)</documentation_reference>
    <documentation_reference>QStyledItemDelegate: https://doc.qt.io/qt-6/qstyleditemdelegate.html (for custom editors in QTableWidget)</documentation_reference>
    <documentation_reference>QListView with IconMode: https://doc.qt.io/qt-6/qlistview.html#viewMode-prop (for container contents)</documentation_reference>
    <documentation_reference>QGridLayout, QFormLayout, QVBoxLayout, QHBoxLayout: For arranging widgets.</documentation_reference>
  </documentation_references>
  <current_functionality_summary>The wxWidgets application provides item property editing through two main dialogs, with helper classes for container item display:
1.  **'OldPropertiesWindow'**: A versatile modal dialog that dynamically changes its layout and available fields based on the type of object being edited (Item, Creature, or Spawn).
    *   For **Items**, it handles common attributes (ActionID, UniqueID, Count/Subtype) and specialized fields for types like: Containers (displaying items within using 'ContainerItemButton's), Writeables/Books (multi-line text input), Splashes/Fluids (liquid type selection), Depots (town ID selection), Doors (Door ID if on a house tile), Teleports (destination X,Y,Z), Podiums (direction, outfit display flags, detailed outfit/mount looktype and color inputs), and Tiered Items (tier value for newer client versions).
    *   For **Creatures**: Edits spawn interval and facing direction.
    *   For **Spawns**: Edits spawn radius.
2.  **'PropertiesWindow'** (newer, also modal): Provides a tabbed interface specifically for **Items**:
    *   *'Simple'* Tab: Displays Item ID, Name (read-only), and allows editing ActionID, UniqueID.
    *   *'Contents'* Tab: For container items, displays items in a grid of 'ContainerItemButton's. Allows adding (via item finder), editing (opens new properties dialog for the contained item), or removing items from the container via a context menu ('ContainerItemPopupMenu').
    *   *'Advanced'* Tab: A 'wxGrid' for managing arbitrary key-value attributes (String, Number, Float, Boolean types) for an item, with type selection per attribute.
Both: dialogs operate on copies of the game objects, and changes are applied upon clicking &quot;OK&quot;.
</current_functionality_summary>
  <definition_of_done>
    <element>A Qt6 'ItemPropertiesDialogQt' (subclass of 'QDialog') is implemented, using a 'QTabWidget' for 'General', 'Contents', and 'Advanced Attributes' sections, serving as the primary dialog for item editing.</element>
    <element>'ItemPropertiesDialogQt' - 'General' Tab: Displays read-only Item ID and Name (from 'mapcore::ItemType'). Provides 'QSpinBox' controls for Action ID and Unique ID. Dynamically populates additional controls within a dedicated area of this tab based on the 'mapcore::ItemType' of the item being edited, covering functionalities from 'OldPropertiesWindow' for specific item types: Stackables/Fluids/Charges ('QSpinBox' for count/subtype, 'QComboBox' for liquid type), Writeables ('QTextEdit' for text content), Depots ('QComboBox' for Town ID populated from 'TownManager'), Doors ('QSpinBox' for Door ID conditionally enabled if on a house tile), Teleports ('QSpinBox'es for Destination X, Y, Z), Podiums ('QComboBox' for Direction; 'QCheckBox'es for Show Outfit/Mount/Platform; multiple 'QSpinBox'es for LookType, Head, Body, Legs, Feet, Addons, LookMount, and mount color components), and Tiered Items ('QSpinBox' for Tier).</element>
    <element>'ItemPropertiesDialogQt' - 'Contents' Tab (for Container Items): Visible and enabled only if the edited item is a 'mapcore::Container'. Displays contained items in a grid view (e.g., 'QListView' in 'IconMode' using a custom model, or a custom grid of 'QPushButton'-like widgets displaying item sprites). Each cell represents a container slot. A context menu ('QMenu') on container slots/items allows 'Add Item...' (opens 'ItemFinderDialogQt'), 'Edit Item Properties...' (opens a new 'ItemPropertiesDialogQt' for a copy of the selected contained item), and 'Remove Item'.</element>
    <element>'ItemPropertiesDialogQt' - 'Advanced Attributes' Tab: A 'QTableWidget' (columns: Key, Type, Value) allows viewing, adding, removing, and editing custom key-value attributes stored on the 'mapcore::Item'. The 'Type' column uses a 'QComboBox' (String, Integer, Float, Boolean). The 'Value' cell uses an appropriate editor widget ('QLineEdit', 'QSpinBox', 'QDoubleSpinBox', 'QCheckBox') based on the selected type, potentially using 'QTableWidget::setCellWidget' or a 'QStyledItemDelegate'.</element>
    <element>Separate, simpler 'QDialog' subclasses are created for non-item objects: 'CreaturePropertiesDialogQt' (Edits a creature's spawn interval using 'QSpinBox' and direction using 'QComboBox' for North, East, South, West, etc.) and 'SpawnPropertiesDialogQt' (Edits a spawn's radius using 'QSpinBox').</element>
    <element>All dialogs correctly load properties from the passed-in (copied) 'mapcore::Item', 'mapcore::Creature', or 'mapcore::SpawnProperties' object when shown.</element>
    <element>On 'OK' click, dialogs validate input and apply changes back to the *copied* object. The calling code (e.g., 'EditorController') is responsible for creating an undo action with this modified copy and applying it to the actual map data.</element>
    <element>Input validation is performed for relevant fields (e.g., numeric ranges, string lengths).</element>
    <element>Dialogs are modal, matching the original behavior.</element>
    <element>All UI elements have 'objectName' properties for testability.</element>
  </definition_of_done>
  <estimation_effort>
    <element>Very High (30-40 developer days). The 'ItemPropertiesDialogQt' is highly complex due to its dynamic 'General' tab needing to replicate many specific UIs from 'OldPropertiesWindow', plus the 'Contents' tab with its item grid and context menus, and the 'Advanced Attributes' tab with its typed editors. The separate Creature and Spawn dialogs are simpler but add to the total. Ensuring data is correctly loaded and saved back to item copies for undo integration is key.</element>
  </estimation_effort>
  <known_missing_files/>
  <boilerplate_coder_ai_prompt>Your task is to port item, creature, and spawn properties editing dialogs from wxWidgets to Qt6. The main item dialog should be tabbed. These dialogs will edit copies of game objects, with the caller handling undo actions.
I. 'ItemPropertiesDialogQt' (Main Dialog, inherits 'QDialog'): *   Constructor: 'ItemPropertiesDialogQt(QWidget* parent, const mapcore::Map* map, const mapcore::Tile* tileContext, mapcore::Item* itemCopy);' (Store 'itemCopy' to modify, 'map' and 'tileContext' for context like house tile status or town lists). *   Use a 'QTabWidget'. Add 'QDialogButtonBox' (OK, Cancel).
1. 'General' Tab ('QWidget'):
    - Layout: 'QFormLayout' or 'QGridLayout'.
    - Read-only: 'QLabel' for Item ID, Item Name (populated from 'itemCopy-&gt;getItemType()').
    - Editable: 'QSpinBox* m_actionIdSpin;', 'QSpinBox* m_uniqueIdSpin;' (ranges 0-65535, with 0 meaning not set; UIDs 1-999 might be reserved or invalid).
    - Dynamic Section ('QWidget* m_typeSpecificWidgetArea' with 'QVBoxLayout* m_typeSpecificLayout'):
        - In 'ItemPropertiesDialogQt' constructor, populate this area based on 'itemCopy-&gt;getItemType()':
            - If stackable/fluid/charges: Add 'QLabel(&quot;Count/Subtype:&quot;)', 'QSpinBox m_countSpin;' (appropriate range based on item type).
            - If fluid container or splash: Add 'QLabel(&quot;Liquid Type:&quot;)', 'QComboBox m_liquidTypeCombo;' (populate with known liquid types like &quot;None&quot;, &quot;Water&quot;, &quot;Blood&quot;, etc., storing corresponding integer values).
            - If writeable (book, letter): Add 'QLabel(&quot;Text:&quot;)', 'QTextEdit m_textEdit;' (set max length if applicable from 'ItemType').
            - If depot: Add 'QLabel(&quot;Depot Town:&quot;)', 'QComboBox m_depotTownCombo;' (populate from 'map-&gt;getTownManager()-&gt;getTowns()', store town IDs).
            - If door: Add 'QLabel(&quot;Door ID:&quot;)', 'QSpinBox m_doorIdSpin;' (conditionally enable if 'tileContext' is a house tile).
            - If teleport: Add 'QLabel's and 'QSpinBox'es for &quot;Dest X&quot;, &quot;Dest Y&quot;, &quot;Dest Z&quot; ('m_destXSpin', 'm_destYSpin', 'm_destZSpin').
            - If podium: Add 'QLabel(&quot;Direction:&quot;)', 'QComboBox m_podiumDirectionCombo;'. Add 'QCheckBox'es: 'm_showOutfitCheck', 'm_showMountCheck', 'm_showPlatformCheck'. Add 'QLabel's and 'QSpinBox'es for Outfit (LookType, Head, Body, Legs, Feet, Addons) and Mount (LookMount, Head, Body, Legs, Feet colors). Max color value typically 132 or 133. Addon range 0-3.
            - If tiered item: Add 'QLabel(&quot;Tier:&quot;)', 'QSpinBox m_tierSpin;' (range 0-255).
        - Populate these dynamic controls from 'itemCopy`'s current values.

2. 'Contents' Tab ('QWidget' - Visible and enabled only for Container Items):
    - Layout: 'QVBoxLayout'.
    - 'QListView* m_contentsView;' Set 'setViewMode(QListView::IconMode)' and 'setMovement(QListView::SnapGrid)' and 'setFlow(QListView::LeftToRight)'.
    - 'QStandardItemModel* m_contentsModel;' Each 'QStandardItem' should display the item sprite ('setIcon') and count if &gt;1 ('setText'). Store a *copy* of the 'mapcore::Item' in the 'QStandardItem' using 'setData(QVariant::fromValue(itemCopyPtr), Qt::UserRole)'.
    - Buttons: 'QPushButton m_addItemButton;', 'QPushButton m_editItemButton;', 'QPushButton m_removeItemButton;'.
    - Implement context menu on 'm_contentsView' with &quot;Add Item...&quot;, &quot;Edit Item Properties...&quot;, &quot;Remove Item&quot;.
    - Logic:
        - 'onAddItem()': Open 'ItemFinderDialogQt' (from 'UI-11'). If an item is selected, create a copy, add to 'm_itemCopy' (the container being edited), and update 'm_contentsModel'.
        - 'onEditItem()': For selected item in 'm_contentsView', get its stored 'mapcore::Item*' copy. Create another copy for editing. Open a new 'ItemPropertiesDialogQt' for this sub-item copy. If dialog is accepted, replace the item in 'm_itemCopy`'s contents with the edited sub-item copy and refresh 'm_contentsModel'.
        - 'onRemoveItem()': Remove selected item from 'm_itemCopy`'s contents and 'm_contentsModel'.

3. 'Advanced Attributes' Tab ('QWidget'):
    - Layout: 'QVBoxLayout'.
    - 'QTableWidget* m_attributesTable;' (Columns: &quot;Key&quot; (QString), &quot;Type&quot; (QComboBox: String, Integer, Float, Boolean), &quot;Value&quot; (variant)).
    - 'QPushButton m_addAttributeButton, m_removeAttributeButton;'.
    - Logic:
        - Populate table from 'itemCopy-&gt;getAttributes()'. For each attribute, set Key, select Type in QComboBox, set Value.
        - 'onAddAttribute()': Add new row. &quot;Key&quot; is editable 'QLineEdit'. &quot;Type&quot; is 'QComboBox'. &quot;Value&quot; cell editor changes based on &quot;Type&quot; selection.
        - When &quot;Type&quot; 'QComboBox' in a row changes, update the editor for the &quot;Value&quot; cell (e.g., 'QLineEdit' for String, 'QSpinBox' for Integer, 'QDoubleSpinBox' for Float, 'QCheckBox' for Boolean). This can be done using 'QTableWidget::setCellWidget' or a custom 'QStyledItemDelegate'.

4. Dialog Logic (ItemPropertiesDialogQt):
    - 'void loadData()': Called in constructor. Populate all controls on all tabs from 'm_itemCopy'. Disable 'Contents' tab if not a container.
    - 'void applyChanges()': Called internally when OK is clicked. Validate all inputs. Update 'm_itemCopy' with values from all controls, including parsing the 'Advanced Attributes' table and updating 'm_itemCopy-&gt;getAttributes()'.
    - Connect 'QDialogButtonBox::accepted' to a slot that calls 'applyChanges()' then 'accept()'.

II. 'CreaturePropertiesDialogQt(QWidget* parent, mapcore::Creature* creatureCopy)' (inherits 'QDialog'): *   UI: 'QFormLayout'. 'QLabel' for Name (read-only from 'creatureCopy-&gt;getType()-&gt;getName()'). 'QSpinBox m_spawnIntervalSpin;' (Spawn Interval in seconds). 'QComboBox m_directionCombo;' (N, E, S, W, NE, NW, SE, SW). 'QDialogButtonBox'. *   Logic: Load data from 'creatureCopy' into controls. On OK, validate and update 'creatureCopy-&gt;setSpawnTime()' and 'creatureCopy-&gt;setDirection()'.
III. 'SpawnPropertiesDialogQt(QWidget* parent, mapcore::SpawnProperties* spawnPropsCopy)' (inherits 'QDialog'): *   UI: 'QFormLayout'. 'QSpinBox m_spawnRadiusSpin;'. 'QDialogButtonBox'. *   Logic: Load data from 'spawnPropsCopy-&gt;getSize()'. On OK, validate and update 'spawnPropsCopy-&gt;setSize()'.
Ensure all dialogs are modal. The caller (e.g., an 'EditorController') will handle creating copies of game objects, showing the dialog, and if 'exec() == QDialog::Accepted', creating and pushing an undo action with the modified copy.
</boilerplate_coder_ai_prompt>
</UI-04>
