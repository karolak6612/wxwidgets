import yaml

# Custom representer for multiline strings
def str_presenter(dumper, data):
    if len(data.splitlines()) > 1:  # check for multiline
        return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
    return dumper.represent_scalar('tag:yaml.org,2002:str', data)

yaml.add_representer(str, str_presenter)

yaml_content = {
    "id": "BUILD-01",
    "section": "Build, Deployment, & Documentation",
    "title": "Finalize CMake Build System",
    "original_input_files": "`CMakeLists.txt` from `FINAL-02`",
    "analyzed_input_files": [
        "CMakeLists.txt (output of FINAL-02)"
    ],
    "dependencies": [
        "FINAL-02"
    ],
    "current_functionality_summary": """\
This task does not analyze existing wxWidgets source code. It focuses on enhancing the `CMakeLists.txt` file that will be created by task `FINAL-02`. The goal is to make the build system production-ready.\
""",
    "qt6_migration_steps": """\
1. Review the `CMakeLists.txt` generated by task `FINAL-02`.
2. Implement robust Qt6 detection using `find_package(Qt6 REQUIRED Widgets Gui OpenGL)`. Ensure it handles various Qt6 installation paths.
3. Add `find_package(ZLIB REQUIRED)` if zlib is to be linked directly (and not just via Qt).
4. Define platform-specific blocks (e.g., using `if(WIN32)`, `if(APPLE)`, `if(UNIX AND NOT APPLE)`) for compiler flags (e.g., C++17 standard, warnings) and linker flags.
5. For macOS and Linux, set `CMAKE_INSTALL_RPATH` and `CMAKE_BUILD_WITH_INSTALL_RPATH` appropriately. Use `$ORIGIN` or `@executable_path` relative paths for libraries to ensure portability after installation. Consider `CMAKE_INSTALL_RPATH_USE_LINK_PATH`.
6. Define standard CMake build configurations: `Debug`, `Release`, `RelWithDebInfo`, and `MinSizeRel`. Set appropriate compiler and linker flags for each (e.g., `-O3 -DNDEBUG` for Release, `-g` for Debug).
7. Ensure all executable and library targets are correctly defined, linking against Qt6::Widgets, Qt6::Gui, Qt6::OpenGL, and other necessary libraries.
8. Verify that the CMake system can generate build files (e.g., Makefiles or Ninja files) successfully on target platforms.\
""",
    "definition_of_done": """\
The root CMake build system, building upon the output of FINAL-02, is finalized and production-ready.
Key requirements:
- Successfully finds and links Qt6 (Widgets, Gui, OpenGL components) and zlib using `find_package`.
- Implements platform-specific configurations for Windows, macOS, and Linux, including compiler and linker flags.
- Correctly configures RPATH settings for macOS and Linux to ensure the application can locate dependencies after installation.
- Defines standard build configurations (Debug, Release, RelWithDebInfo, MinSizeRel) with appropriate flags.
- The CMake configuration is well-commented and organized.
- Successfully generates build files for target platforms without errors or warnings.\
""",
    "boilerplate_coder_ai_prompt": """\
You are given a foundational `CMakeLists.txt` (produced by task FINAL-02). Your task is to enhance it to be production-ready.
1. Ensure Qt6 (Widgets, Gui, OpenGL) and ZLIB are found using `find_package` correctly.
2. Add platform-specific logic for compiler flags (ensure C++17) and linker settings for Windows, macOS, and Linux.
3. Implement RPATH handling for macOS/Linux (e.g., using `CMAKE_INSTALL_RPATH` with `@executable_path` or `$ORIGIN`).
4. Define `Debug`, `Release`, `RelWithDebInfo`, `MinSizeRel` build configurations with suitable flags.
5. Review and confirm all target definitions and linking.
6. Ensure the script is clean, well-commented, and generates build files successfully across platforms.\
"""
}

output_file_path = "enhanced_wbs_yaml_files/BUILD-01.yaml"

with open(output_file_path, 'w') as f:
    yaml.dump(yaml_content, f, sort_keys=False, width=1000)

print(f"Generated {output_file_path}")
