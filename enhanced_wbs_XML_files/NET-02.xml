<?xml version="1.0" ?>
<NET-02>
  <id>NET-02</id>
  <section>Network Integration</section>
  <title>Port Live Collaboration Server Logic to Qt Network</title>
  <original_task_id>NET-02</original_task_id>
  <original_input_files>
    <original_input_file>wxwidgets/live_server.h</original_input_file>
    <original_input_file>wxwidgets/live_server.cpp</original_input_file>
    <original_input_file>wxwidgets/live_peer.h</original_input_file>
    <original_input_file>wxwidgets/live_peer.cpp</original_input_file>
  </original_input_files>
  <dependencies>
    <dependencie>NET-01</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-03</dependencie>
    <dependencie>CORE-05</dependencie>
    <dependencie>BUILD-01</dependencie>
  </dependencies>
  <analyzed_input_files>
    <analyzed_input_file>
      <filepath>wxwidgets/live_server.h</filepath>
      <description>Declares the 'LiveServer' class, which inherits from 'LiveSocket'. It manages multiple client connections ('LivePeer' objects). Contains a Boost.Asio 'tcp::acceptor' for listening to incoming connections and a 'tcp::socket' for the accepted connection. Declares methods for binding the server, closing connections, accepting clients, removing clients, broadcasting various types of data (nodes, chat, cursors, operations), and managing client IDs and colors. It holds a pointer to the main 'Editor' object to access map data and the action queue.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/live_server.cpp</filepath>
      <description>Implements the 'LiveServer' class. The 'bind' method sets up the Boost.Asio acceptor to listen on a specified port (with retry logic for port conflicts). 'acceptClient' asynchronously waits for new connections. When a connection is made, a new 'LivePeer' object is created to handle it. Implements broadcasting functions that iterate through connected 'LivePeer's and send them 'NetworkMessage's. Manages a simple client ID assignment system. Interacts with 'LiveLogTab' for UI logging.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/live_peer.h</filepath>
      <description>Declares the 'LivePeer' class, inheriting from 'LiveSocket'. Represents a server-side connection to a single client. Manages a Boost.Asio 'tcp::socket' for communication with that client. Declares methods for receiving packet headers and bodies asynchronously, parsing login and editor packets, and sending data. Holds a reference to the 'LiveServer' and client-specific data like ID and color.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/live_peer.cpp</filepath>
      <description>Implements the 'LivePeer' class. The constructor initializes the socket. 'receiveHeader' and 'receive' implement asynchronous read operations using 'boost::asio::async_read'. Packet parsing logic is divided into 'parseLoginPacket' (handling 'PACKET_HELLO_FROM_CLIENT', 'PACKET_READY_CLIENT') and 'parseEditorPacket' (handling various data change, cursor, and chat packets). Parsed changes are often applied to the map via the 'Editor`'s 'ActionQueue' (obtained through the 'LiveServer' reference). Uses 'NetworkMessage' for interpreting received data and constructing outgoing packets. Handles connection errors and client disconnection.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <current_functionality_summary>The existing live collaboration server logic is implemented within 'LiveServer' and 'LivePeer' classes, utilizing Boost.Asio for network communication.
- **'LiveServer'**:
  - Initializes a Boost.Asio 'tcp::acceptor' to listen for incoming client connections on a specified port.
  - Manages a collection of connected 'LivePeer' objects, one for each client.
  - Assigns unique IDs to clients.
  - Holds a reference to the 'Editor' instance to access the authoritative map data and its 'ActionQueue'.
  - Broadcasts map changes (dirty nodes), cursor updates, chat messages, and client color changes to all relevant 'LivePeer's.
  - Can also broadcast operation status (start/update) for long tasks.
- **'LivePeer'**:
  - Represents an individual client connection on the server side, holding a 'tcp::socket'.
  - Asynchronously reads data from the client socket, first a header (packet size) then the packet body.
  - Parses incoming 'NetworkMessage's based on 'LivePacketType'.
    - Login sequence: Handles client hello (version checks, password validation) and client ready messages.
    - Editor packets: Processes requests for map nodes, lists of changes from clients, cursor updates, and chat messages.
  - Applies received map changes to the server's authoritative map by creating and adding 'Action's to the 'Editor`'s 'ActionQueue'. This ensures changes are undoable on the server and correctly sequenced.
  - Sends 'NetworkMessage's (e.g., map data, chat, other client cursors) back to its specific client.
  - Handles client disconnection and network errors.
The: communication uses 'NetworkMessage' objects (defined in 'net_connection.h/cpp' and processed by 'NET-01') for serializing and deserializing data according to the defined packet types and OTBM-like map data structures.
</current_functionality_summary>
  <refactoring_suggestions>- **Server as Standalone Application:** The current 'LiveServer' is part of the editor application. The Qt 6 version should be a separate, headless console application. This improves separation of concerns and deployment flexibility.
- **Map Ownership:** In the Qt 6 server, the 'QtLiveServer' class itself should own the authoritative 'mapcore::Map' instance and its associated 'mapcore::ActionQueue', rather than relying on an 'Editor' object.
- **Thread Safety:** If the standalone server intends to use multiple threads for handling clients or other tasks (beyond Qt's own event loop and socket handling threads), careful attention to thread safety for map access and action queue operations will be needed. 'QMutex' or other Qt synchronization primitives should be used.
- **Configuration:** The server will need a configuration mechanism (e.g., command-line arguments, config file using 'QSettings') for port, map file path, passwords, etc.
- **Error Handling and Logging:** Robust error handling and logging are crucial for a server application. Qt's logging framework ('qDebug', 'qWarning', 'qCritical') should be used.
- **Scalability:** While not an immediate porting concern, for higher scalability, one might consider a thread-per-peer model or a more advanced asynchronous processing pipeline if Qt's default signal/slot based socket handling proves insufficient for many concurrent users. (For this WBS, standard Qt socket handling is fine).
</refactoring_suggestions>
  <qt6_migration_steps>
    <qt6_migration_step>1. Create New Qt Console Application Project ('RMELiveServer'): Set up a new CMake project for a headless Qt application. Link this project against the 'mapcore' static library (from 'BUILD-01', which includes 'NET-01's protocol logic).</qt6_migration_step>
    <qt6_migration_step>2. Implement 'QtLiveServer' Class (e.g., inherits 'QObject'): Members include 'QTcpServer* m_tcpServer;', 'QList&lt;QtLivePeer*&gt; m_peers;', 'mapcore::Map m_mapInstance;' (Owns the authoritative map), 'mapcore::ActionQueue m_actionQueueInstance;' (Initialized with 'm_mapInstance'), and potentially a password string, server name. 'bool startServer(quint16 port, const QString&amp; mapFilePath)' Method: Load the map specified by 'mapFilePath' into 'm_mapInstance' using 'mapcore's 'IOMapOTBM'. Handle errors. Initialize 'm_tcpServer = new QTcpServer(this);'. Connect 'm_tcpServer-&gt;newConnection()' signal to 'this-&gt;onNewConnection()' slot. Call 'm_tcpServer-&gt;listen(QHostAddress::Any, port)'. Log success or failure. Slot 'void onNewConnection()': 'QTcpSocket* clientSocket = m_tcpServer-&gt;nextPendingConnection();' Create 'QtLivePeer* newPeer = new QtLivePeer(this, clientSocket, &amp;m_mapInstance, &amp;m_actionQueueInstance);'. Add 'newPeer' to 'm_peers'. Connect 'newPeer-&gt;disconnected()' signal to 'this-&gt;onPeerDisconnected(QtLivePeer*)' slot (custom signal from peer). Connect 'newPeer-&gt;errorOccurred()' signal to a suitable error handling slot. Slot 'void onPeerDisconnected(QtLivePeer* peer)': (This signal would be emitted by 'QtLivePeer') Remove 'peer' from 'm_peers'. 'peer-&gt;deleteLater();' Update any shared state or notify other peers if necessary. Broadcast Methods (e.g., 'broadcastMessageToAll(const NetworkMessage&amp; msg, QtLivePeer* excludePeer = nullptr)'): Iterate 'm_peers'; for each peer (not 'excludePeer'), call 'peer-&gt;sendPacket(msg)'. Port logic from 'LiveServer::broadcastNodes', 'broadcastChat', 'broadcastCursor', etc., to use these new methods and 'MapProtocolCodec' from 'NET-01'.</qt6_migration_step>
    <qt6_migration_step>3. Implement 'QtLivePeer' Class (e.g., inherits 'QObject'): Members: 'QTcpSocket* m_socket;' 'QtLiveServer* m_server;' (Reference to parent server) 'mapcore::Map* m_mapRef;' (Pointer to 'QtLiveServer's map) 'mapcore::ActionQueue* m_actionQueueRef;' (Pointer to 'QtLiveServer's action queue) 'QByteArray m_receiveBuffer;' (To accumulate incoming data) 'mapcore::NetworkColor m_clientColor;' 'QString m_clientName;' 'uint32_t m_clientId;' // Server-assigned unique ID for this peer 'bool m_isAuthenticated;' Constructor 'QtLivePeer(QtLiveServer* server, QTcpSocket* socket, mapcore::Map* map, mapcore::ActionQueue* aq)': Store references. 'm_socket-&gt;setParent(this);' (for QObject ownership if socket passed as raw pointer) Connect 'm_socket-&gt;readyRead()' to 'this-&gt;onReadyRead()'. Connect 'm_socket-&gt;disconnected()' to 'this-&gt;onSocketDisconnected()'. Connect 'm_socket-&gt;errorOccurred(QAbstractSocket::SocketError)' to 'this-&gt;onSocketError(QAbstractSocket::SocketError)'. Slot 'void onReadyRead()': 'm_receiveBuffer.append(m_socket-&gt;readAll());' Loop while 'm_receiveBuffer' potentially contains a complete packet: Check if 'm_receiveBuffer.size()' &gt;= 4 (for packet length field). If not, break. Read the 4-byte packet length ('expectedSize') from the start of 'm_receiveBuffer' (using 'QDataStream' or 'memcpy'). Check if 'm_receiveBuffer.size()' &gt;= (4 + 'expectedSize'). If not, break (incomplete packet). Extract the packet data (size 'expectedSize') into a 'mapcore::NetworkMessage' (from 'NET-01'). Remove the full packet (4 + 'expectedSize' bytes) from 'm_receiveBuffer'. Call 'parsePacket(networkMessage);'. 'void parsePacket(mapcore::NetworkMessage&amp; msg)': Read packet type ('LivePacketType') from 'msg'. If not 'm_isAuthenticated', call 'handleLoginPacket(type, msg)'. Else, call 'handleEditorPacket(type, msg)'. 'handleLoginPacket(...)', 'handleEditorPacket(...)': Port logic from 'LivePeer::parseLoginPacket' and 'LivePeer::parseEditorPacket' and their sub-handlers ('parseHello', 'parseReady', 'parseNodeRequest', 'parseReceiveChanges', etc.). Use 'MapProtocolCodec' (from 'NET-01') for deserializing data from 'NetworkMessage'. Client-initiated map changes should be validated and then applied via 'm_actionQueueRef-&gt;addAction(...)'. The resulting changes (if any applied) are then typically broadcast by 'm_server'. 'void sendPacket(const mapcore::NetworkMessage&amp; msg)': Create a 'QByteArray buffer;'. Create 'QDataStream stream(&amp;buffer, QIODevice::WriteOnly);'. 'stream &lt;&lt; static_cast&lt;quint32&gt;(msg.size);' (Write 4-byte length prefix). 'buffer.append(reinterpret_cast&lt;const char*&gt;(msg.buffer.data()), msg.buffer.size());' (Append actual message data). 'm_socket-&gt;write(buffer);' Slot 'void onSocketDisconnected()': Emit a custom signal 'disconnected(this)' for 'QtLiveServer' to handle cleanup. Slot 'void onSocketError(QAbstractSocket::SocketError error)': Log error, potentially emit 'disconnected(this)'.</qt6_migration_step>
    <qt6_migration_step>4. Implement 'main.cpp' for 'RMELiveServer': Create 'QCoreApplication app(argc, argv);'. Set application name/organization. Parse command-line arguments for port, map file path, password (optional). Instantiate 'QtLiveServer serverInstance;'. Call 'serverInstance.startServer(port, mapFilePath)'. Handle failure. 'return app.exec();'</qt6_migration_step>
  </qt6_migration_steps>
  <definition_of_done>
    <element>A standalone, headless server application ('RMELiveServer') is created using Qt Core ('QCoreApplication').</element>
    <element>The server application uses 'QTcpServer' to listen for incoming connections and 'QTcpSocket' (managed by 'QtLivePeer' instances) for client communication.</element>
    <element>The server can accept and manage connections from multiple clients.</element>
    <element>It correctly uses the 'NetworkMessage' and 'MapProtocolCodec' from 'mapcore::network' ('NET-01') for all data serialization and deserialization.</element>
    <element>The server accurately parses messages from clients (login, map change requests, cursor updates, chat) and handles them according to the defined protocol.</element>
    <element>The server can broadcast messages (map data updates, chat, cursors) to connected clients using the 'MapProtocolCodec'.</element>
    <element>The server loads the authoritative map from an OTBM file at startup using 'mapcore's I/O capabilities and holds this 'mapcore::Map' instance.</element>
    <element>Client-initiated map changes are processed through a 'mapcore::ActionQueue' on the server, and resulting changes are broadcast to other clients.</element>
    <element>Basic error handling for network events (disconnections, socket errors) is implemented.</element>
    <element>The server application compiles cleanly and runs as a headless console application, establishing the foundation for live collaboration.</element>
  </definition_of_done>
  <estimation_effort>
    <element>High (20-25 developer days). This involves creating a new standalone server application from scratch, including setting up its project structure, command-line argument parsing, and map loading. Porting the connection management from Boost.Asio to Qt Network ('QTcpServer', 'QTcpSocket'), correctly handling asynchronous data streams for multiple clients, and integrating the 'ActionQueue' for server-side change application are complex tasks. Ensuring robust error handling and client management in a headless application also adds to the effort.</element>
  </estimation_effort>
  <known_missing_files/>
  <boilerplate_coder_ai_prompt>You are tasked with porting the live collaboration server logic from a wxWidgets/Boost.Asio based system to a new, standalone Qt 6 Console Application named 'RMELiveServer'. This server will be headless and will utilize the 'mapcore' static library (which includes the network protocol and serialization logic from 'NET-01').

**I. Project Setup ('RMELiveServer' - New Qt Console Application):**
1.  Ensure your 'CMakeLists.txt' links against 'Qt6::Core' and the 'mapcore' library.
2.  The server must be a headless application using 'QCoreApplication'.

**II. 'QtLiveServer' Class (inherits 'QObject'):**
*   **Header ('qtliveserver.h'):**
    ```cpp
    #include &lt;QObject&gt;
    #include &lt;QTcpServer&gt;
    #include &lt;QList&gt;
    #include &quot;mapcore/map.h&quot;        // Assuming map.h is in mapcore includes
    #include &quot;mapcore/actionqueue.h&quot; // Assuming actionqueue.h is in mapcore includes
    #include &quot;mapcore/network/live_packets.h&quot; // From NET-01
    #include &quot;mapcore/network/network_message.h&quot; // From NET-01

    class QtLivePeer; // Forward declaration

    class QtLiveServer : public QObject {
        Q_OBJECT
    public:
        explicit QtLiveServer(QObject *parent = nullptr);
        ~QtLiveServer();

        bool startServer(quint16 port, const QString&amp; mapFilePath, const QString&amp; serverPassword = &quot;&quot;);
        void broadcastMessageToAll(const mapcore::NetworkMessage&amp; msg, QtLivePeer* excludePeer = nullptr);
        void broadcastMapChange(const mapcore::NetworkMessage&amp; msg, QtLivePeer* excludePeer = nullptr); // Specific for map changes
        // Add methods for broadcasting specific events like cursor updates, chat, etc.

        mapcore::Map* getMap() { return &amp;m_mapInstance; }
        mapcore::ActionQueue* getActionQueue() { return &amp;m_actionQueueInstance; }
        QString getPassword() const { return m_serverPassword; }
        QString getServerName() const { return m_serverName; } // Could be configurable

    private slots:
        void onNewConnection();
        void onPeerDisconnected(QtLivePeer* peer); // Custom signal from QtLivePeer

    private:
        QTcpServer* m_tcpServer;
        QList&lt;QtLivePeer*&gt; m_peers;
        mapcore::Map m_mapInstance;
        mapcore::ActionQueue m_actionQueueInstance;
        QString m_serverPassword;
        QString m_serverName; // e.g., &quot;RME Live Server&quot;
        uint32_t m_nextPeerId; // To assign unique IDs to peers
    };
    ```
*   **Source ('qtliveserver.cpp'):**
    - Implement the constructor: initialize 'm_actionQueueInstance' with 'm_mapInstance'. 'm_nextPeerId = 1;' (0 could be reserved for server/host).
    - Implement 'startServer()':
        - Load the map using 'mapcore::IOMapOTBM' and 'm_mapInstance.open()'. Handle failure.
        - 'm_tcpServer = new QTcpServer(this);'
        - 'connect(m_tcpServer, &amp;QTcpServer::newConnection, this, &amp;QtLiveServer::onNewConnection);'
        - 'if (!m_tcpServer-&gt;listen(QHostAddress::Any, port)) { /* log error, return false */ }'
        - Store 'serverPassword'.
    - Implement 'onNewConnection()':
        - 'QTcpSocket* clientSocket = m_tcpServer-&gt;nextPendingConnection();'
        - 'QtLivePeer* newPeer = new QtLivePeer(this, clientSocket, &amp;m_mapInstance, &amp;m_actionQueueInstance, m_nextPeerId++);'
        - Add to 'm_peers'.
        - 'connect(newPeer, &amp;QtLivePeer::peerDisconnected, this, &amp;QtLiveServer::onPeerDisconnected);' // Custom signal
    - Implement 'onPeerDisconnected()': Remove from 'm_peers', 'peer-&gt;deleteLater();'.
    - Implement broadcast methods: Iterate 'm_peers' and call 'peer-&gt;sendPacket(msg)'.

**III. 'QtLivePeer' Class (inherits 'QObject'):**
*   **Header ('qtlivepeer.h'):**
    ```cpp
    #include &lt;QObject&gt;
    #include &lt;QTcpSocket&gt;
    #include &lt;QByteArray&gt;
    #include &quot;mapcore/network/live_packets.h&quot;
    #include &quot;mapcore/network/network_message.h&quot;
    #include &quot;mapcore/network/map_protocol_codec.h&quot; // From NET-01
    #include &quot;mapcore/position.h&quot; // For LiveCursor if it uses Position

    class QtLiveServer; // Forward declaration
    namespace mapcore { class Map; class ActionQueue; } // Forward declarations

    class QtLivePeer : public QObject {
        Q_OBJECT
    public:
        explicit QtLivePeer(QtLiveServer* server, QTcpSocket* socket, mapcore::Map* mapRef, mapcore::ActionQueue* aqRef, uint32_t peerId, QObject *parent = nullptr);
        ~QtLivePeer();

        void sendPacket(const mapcore::NetworkMessage&amp; msg);
        uint32_t getPeerId() const { return m_peerId; }
        QString getClientName() const { return m_clientName; }
        mapcore::NetworkColor getClientColor() const { return m_clientColor; }


    signals:
        void peerDisconnected(QtLivePeer* peer); // Custom signal

    private slots:
        void onReadyRead();
        void onSocketDisconnected();
        void onSocketError(QAbstractSocket::SocketError socketError);

    private:
        void processReceivedData();
        void handleLoginPacket(LivePacketType packetType, mapcore::NetworkMessage&amp; msg);
        void handleEditorPacket(LivePacketType packetType, mapcore::NetworkMessage&amp; msg);
        // Ported packet parsing logic from original LivePeer
        void parseClientHello(mapcore::NetworkMessage&amp; msg);
        void parseClientReady(mapcore::NetworkMessage&amp; msg);
        void parseNodeRequest(mapcore::NetworkMessage&amp; msg);
        void parseChangesReceived(mapcore::NetworkMessage&amp; msg);
        void parseCursorUpdate(mapcore::NetworkMessage&amp; msg);
        void parseChatMessage(mapcore::NetworkMessage&amp; msg);
        void parseClientColorUpdate(mapcore::NetworkMessage&amp; msg);


        QTcpSocket* m_socket;
        QtLiveServer* m_server; // Parent server
        mapcore::Map* m_mapRef;
        mapcore::ActionQueue* m_actionQueueRef;
        QByteArray m_receiveBuffer;
        bool m_isAuthenticated;
        uint32_t m_peerId;
        QString m_clientName;
        mapcore::NetworkColor m_clientColor; // Using the UI-agnostic color struct
        mapcore::MapVersion m_clientMapVersion; // Store client's map version info
    };
    ```
*   **Source ('qtlivepeer.cpp'):**
    - Constructor: Store members, connect socket signals ('readyRead', 'disconnected', 'errorOccurred'). Initialize 'm_isAuthenticated = false;'.
    - 'onSocketDisconnected()': Emit 'peerDisconnected(this)'.
    - 'onSocketError()': Log error, emit 'peerDisconnected(this)'.
    - 'onReadyRead()':
        - 'm_receiveBuffer.append(m_socket-&gt;readAll());'
        - Call 'processReceivedData();'.
    - 'processReceivedData()':
        - Loop:
            - If 'm_receiveBuffer.size() &lt; 4', break (need length).
            - Use 'QDataStream' to read 'quint32 packetSize' from 'm_receiveBuffer'.
            - If 'm_receiveBuffer.size() &lt; 4 + packetSize', break (incomplete packet).
            - Create 'mapcore::NetworkMessage networkMsg;'. Copy 'packetSize' bytes from 'm_receiveBuffer' (after the length prefix) into 'networkMsg.buffer'. Set 'networkMsg.size'.
            - Remove the full packet (4 + 'packetSize') from 'm_receiveBuffer'.
            - 'LivePacketType type = static_cast&lt;LivePacketType&gt;(networkMsg.read&lt;uint8_t&gt;());'
            - If '!m_isAuthenticated', call 'handleLoginPacket(type, networkMsg)'. Else, 'handleEditorPacket(type, networkMsg)'.
    - 'sendPacket()':
        - 'QByteArray sendBuffer; QDataStream stream(&amp;sendBuffer, QIODevice::WriteOnly);'
        - 'stream &lt;&lt; static_cast&lt;quint32&gt;(msg.size);'
        - 'sendBuffer.append(reinterpret_cast&lt;const char*&gt;(msg.buffer.data()), msg.size);'
        - 'm_socket-&gt;write(sendBuffer);'
    - **Packet Handling Methods ('parseClientHello', etc.):**
        - Port the logic from the original 'LivePeer's 'parseHello', 'parseReady', 'parseNodeRequest', 'parseReceiveChanges', etc.
        - Use 'MapProtocolCodec' from 'NET-01' for deserializing data from 'NetworkMessage' (e.g., 'mapcore::Tile* tile = MapProtocolCodec::deserializeTile(msg, *m_mapRef);').
        - For map changes received ('parseChangesReceived'):
            - Create a 'mapcore::NetworkedAction* action = static_cast&lt;mapcore::NetworkedAction*&gt;(m_actionQueueRef-&gt;createAction(ACTION_REMOTE));'
            - 'action-&gt;owner = m_peerId;'
            - Deserialize changes from 'msg' using 'MapProtocolCodec' and add them to 'action'.
            - 'm_actionQueueRef-&gt;addAction(action);'
            - The 'ActionQueue's post-action hook (or 'QtLiveServer' observing the queue) should trigger broadcasting this change to other peers.
        - For requests ('parseNodeRequest'): Use 'MapProtocolCodec::serializeNode(...)' and 'sendPacket()'.
        - For login ('parseClientHello'): Check password against 'm_server-&gt;getPassword()'. Send 'PACKET_KICK' or 'PACKET_HELLO_FROM_SERVER' / 'PACKET_ACCEPTED_CLIENT' using 'MapProtocolCodec' for data like map name, dimensions. Set 'm_isAuthenticated = true;' upon success.

**IV. 'main.cpp' for 'RMELiveServer':**
    ```cpp
    #include &lt;QCoreApplication&gt;
    #include &lt;QCommandLineParser&gt;
    #include &quot;qtliveserver.h&quot; // Your QtLiveServer header
    #include &quot;mapcore/iomap_otbm.h&quot; // For loading map

    int main(int argc, char *argv[]) {
        QCoreApplication app(argc, argv);
        QCoreApplication::setApplicationName(&quot;RMELiveServer&quot;);
        QCoreApplication::setOrganizationName(&quot;RME-QT&quot;); // Or your organization

        QCommandLineParser parser;
        parser.setApplicationDescription(&quot;Remere's Map Editor - Qt Live Server&quot;);
        parser.addHelpOption();
        QCommandLineOption portOption(QStringList() &lt;&lt; &quot;p&quot; &lt;&lt; &quot;port&quot;, &quot;Port to listen on.&quot;, &quot;port&quot;, &quot;7171&quot;); // Default 7171
        QCommandLineOption mapOption(QStringList() &lt;&lt; &quot;m&quot; &lt;&lt; &quot;map&quot;, &quot;Path to the OTBM map file.&quot;, &quot;mapfile&quot;);
        QCommandLineOption passwordOption(QStringList() &lt;&lt; &quot;pw&quot; &lt;&lt; &quot;password&quot;, &quot;Server password (optional).&quot;, &quot;password&quot;);
        parser.addOption(portOption);
        parser.addOption(mapOption);
        parser.addOption(passwordOption);
        parser.process(app);

        if (!parser.isSet(mapOption)) {
            qCritical(&quot;Map file must be specified with --map option.&quot;);
            return 1;
        }
        QString mapFilePath = parser.value(mapOption);
        quint16 port = static_cast&lt;quint16&gt;(parser.value(portOption).toUShort());
        QString password = parser.value(passwordOption);

        QtLiveServer server;
        if (!server.startServer(port, mapFilePath, password)) {
            qCritical(&quot;Failed to start the server.&quot;);
            return 1;
        }
        qInfo(&quot;RMELiveServer started on port %u, serving map: %s&quot;, port, qPrintable(mapFilePath));
        return app.exec();
    }
    ```
This provides a comprehensive structure. Focus on careful porting of the packet handling logic and correct usage of 'MapProtocolCodec' and 'NetworkMessage' from 'NET-01'.
</boilerplate_coder_ai_prompt>
</NET-02>
