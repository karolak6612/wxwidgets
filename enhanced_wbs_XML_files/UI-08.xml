<?xml version="1.0" ?>
<UI-08>
  <id>UI-08</id>
  <section>UI Elements</section>
  <title>Port Spawn Creation Settings and Spawn Properties Editor</title>
  <original_task_id>UI-08</original_task_id>
  <description>Recreate UI components for setting parameters when creating new spawns via the Creature Palette, and implement a new dialog for viewing and editing properties (radius, creature list, respawn time) of existing spawn points on the map.</description>
  <dependencies>
    <dependencie>UI-06</dependencie>
    <dependencie>LOGIC-07</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>REFACTOR-01</dependencie>
    <dependencie>BUILD-01</dependencie>
    <dependencie>LOGIC-01</dependencie>
  </dependencies>
  <input_files>
    <input_file>wxwidgets/palette_creature.cpp</input_file>
    <input_file>wxwidgets/palette_creature.h</input_file>
    <input_file>wxwidgets/old_properties_window.cpp</input_file>
    <input_file>wxwidgets/old_properties_window.h</input_file>
  </input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_creature.h</filepath>
      <description>Declares `CreaturePalettePanel`. For UI-08, the relevant UI elements are `creature_spawntime_spin` (wxSpinCtrl for spawn time in seconds, applies to tile), `spawn_size_spin` (wxSpinCtrl for spawn radius), and `spawn_brush_button` (wxToggleButton to activate spawn placement mode). These controls are used to define parameters when the 'Spawn Brush' mode is active, affecting how new spawns are created when a creature from the palette is placed on the map.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_creature.cpp</filepath>
      <description>Implements `CreaturePalettePanel`. `OnClickSpawnBrushButton` activates the spawn placement mode. `OnChangeSpawnTime` and `OnChangeSpawnSize` handle updates from the spin controls. These values, along with the currently selected creature in the palette, are utilized by `g_gui` (presumably when `g_gui.SelectBrush()` is called or when a brush is applied to the map) to configure the properties of a *newly created* spawn or the tile it's placed on. The selected creature in the palette becomes the initial creature for a new spawn.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/old_properties_window.h</filepath>
      <description>Declares `OldPropertiesWindow`. For UI-08, the key part is the constructor overload `OldPropertiesWindow(wxWindow* parent, const Map* map, const Tile* tile, Spawn* spawn, wxPoint pos)`. This constructor is invoked when properties of an existing spawn object (the visual radius indicator) are to be edited.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/old_properties_window.cpp</filepath>
      <description>Implements `OldPropertiesWindow`. When the constructor is called with a `Spawn*` object (`edit_spawn`), it creates a very simple UI consisting of a `wxSpinCtrl` (named `count_field` in this context) that is used to display and edit the `edit_spawn-&gt;getSize()` (the spawn radius). It does *not* provide UI for editing the list of creatures within an existing spawn, nor for editing the respawn time associated with an existing spawn tile. These attributes are part of the `Tile` itself rather than the `Spawn` object.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <documentation_references>
    <documentation_reference>QDialog: https://doc.qt.io/qt-6/qdialog.html</documentation_reference>
    <documentation_reference>QSpinBox: https://doc.qt.io/qt-6/qspinbox.html</documentation_reference>
    <documentation_reference>QListWidget: https://doc.qt.io/qt-6/qlistwidget.html</documentation_reference>
    <documentation_reference>QPushButton: https://doc.qt.io/qt-6/qpushbutton.html</documentation_reference>
    <documentation_reference>QFormLayout: https://doc.qt.io/qt-6/qformlayout.html</documentation_reference>
    <documentation_reference>QLabel: https://doc.qt.io/qt-6/qlabel.html</documentation_reference>
  </documentation_references>
  <current_functionality_summary>The legacy system handles spawn creation and editing of existing spawn properties as follows:
1.  **Creating New Spawns**:
    *   The `CreaturePalettePanel` (part of the Creature Palette, UI-06) has a &quot;Spawn Brush&quot; mode toggle.
    *   When this mode is active, `wxSpinCtrl` controls within `CreaturePalettePanel` allow the user to set a &quot;Spawntime&quot; (which applies to the tile's specific respawn interval) and a &quot;Size&quot; (the spawn radius).
    *   When a creature is selected from the palette and placed on the map in this mode, a new spawn is effectively created on that tile. The selected creature is added to the tile's internal list of creatures for that spawn point. The tile's `SpawnProperties` are set with the chosen radius, and the tile's specific respawn time is set.
2.  **Editing Existing Spawns**:
    *   If an existing `Spawn` object (the visual radius indicator, typically on the center tile of a spawn area) is selected and its properties are opened, the `OldPropertiesWindow` is displayed.
    *   This dialog *only* allows editing the spawn radius (`Spawn::getSize()`).
    *   It does **not** provide any mechanism to view or edit the list of creatures associated with that spawn point (which is stored on the `Tile` object, e.g., `tile-&gt;creature_spawn_list`).
    *   It also does **not** provide any mechanism to edit the respawn time for that specific spawn point (stored on the `Tile` object, e.g., `tile-&gt;spawn_time_seconds`).
&quot;Group Management&quot; (managing the list of creatures within an existing spawn) is therefore not supported by the legacy properties dialogs for already placed spawns.
</current_functionality_summary>
  <definition_of_done>
    <element>
      <The_existing__Spawn_Time__and__Spawn_Radius__controls_in_the__CreaturePaletteQt___from__UI-06___hosted_in__UI-02__s_palette_system__correctly_configure_parameters_when_the__Place_Spawn_Area__mode_is_active._When_a_creature_brush_is_applied_in_this_mode>
        <element>The target tile's `mapcore::SpawnProperties` are set with the chosen radius.</element>
        <element>The name of the selected creature from the palette is added to the target tile's creature spawn list (e.g., `tile-&gt;addCreatureToSpawnList(creatureName)`).</element>
        <element>The target tile's specific respawn interval is set using the 'Spawn Time' value from the palette (e.g., `tile-&gt;setSpawnTimeSeconds(time)`).</element>
        <element>The `SpawnManager` is notified of the new/updated spawn location if necessary.</element>
      </The_existing__Spawn_Time__and__Spawn_Radius__controls_in_the__CreaturePaletteQt___from__UI-06___hosted_in__UI-02__s_palette_system__correctly_configure_parameters_when_the__Place_Spawn_Area__mode_is_active._When_a_creature_brush_is_applied_in_this_mode>
    </element>
    <element>A new `EditSpawnDialogQt` (subclass of `QDialog`) is implemented for editing properties of an *existing* spawn point (defined by a tile with spawn attributes).</element>
    <element>The `EditSpawnDialogQt` is invokable (e.g., via a map context menu when a tile with spawn properties is selected).</element>
    <element>
      <The__EditSpawnDialogQt__allows_viewing_and_modifying>
        <element>The spawn radius (`QSpinBox`), which will update the `mapcore::SpawnProperties` associated with the tile.</element>
        <element>The list of creature names within the spawn (`QListWidget` with Add/Remove `QPushButton`s). The 'Add' button uses a creature selection dialog (e.g., `CreatureFinderDialogQt` from `UI-06`, or a new generic one if `UI-06` is too specific). This modifies the tile's creature spawn list data.</element>
        <element>The overall respawn time for that specific spawn point/tile (`QSpinBox`), updating the tile's specific respawn time data.</element>
      </The__EditSpawnDialogQt__allows_viewing_and_modifying>
    </element>
    <element>Changes made in `EditSpawnDialogQt` operate on copies of the relevant data from the `mapcore::Tile`. Upon 'OK', the dialog emits a signal with the modified data (e.g., new radius, new creature list, new respawn time).</element>
    <element>The calling code (e.g., `EditorController` or map context menu handler) connects to this signal and creates an undoable `Action` to apply these changes to the actual `mapcore::Tile` object.</element>
    <element>The `EditSpawnDialogQt` correctly loads the existing spawn properties (radius, creature list, respawn time) from the selected tile's data when opened.</element>
    <element>All UI elements in `EditSpawnDialogQt` have `objectName` properties set for testability.</element>
  </definition_of_done>
  <estimation_effort>Medium (9-13 developer days)</estimation_effort>
  <known_missing_files/>
  <boilerplate_coder_ai_prompt>Your task is to implement the Qt6 UI components for creating and editing creature spawns. This involves:
1. Ensuring spawn parameter controls on the `CreaturePaletteQt` (from `UI-06`) correctly configure new spawns.
2. Creating a new `EditSpawnDialogQt` for editing existing spawn points on map tiles.

**I. `CreaturePaletteQt` Spawn Settings (Refinements for functionality in `UI-06`):**
*   When the &quot;Place Spawn Area&quot; mode is active in `CreaturePaletteQt`:
    *   The existing `QSpinBox* m_spawnTimeSpin;` and `QSpinBox* m_spawnRadiusSpin;` values should be used.
    *   When a creature is selected from the palette and then placed on a map tile (this logic is likely in `MapCanvas` or `EditorController`):
        1.  An undoable `Action` should be created by the `EditorController`.
        2.  This action, when executed, will:
            a.  Retrieve the target `mapcore::Tile*`.
            b.  Set its spawn radius: `tile-&gt;getSpawnPropertiesForEdit()-&gt;setRadius(m_spawnRadiusSpin-&gt;value());` (or equivalent method in `mapcore::Tile`).
            c.  Clear any existing creatures in the tile's spawn list: `tile-&gt;getCreatureSpawnListForEdit().clear();` (or equivalent).
            d.  Add the name of the selected `mapcore::CreatureType` from the palette to the tile's spawn list: `tile-&gt;addCreatureToSpawnList(selectedCreatureType-&gt;getInternalName());` (or equivalent).
            e.  Set the tile's specific respawn time: `tile-&gt;setSpawnTimeSeconds(m_spawnTimeSpin-&gt;value());` (or equivalent).
            f.  Mark the map as changed.

**II. `EditSpawnDialogQt : QDialog` (New Dialog Class):**
*   This dialog edits an *existing* spawn point's properties on a specific tile.
*   Header (`edit_spawn_dialog_qt.h`):
    ```cpp
    #pragma once
    #include &lt;QDialog&gt;
    #include &lt;QStringList&gt;
    // Forward declare Qt controls and mapcore types if not fully included
    class QSpinBox;
    class QListWidget;
    class QPushButton;
    class QDialogButtonBox;
    namespace mapcore { class Tile; class CreatureManager; /* or similar for finding creatures */ }

    class EditSpawnDialogQt : public QDialog {
        Q_OBJECT
    public:
        EditSpawnDialogQt(QWidget* parent, mapcore::Tile* tileDataSource, mapcore::CreatureManager* creatureManager); // Pass CreatureManager for finder
        ~EditSpawnDialogQt() override = default;

        int getSpawnRadius() const;
        int getRespawnTime() const;
        QStringList getCreatureList() const;

    private slots:
        void onAddItem();
        void onRemoveItem();
        void accept() override; // To perform validation before accepting

    private:
        void loadData();

        mapcore::Tile* m_tileDataSource; // To read initial data
        mapcore::CreatureManager* m_creatureManager; // For creature finder

        QSpinBox* m_radiusSpinBox;
        QSpinBox* m_respawnTimeSpinBox;
        QListWidget* m_creatureListWidget;
        QPushButton* m_addButton;
        QPushButton* m_removeButton;
        QDialogButtonBox* m_buttonBox;

        // Internal data copies for modification
        int m_currentRadius;
        int m_currentRespawnTime;
        QStringList m_currentCreatureList;
    };
    ```
*   Source (`edit_spawn_dialog_qt.cpp`):
    -   Constructor: Initialize UI elements (labels, spin boxes, list widget, buttons). Store `tileDataSource` and `creatureManager`. Call `loadData()`. Connect button signals to slots.
    -   `loadData()`:
        -   `m_radiusSpinBox-&gt;setValue(m_tileDataSource-&gt;getSpawnProperties() ? m_tileDataSource-&gt;getSpawnProperties()-&gt;getRadius() : 0);`
        -   `m_respawnTimeSpinBox-&gt;setValue(m_tileDataSource-&gt;getSpawnTimeSeconds());`
        -   `m_creatureListWidget-&gt;clear();`
        -   `m_currentCreatureList = m_tileDataSource-&gt;getCreatureSpawnList();` // Assuming QStringList or adaptable
        -   `m_creatureListWidget-&gt;addItems(m_currentCreatureList);`
    -   `onAddItem()`:
        -   Open `CreatureFinderDialogQt` (assume available from `UI-06`, ensure it can be used for selecting a creature name/ID).
        -   If a creature is selected, add its name to `m_currentCreatureList` and `m_creatureListWidget`.
    -   `onRemoveItem()`: Remove selected item(s) from `m_currentCreatureList` and `m_creatureListWidget`.
    -   `accept()` (override):
        -   Validate radius (&gt;0 if `m_currentCreatureList` is not empty, else can be 0).
        -   Validate respawn time (&gt;=0).
        -   If valid, `m_currentRadius = m_radiusSpinBox-&gt;value(); m_currentRespawnTime = m_respawnTimeSpinBox-&gt;value();`
        -   Call `QDialog::accept();`.
        -   If invalid, show `QMessageBox::warning`.
    -   Getter methods: `getSpawnRadius()`, `getRespawnTime()`, `getCreatureList()` return the values from `m_currentRadius`, `m_currentRespawnTime`, `m_currentCreatureList`.

**Integration:**
*   The map context menu (right-click on a tile) should provide an &quot;Edit Spawn...&quot; option if `tile-&gt;getSpawnProperties() != nullptr` or `tile-&gt;hasSpawnCreatures()`.
*   This option will instantiate `EditSpawnDialogQt(this, tile, &amp;m_creatureManager)`.
*   If `dialog.exec() == QDialog::Accepted`:
    -   Retrieve `newRadius = dialog.getSpawnRadius()`, `newCreatureList = dialog.getCreatureList()`, `newRespawnTime = dialog.getRespawnTime()`.
    -   Create an undoable `Action` that captures the old state of the tile's spawn radius, creature list, and respawn time.
    -   The `Action`'s `redo()` method will apply the `newRadius`, `newCreatureList`, and `newRespawnTime` to the actual `mapcore::Tile`.
    -   The `Action`'s `undo()` method will restore the old state.
    -   Push the action onto the `ActionQueue`.
</boilerplate_coder_ai_prompt>
</UI-08>
