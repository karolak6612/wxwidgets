wbs_item_id: UI-02
name: Port Toolbars & Palettes
description: Recreate main application toolbars (standard, brushes, position, sizes)
  and the palette system (terrain, doodad, item, creature, house, waypoint, etc.)
  using Qt6 widgets.
dependencies:
- UI-01
- CORE-02
- CORE-04
input_files:
- wxwidgets/main_toolbar.cpp
- wxwidgets/main_toolbar.h
- wxwidgets/palette_window.cpp
- wxwidgets/palette_window.h
- wxwidgets/palette_brushlist.cpp
- wxwidgets/palette_brushlist.h
- wxwidgets/palette_creature.cpp
- wxwidgets/palette_creature.h
- wxwidgets/palette_house.cpp
- wxwidgets/palette_house.h
- wxwidgets/palette_waypoints.cpp
- wxwidgets/palette_waypoints.h
analyzed_input_files:
  - filepath: "wxwidgets/main_toolbar.h"
    description: "Declares `MainToolBar` class (derived from `wxEvtHandler`). It defines constants for toolbar names (`STANDARD_BAR_NAME`, `BRUSHES_BAR_NAME`, etc.) and IDs (`TOOLBAR_STANDARD`, etc.). Holds pointers to four `wxAuiToolBar` instances (`standard_toolbar`, `brushes_toolbar`, `position_toolbar`, `sizes_toolbar`) and specific controls within them, like `NumberTextCtrl` for X,Y,Z inputs (`x_control`, `y_control`, `z_control`) and a `wxButton` (`go_button`) for the position toolbar."
  - filepath: "wxwidgets/main_toolbar.cpp"
    description: |-
      Implements `MainToolBar`.
      - Constructor: Initializes four `wxAuiToolBar`s:
        1.  `standard_toolbar`: Standard operations (New, Open, Save, Undo, Redo, Cut, Copy, Paste) using `wxArtProvider` icons. Event IDs like `wxID_NEW`, `wxID_OPEN`.
        2.  `brushes_toolbar`: Toggle buttons for specialized brushes (Optional Border, Eraser, PZ, NoPVP, NoLogout, PvPZone, Zone, various Door types, Window types) using `wxArtProvider` and custom PNGs loaded via `_wxGetBitmapFromMemory`. Event IDs like `PALETTE_TERRAIN_OPTIONAL_BORDER_TOOL`.
        3.  `position_toolbar`: Contains `NumberTextCtrl`s for X, Y, Z coordinates and a 'Go' button (`TOOLBAR_POSITION_GO`) with an icon.
        4.  `sizes_toolbar`: Toggle buttons for brush shape (Rectangular, Circular - `TOOLBAR_SIZES_RECTANGULAR`, `TOOLBAR_SIZES_CIRCULAR`) and predefined brush sizes (1-7, e.g., `TOOLBAR_SIZES_1`).
      - Toolbars are added to `wxAuiManager` with names, docking positions, and properties.
      - Event handlers (`OnStandardButtonClick`, `OnBrushesButtonClick`, etc.) translate toolbar interactions into calls to `g_gui` methods (e.g., `g_gui.NewMap()`, `g_gui.SelectBrush()`, `g_gui.SetBrushShape()`, `g_gui.SetBrushSize()`, `g_gui.SetScreenCenterPosition()`).
      - `UpdateButtons()`: Enables/disables tools based on editor state.
      - `UpdateBrushButtons()`: Toggles brush tools based on `g_gui.GetCurrentBrush()`.
      - `UpdateBrushSize()`: Updates size/shape toggles based on `g_gui.GetBrushShape()` and `g_gui.GetBrushSize()`.
      - `LoadPerspective()`/`SavePerspective()`: Manages toolbar visibility and layout using `g_settings` and `wxAuiManager`.
  - filepath: "wxwidgets/palette_window.h"
    description: "Declares `PaletteWindow` (derived from `wxPanel`). This class is the main container for all palettes. It uses a `wxChoicebook` (`choicebook`) to switch between palette categories (Terrain, Doodad, Item, Collection, Creature, House, Waypoint, RAW). Includes `wxTextCtrl` (`action_id_input`) and `wxCheckBox` (`action_id_checkbox`) for a global Action ID. Holds pointers to each specific palette panel (e.g., `BrushPalettePanel* terrain_palette`, `CreaturePalettePanel* creature_palette`). Defines event IDs like `PALETTE_CHOICEBOOK`."
  - filepath: "wxwidgets/palette_window.cpp"
    description: |-
      Implements `PaletteWindow`.
      - Constructor: Initializes `action_id` and `action_id_enabled`. Creates the main `wxChoicebook`. Calls static `Create...Palette` methods (e.g., `CreateTerrainPalette`) to instantiate each palette panel type and adds them as pages to the `choicebook`.
      - `Create...Palette` static methods: Each one news up the specific palette panel (e.g., `BrushPalettePanel` for Terrain, `CreaturePalettePanel` for Creature) and potentially adds tool panels (like `BrushToolPanel`, `BrushSizePanel`) to them.
      - Event handling: `OnSwitchingPage`/`OnPageChanged` for `PALETTE_CHOICEBOOK` call `OnSwitchIn`/`OnSwitchOut` on the relevant panels and notify `g_gui` of brush changes. `OnActionIDChange`/`OnActionIDToggle` update `action_id` and `action_id_enabled`.
      - `GetSelectedBrush()`: Delegates to the current palette page's `GetSelectedBrush()`.
      - `ReloadSettings()`: Updates child palettes' settings (list style, icon sizes).
      - `InvalidateContents()`: Calls `InvalidateContents()` on all child palettes.
      - `OnSelectBrush()`: Programmatically changes active page and brush.
      - `OnUpdateBrushSize()`/`OnUpdate()`: Forwards updates to the current palette page.
  - filepath: "wxwidgets/palette_brushlist.h"
    description: |-
      Declares core classes for brush display in palettes.
      - `BrushBoxInterface`: Abstract base class defining an interface for various brush display views (e.g., `SelectFirstBrush`, `GetSelectedBrush`, `SelectBrush`).
      - `BrushListBox`: `wxVListBox`-based implementation of `BrushBoxInterface` for a simple list view with icons and text.
      - `BrushIconBox`: `wxScrolledWindow`-based `BrushBoxInterface` displaying brushes as a grid of `BrushButton`s (custom `wxToggleButton`s).
      - `BrushGridBox`: Another `wxScrolledWindow`-based `BrushBoxInterface` using `wxFlexGridSizer` for a dynamic grid of `BrushButton`s.
      - `DirectDrawBrushPanel`: `wxScrolledWindow`-based `BrushBoxInterface` with custom drawing for RAW items, featuring progressive loading.
      - `SeamlessGridPanel`: Advanced `wxScrolledWindow`-based `BrushBoxInterface` with direct sprite rendering, zooming, item ID display, progressive loading, sprite caching, and chunking for very large tilesets. Declares `CachedSprite` struct.
      - `BrushPanel`: A `wxPanel` that hosts one of the `BrushBoxInterface` implementations. It allows switching view modes (list vs. grid via `view_mode_toggle`, direct draw for RAW via `view_type_choice`, show item IDs via `show_ids_toggle`). It uses `g_brush_panel_cache` (a `std::map<const TilesetCategory*, BrushPanelState>`) to cache `BrushBoxInterface` instances and their states (grid view, list view, zoom controls) to improve performance when switching between tilesets or view modes.
      - `BrushPalettePanel`: Derived from `PalettePanel`. This is the main panel for generic categories (Terrain, Doodad, Item, RAW, Collection). It contains an inner `wxChoicebook` to select a `TilesetCategory` (e.g., a specific group of ground sprites). Each page of this inner choicebook is a `BrushPanel`. It also manages adding tool panels (e.g., `BrushToolPanel`, `BrushSizePanel`, `BrushThicknessPanel`, `ZoneBrushPanel`) and provides UI buttons ("Add new Tileset", "Add new Item", "Quick Add Item", "Create Border") that invoke dialogs (like `AddTilesetWindow`, `AddItemWindow` from UI-05, `BorderEditorDialog` from UI-05).
  - filepath: "wxwidgets/palette_brushlist.cpp"
    description: |-
      Implements classes from `palette_brushlist.h`.
      - `BrushPalettePanel`: Constructor sets up the inner `wxChoicebook` and populates it with `BrushPanel` instances for each `TilesetCategory` of the palette's type. Handles events for its buttons, invoking dialogs as needed (e.g., `AddTilesetWindow`, `AddItemWindow`, `BorderEditorDialog`). `OnClickQuickAddItemTileset` adds the current `RAWBrush` to the last used tileset.
      - `BrushPanel`: Constructor initializes view mode toggles (`view_mode_toggle`, `show_ids_toggle`, `view_type_choice`). `LoadViewMode()` dynamically creates or retrieves from `g_brush_panel_cache` the appropriate `BrushBoxInterface` (e.g., `BrushListBox`, `SeamlessGridPanel`) based on settings and view mode. `OnViewModeToggle` handles switching between cached list and grid views, creating them if not cached, and managing zoom controls for `SeamlessGridPanel`.
      - `SeamlessGridPanel`: Implements sophisticated rendering (`DrawSpriteAt` with caching, scaling based on `zoom_level`), scroll handling, mouse interaction (selection, hover), keyboard navigation (`OnKeyDown`), progressive loading (`StartProgressiveLoading`, `OnTimer`), and chunk navigation for large tilesets (`CreateNavigationPanel`, `UpdateNavigationPanel`, `OnNavigationButtonClicked`). `ManageSpriteCache` implements logic to limit cache size.
      - Other `BrushBoxInterface` views (`BrushListBox`, `BrushIconBox`, `BrushGridBox`, `DirectDrawBrushPanel`) implement their specific rendering and interaction logic.
  - filepath: "wxwidgets/palette_creature.h"
    description: "Declares `CreaturePalettePanel` (derived from `PalettePanel`) for creature selection and spawn settings. Declares `CreatureSpritePanel` (basic sprite grid) and `CreatureSeamlessGridPanel` (advanced sprite grid, similar to the generic `SeamlessGridPanel` but tailored for creatures). UI controls include `wxChoice` for creature categories, `SortableListBox` for list view, search field, spin controls for spawn time/radius, toggles for brush mode (Creature/Spawn) and view preferences (list/sprite, sprite size, zoom), and buttons for loading NPC/Monster XML data and purging creatures."
  - filepath: "wxwidgets/palette_creature.cpp"
    description: |-
      Implements `CreaturePalettePanel`.
      - Constructor: Sets up UI elements including tileset choice, search field, view mode toggles (list vs. sprite, large sprites, zoom), creature/spawn brush toggles, spawn time/radius spin controls, and load/purge buttons.
      - Populates creature categories from `g_materials.tilesets` (type `TILESET_CREATURE`).
      - `FilterCreatures()`: Filters the displayed creature list by name or looktype ID based on `search_field` input.
      - `SetViewMode()`: Handles switching between `creature_list` (list view), `sprite_panel` (basic grid), and `seamless_panel` (advanced grid). Manages visibility and content loading for these views. `CreatureSeamlessGridPanel` has its own zooming and sprite sizing logic.
      - Event Handlers:
        - Tileset/list/sprite selection: Updates the current brush by calling `g_gui.SelectBrush()`.
        - Brush mode toggles (`OnClickCreatureBrushButton`, `OnClickSpawnBrushButton`): Switch between `CreatureBrush` and `SpawnBrush`.
        - Spawn settings (`OnChangeSpawnTime`, `OnChangeSpawnSize`): Update global spawn settings via `g_gui`.
        - Load/Purge buttons (`OnClickLoadNPCsButton`, `OnClickLoadMonstersButton`, `OnClickPurgeCreaturesButton`): Use `wxDirDialog` to get folders, call `g_creatures.importXMLFromOT()` for loading, or `g_creatures.clear()` and `g_materials` updates for purging. Refreshes palettes afterwards.
      - `OnUpdate()`: Reloads creature categories and refreshes the display.
  - filepath: "wxwidgets/palette_house.h"
    description: "Declares `HousePalettePanel` (derived from `PalettePanel`) for the 'Houses' palette tab. Manages UI for house selection, town filtering, and house brush/exit brush mode. Declares `wxChoice` for towns (`town_choice`), `SortableListBox` for houses (`house_list`), buttons for Add/Edit/Remove house, and toggle buttons for House/Exit brush mode. Also declares `EditHouseDialog` for modifying house properties (name, rent, town, guildhall status, ID)."
  - filepath: "wxwidgets/palette_house.cpp"
    description: |-
      Implements `HousePalettePanel` and `EditHouseDialog`.
      - `HousePalettePanel`:
        - `SetMap()`: Initializes/updates the panel with data from the current map.
        - `OnUpdate()`: Populates `town_choice` from `map->towns`.
        - `SelectTown()`: Populates `house_list` based on the selected town.
        - `OnClickAddHouse`: Adds a new `House` object to `map->houses`.
        - `OnClickEditHouse`: Shows an `EditHouseDialog` for the selected house.
        - `OnClickRemoveHouse`: Removes selected house(s) from `map->houses`.
        - `OnClickHouseBrushButton`/`OnClickSelectExitButton`: Toggle between `HouseBrush` and `HouseExitBrush`.
        - `OnListBoxContextMenu`/`OnMoveHouseToTown`: Handles moving a house to a different town.
      - `EditHouseDialog`: A `wxDialog` with `wxTextCtrl` for name/rent, `wxChoice` for town, `wxSpinCtrl` for ID, and `wxCheckBox` for guildhall. Validates input (e.g., unique house ID if changed, non-empty name) and updates the `House` object. Warns about consequences of changing existing house IDs.
  - filepath: "wxwidgets/palette_waypoints.h"
    description: "Declares `WaypointPalettePanel` (derived from `PalettePanel`) for the 'Waypoints' palette tab. Uses a `wxListCtrl` (`waypoint_list`) in report view (single column) for displaying and allowing in-place editing of waypoint names."
  - filepath: "wxwidgets/palette_waypoints.cpp"
    description: "Implements `WaypointPalettePanel`. Populates `waypoint_list` from `map->waypoints`. Handles adding new waypoints (`OnClickAddWaypoint`), removing selected waypoints (`OnClickRemoveWaypoint`), and renaming waypoints directly in the `wxListCtrl` (`OnEditWaypointLabel`). Selecting a waypoint in the list sets it for the `WaypointBrush` (via `g_gui.waypoint_brush->setWaypoint()`) and navigates the map view to the waypoint's location."
documentation_references:
  - 'QToolBar: https://doc.qt.io/qt-6/qtoolbar.html'
  - 'QAction: https://doc.qt.io/qt-6/qaction.html'
  - 'QDockWidget: https://doc.qt.io/qt-6/qdockwidget.html'
  - 'QTabWidget: https://doc.qt.io/qt-6/qtabwidget.html'
  - 'QListView / QListWidget: https://doc.qt.io/qt-6/qlistview.html & https://doc.qt.io/qt-6/qlistwidget.html'
  - 'QComboBox: https://doc.qt.io/qt-6/qcombobox.html'
  - 'QSpinBox, QLineEdit, QPushButton, QRadioButton: Standard input widgets.'
  - 'QAbstractItemModel / QStyledItemDelegate: For custom views in QListView/QTreeView if needed for advanced brush display.'
  - 'QGridLayout / QVBoxLayout / QHBoxLayout: For arranging widgets within palettes.'
  - 'QStackedWidget: https://doc.qt.io/qt-6/qstackedwidget.html (For managing different brush views within a BrushPanel)'
current_functionality_summary: |
  The wxWidgets application features a set of dockable toolbars and a comprehensive, multi-category palette system.
  **Toolbars (`MainToolBar`):** Four `wxAuiToolBar` instances provide quick access:
  1.  *Standard Toolbar:* File operations (New, Open, Save, Save As), Undo/Redo, Clipboard (Cut, Copy, Paste). Icons from `wxArtProvider`.
  2.  *Brushes Toolbar:* Toggle buttons for specialized brushes like Optional Border, Eraser, various Zone types (PZ, NoPVP, NoLogout, PvPZone, generic Zone), Door types (Normal, Locked, Magic, Quest, Alt, Archway), and Window types (Hatch, Normal). Icons from `wxArtProvider` or custom PNGs.
  3.  *Position Toolbar:* `NumberTextCtrl`s for X, Y, Z coordinate input and a "Go" button.
  4.  *Sizes Toolbar:* Toggle buttons for brush shape (Rectangular, Circular) and a set of predefined brush sizes (1x1 up to 7x7 or equivalent). Icons from `wxArtProvider`.
  Toolbar button states (enabled/disabled, toggled) are dynamically updated based on application context (e.g., map loaded, current brush) via `UpdateButtons()`, `UpdateBrushButtons()`, and `UpdateBrushSize()`. Layout and visibility are managed by `wxAuiManager` and persisted using `g_settings`.

  **Palette System (`PaletteWindow`):** A central `wxPanel` hosts a `wxChoicebook` for switching between main palette categories: Terrain, Doodad, Item, Collection, Creature, House, Waypoint, and RAW. It also includes global controls for setting an Action ID.
  -   **Generic Brush Palettes** (`BrushPalettePanel` serves Terrain, Doodad, Item, RAW, Collection):
      -   These contain an inner `wxChoicebook` for selecting "tilesets" (sub-categories of brushes/items, e.g., 'Forest Grounds', 'Cave Walls').
      -   Each selected tileset's content is displayed in a `BrushPanel`.
      -   `BrushPanel` itself is a container that dynamically instantiates one of several `BrushBoxInterface` implementations for the actual display, based on user settings or palette type:
          -   `BrushListBox`: Simple `wxVListBox` showing brush names and icons.
          -   `BrushIconBox`: `wxScrolledWindow` with a grid of `BrushButton`s (toggle buttons with icons).
          -   `BrushGridBox`: `wxScrolledWindow` with a `wxFlexGridSizer` of `BrushButton`s.
          -   `DirectDrawBrushPanel`: Custom-drawn `wxScrolledWindow` optimized for RAW items, with progressive loading.
          -   `SeamlessGridPanel`: Advanced custom-drawn `wxScrolledWindow` for dense grids, featuring zooming (1x-4x), item ID display (optional), progressive loading for large lists, sprite caching, and chunking navigation for very large datasets (10k+ items).
      -   `BrushPalettePanel` can also embed specific tool panels (e.g., `BrushToolPanel`, `BrushSizePanel`, `BrushThicknessPanel`, `ZoneBrushPanel`) alongside the brush display.
      -   Functionality to "Add new Tileset", "Add new Item" (to a tileset), "Quick Add Item", and "Create Border" is provided, invoking dialogs like `AddTilesetWindow`, `AddItemWindow` (from UI-05), and `BorderEditorDialog` (from UI-05).
  -   **Specialized Palettes:**
      -   `CreaturePalettePanel`: Lists creature types, allows search by name or looktype. Provides view toggles (list vs. sprite grid). The sprite grid can be a basic `CreatureSpritePanel` or the advanced `CreatureSeamlessGridPanel` with zooming and sprite sizing options. Manages spawn brush settings (time, radius). Includes functionality to load creature definitions from external NPC/Monster XML folders and to purge all loaded creatures.
      -   `HousePalettePanel`: Allows selection of a town via `wxChoice`. Lists houses for the selected town in a `SortableListBox`. Supports adding, editing (via `EditHouseDialog`), and removing houses. Toggles between House brush and House Exit brush modes. Context menu allows moving houses between towns.
      -   `WaypointPalettePanel`: Uses a `wxListCtrl` (report view) to display waypoints. Supports adding, removing, and in-place renaming of waypoints. Selecting a waypoint sets the `WaypointBrush` and navigates the map.
  Palettes populate their content from `g_materials` (loaded from XML files), `g_creatures`, and map-specific data (houses, waypoints). User selections within palettes update the global brush state via `g_gui.SelectBrush()`.
definition_of_done:
- The four main application toolbars (Standard, Brushes, Position, Sizes) are recreated
  as `QToolBar` objects within the `QMainWindow`.
- Actions on the Standard and Brushes toolbars are implemented using `QAction`s with
  appropriate icons and tooltips, connected to placeholder slots.
- The Position toolbar includes `QSpinBox` (or validated `QLineEdit`) controls for
  X, Y, Z coordinates and a `QPushButton` for 'Go'.
- The Sizes toolbar uses `QActionGroup`s or checkable `QAction`s to allow selection
  of brush shape and size, with visual feedback.
- A `QDockWidget` is created to house the main palette system.
- Inside the dock widget, a `QTabWidget` (`paletteTabWidget`) is used to switch between
  different palette types (Terrain, Doodad, Item, Creature, House, Waypoint, RAW,
  Collection).
- 'For generic palette types (Terrain, Doodad, Item, RAW, Collection):'
- '  - Each tab contains a `QComboBox` or another `QTabWidget` to select the specific
  tileset/category (e.g., ''Forest Grounds'', ''City Items'').'
- '  - Brushes/items from the selected tileset/category are displayed in a `QListView`
  (with a custom model/delegate for icon+text or grid view) or a `QListWidget`.'
- '  - Basic search/filter functionality using a `QLineEdit` is provided for these
  palettes.'
- 'Specialized palettes are implemented:'
- '  - `CreaturePalette`: `QComboBox` for creature categories, search field, display
  area (list or grid), `QSpinBox` for spawn time/radius, toggles for creature/spawn
  brush.'
- '  - `HousePalette`: `QComboBox` for towns, `QListWidget` for houses, Add/Edit/Remove
  buttons, toggles for house/exit brush.'
- '  - `WaypointPalette`: `QListWidget` with editable items for waypoint names, Add/Remove
  buttons.'
- Selecting a brush/item in any palette correctly updates the application's global
  current brush state.
- Toolbars and palettes are correctly enabled/disabled/updated based on application
  context (e.g., map open, current tool).
boilerplate_coder_ai_prompt: "Your task is to port the main application toolbars and\
  \ the comprehensive palette system from wxWidgets to Qt6. This involves recreating\
  \ multiple toolbars with various controls and a tabbed palette window that displays\
  \ different types of brushes and game elements.\n\n**Reference Files:** `wxwidgets/main_toolbar.*`,\
  \ `wxwidgets/palette_window.*`, `wxwidgets/palette_brushlist.*`, `wxwidgets/palette_creature.*`,\
  \ `wxwidgets/palette_house.*`, `wxwidgets/palette_waypoints.*`. Palette content\
  \ is driven by XML asset files.\n\n**I. Main Toolbars (to be added to `QMainWindow`):**\n\
  \n1.  **Standard Toolbar (`QToolBar` named `standardToolbar`):**\n    - Actions:\
  \ New, Open, Save, Save As, Undo, Redo, Cut, Copy, Paste.\n    - Use `QAction` for\
  \ each, set icons (e.g., `QIcon::fromTheme(\"document-new\")` or custom PNGs) and\
  \ tooltips. Connect `triggered()` signals to placeholder slots.\n\n2.  **Brushes\
  \ Toolbar (`QToolBar` named `brushesToolbar`):**\n    - Checkable `QAction`s for:\
  \ Eraser, Optional Border, PZ, NoPVP, NoLogout, PvPZone, Zone Brush.\n    - Checkable\
  \ `QAction`s for Door Types: Normal, Locked, Magic, Quest, Normal Alt, Archway.\n\
  \    - Checkable `QAction`s for Window Types: Hatch, Window.\n    - Use a `QActionGroup`\
  \ if some of these are mutually exclusive. Set icons and tooltips.\n\n3.  **Position\
  \ Toolbar (`QToolBar` named `positionToolbar`):**\n    - Three `QSpinBox` widgets\
  \ for X, Y, Z coordinates. Set appropriate ranges (e.g., 0 to map max width/height/depth).\n\
  \    - A `QPushButton` labeled \"Go\".\n    - Connect `QSpinBox::valueChanged` and\
  \ `QPushButton::clicked` to slots.\n\n4.  **Sizes Toolbar (`QToolBar` named `sizesToolbar`):**\n\
  \    - `QActionGroup` for Brush Shape:\n        - `QAction` \"Rectangular\" (checked\
  \ by default).\n        - `QAction` \"Circular\".\n    - `QActionGroup` for Brush\
  \ Size (or individual checkable `QAction`s if preferred, ensuring only one is active):\n\
  \        - Actions for sizes 1x1, 2x2, 3x3, ..., 7x7 (or equivalent radius for circular).\
  \ Set icons representing the size/shape.\n    - Connect `triggered()` signals.\n\
  \n5.  **Toolbar Management:**\n    - Implement `void MainWindow::updateToolbars()`\
  \ to enable/disable toolbar actions based on application state (map loaded, selection\
  \ active, etc.).\n    - Implement `void MainWindow::updateBrushToolbarStates()`\
  \ to reflect the currently selected global brush.\n    - Implement `void MainWindow::updateBrushSizeToolbar(BrushShape\
  \ shape, int size)` to update the Sizes toolbar.\n\n**II. Palette System (within\
  \ a `QDockWidget`):**\n\n1.  **Main Palette Container:**\n    - Use a `QDockWidget`\
  \ (e.g., titled \"Palettes\").\n    - Inside, place a `QTabWidget` (`paletteTabWidget`)\
  \ for different palette categories.\n\n2.  **Generic Brush Palette (`BrushPalettePanel`\
  \ equivalent for Terrain, Doodad, Item, RAW, Collection):**\n    - For each of these\
  \ types, create a tab in `paletteTabWidget`.\n    - Each such tab will contain:\n\
  \        - A `QComboBox` (or another `QTabWidget`) to select the specific *tileset\
  \ category* (e.g., \"Forest Grounds,\" \"City Items,\" loaded from `g_materials.tilesets`).\n\
  \        - A display area for brushes/items from the selected tileset:\n       \
  \     - Recommended: `QListView` with a custom `QAbstractListModel` and `QStyledItemDelegate`\
  \ for rendering icons and text.\n            - Alternative: `QListWidget` (simpler,\
  \ less flexible).\n            - Consider a toggle for list view vs. icon grid view\
  \ (`QListView::setViewMode`).\n        - A `QLineEdit` for searching/filtering items\
  \ within the current tileset category.\n        - For palettes that use them (Terrain,\
  \ Doodad, Collection), integrate tool panels (Brush Tools, Thickness, Size) as separate\
  \ widgets or toolbars within this palette tab. The original `BrushPalettePanel`\
  \ added these via `AddToolPanel`.\n\n3.  **Specialized Palettes:**\n\n    - **Creature\
  \ Palette Tab:**\n        - `QComboBox` for creature tilesets (e.g., \"All Creatures,\"\
  \ \"NPCs,\" \"Forest Monsters\").\n        - `QLineEdit` for search (by name, or\
  \ \"lt:id\" for looktype).\n        - Display area: `QListView` or a custom grid\
  \ widget (like `CreatureSeamlessGridPanel`) to show creature sprites/names.\n  \
  \      - `QSpinBox` for \"Spawntime\" and \"Spawn Size/Radius\".\n        - `QRadioButton`\
  \ or `QActionGroup` for \"Creature Brush\" vs. \"Spawn Brush\" mode.\n        -\
  \ `QPushButton`s: \"Load NPCs Folder,\" \"Load Monsters Folder,\" \"Purge Creatures.\"\
  \n        - Toggles for \"Sprite View\" / \"List View\", \"64x64 Sprites\", \"Zoom\"\
  \ for sprite view.\n\n    - **House Palette Tab:**\n        - `QComboBox` to select\
  \ `Town`.\n        - `QListWidget` to display houses in the selected town (Name,\
  \ ID, Size).\n        - `QPushButton`s: \"Add House,\" \"Edit House,\" \"Remove\
  \ House.\"\n        - `QRadioButton` or `QActionGroup` for \"House Tile Brush\"\
  \ vs. \"Select Exit Brush.\"\n\n    - **Waypoint Palette Tab:**\n        - `QListWidget`\
  \ where items are waypoint names. Items should be editable (`Qt::ItemIsEditable`).\n\
  \        - `QPushButton`s: \"Add Waypoint,\" \"Remove Waypoint.\"\n\n4.  **Palette\
  \ Interaction:**\n    - When a brush/item/creature/etc. is selected in any palette,\
  \ a signal should be emitted, which the `MainWindow` or `Editor` class connects\
  \ to, to set the application's current active brush.\n    - Implement logic similar\
  \ to `PaletteWindow::OnSelectBrush` to switch to the correct palette tab and select\
  \ the brush if it's activated externally (e.g., hotkey).\n    - Palette content\
  \ should be refreshed when data changes (e.g., after `CORE-02` or `CORE-04` reload\
  \ assets, or map waypoints/houses change).\n\nThis is a large UI component. Break\
  \ it down into manageable sub-widgets for each palette type.\nThe `analyzed_input_files`\
  \ section should be populated by reading the first 200 lines of the listed C++ files\
  \ and calculating their MD5 hashes."
