wbs_item_id: UI-02
name: Port Toolbars & Palettes
description: Recreate main application toolbars (standard, brushes, position, sizes)
  and the palette system (terrain, doodad, item, creature, house, waypoint, etc.)
  using Qt6 widgets.
dependencies:
- UI-01
- CORE-02
- CORE-04
input_files:
- wxwidgets/main_toolbar.cpp
- wxwidgets/main_toolbar.h
- wxwidgets/palette_window.cpp
- wxwidgets/palette_window.h
- wxwidgets/palette_brushlist.cpp
- wxwidgets/palette_brushlist.h
- wxwidgets/palette_creature.cpp
- wxwidgets/palette_creature.h
- wxwidgets/palette_house.cpp
- wxwidgets/palette_house.h
- wxwidgets/palette_waypoints.cpp
- wxwidgets/palette_waypoints.h
analyzed_input_files:
- file_path: wxwidgets/main_toolbar.cpp
  description: Implements `MainToolBar` which creates and manages several `wxAuiToolBar`
    instances (standard, brushes, position, sizes) with various controls and actions.
    Handles their layout and updates their state.
- file_path: wxwidgets/main_toolbar.h
  description: Header for `MainToolBar`.
- file_path: wxwidgets/palette_window.cpp
  description: Implements `PaletteWindow`, a `wxPanel` containing a `wxChoicebook`
    to switch between different palette types (Terrain, Doodad, Item, Creature, House,
    Waypoint, RAW). Manages creation and state of these individual palette panels.
- file_path: wxwidgets/palette_window.h
  description: Header for `PaletteWindow`.
- file_path: wxwidgets/palette_brushlist.cpp
  description: Implements `BrushPalettePanel` (generic panel for Terrain, Doodad,
    Item, etc., palettes, containing another `wxChoicebook` for tilesets) and `BrushPanel`
    (displays brushes from a specific tileset category using different view modes
    like lists or icon grids, including `DirectDrawBrushPanel` and `SeamlessGridPanel`).
- file_path: wxwidgets/palette_brushlist.h
  description: Header for `BrushPalettePanel`, `BrushPanel`, and various brush display
    interfaces/classes (`BrushBoxInterface`, `BrushListBox`, `BrushIconBox`, `DirectDrawBrushPanel`,
    `SeamlessGridPanel`).
- file_path: wxwidgets/palette_creature.cpp
  description: Implements `CreaturePalettePanel`, specialized for selecting creature
    brushes and spawn settings. Includes search, view toggles (list/sprite), and NPC/Monster
    file loading.
- file_path: wxwidgets/palette_creature.h
  description: Header for `CreaturePalettePanel`, `CreatureSpritePanel`, and `CreatureSeamlessGridPanel`.
- file_path: wxwidgets/palette_house.cpp
  description: Implements `HousePalettePanel` for managing house brushes, selecting
    towns, and house exits. Includes an `EditHouseDialog`.
- file_path: wxwidgets/palette_house.h
  description: Header for `HousePalettePanel` and `EditHouseDialog`.
- file_path: wxwidgets/palette_waypoints.cpp
  description: Implements `WaypointPalettePanel` for listing, adding, removing, and
    renaming waypoints.
- file_path: wxwidgets/palette_waypoints.h
  description: Header for `WaypointPalettePanel`.
documentation_references:
- 'QToolBar: https://doc.qt.io/qt-6/qtoolbar.html'
- 'QAction: https://doc.qt.io/qt-6/qaction.html'
- 'QDockWidget: https://doc.qt.io/qt-6/qdockwidget.html'
- 'QTabWidget: https://doc.qt.io/qt-6/qtabwidget.html'
- 'QListView / QListWidget: https://doc.qt.io/qt-6/qlistview.html'
- 'QAbstractItemModel / QStyledItemDelegate: for custom list/grid views.'
- QSpinBox, QLineEdit, QPushButton, QComboBox for various controls.
current_functionality_summary: 'The wxWidgets version has a `MainToolBar` class that
  creates and manages four dockable `wxAuiToolBar` instances:

  1.  Standard Toolbar: File operations, Undo/Redo, Cut/Copy/Paste.

  2.  Brushes Toolbar: Toggle buttons for specialized brushes like Eraser, Zone brushes,
  Door types, Window types.

  3.  Position Toolbar: X, Y, Z coordinate inputs and a "Go" button.

  4.  Sizes Toolbar: Toggles for brush shape (circular/square) and predefined brush
  sizes.

  Toolbars use `wxArtProvider` or PNGs for icons. Their state (enabled/disabled, toggled)
  is updated based on application context.


  The `PaletteWindow` is a `wxPanel` hosting a `wxChoicebook` to switch between different
  palette types (Terrain, Doodad, Item, Collection, Creature, House, Waypoint, RAW).

  - `BrushPalettePanel` is a generic base for several palette types, itself containing
  a `wxChoicebook` for different tilesets/categories. Each page of this inner choicebook
  is a `BrushPanel`.

  - `BrushPanel` displays brushes using various view modes (list, icon grid, direct
  draw, seamless grid).

  - Specialized palettes (`CreaturePalettePanel`, `HousePalettePanel`, `WaypointPalettePanel`)
  have custom UIs for their specific functionalities, including search, settings inputs,
  and dedicated brush types. Palettes are populated based on loaded XML asset data
  (`tilesets.xml`, `items.xml`, etc.) or map-specific data (houses, waypoints).'
definition_of_done:
- The four main application toolbars (Standard, Brushes, Position, Sizes) are recreated
  as `QToolBar` objects within the `QMainWindow`.
- Actions on the Standard and Brushes toolbars are implemented using `QAction`s with
  appropriate icons and tooltips, connected to placeholder slots.
- The Position toolbar includes `QSpinBox` (or validated `QLineEdit`) controls for
  X, Y, Z coordinates and a `QPushButton` for 'Go'.
- The Sizes toolbar uses `QActionGroup`s or checkable `QAction`s to allow selection
  of brush shape and size, with visual feedback.
- A `QDockWidget` is created to house the main palette system.
- Inside the dock widget, a `QTabWidget` (`paletteTabWidget`) is used to switch between
  different palette types (Terrain, Doodad, Item, Creature, House, Waypoint, RAW,
  Collection).
- 'For generic palette types (Terrain, Doodad, Item, RAW, Collection):'
- '  - Each tab contains a `QComboBox` or another `QTabWidget` to select the specific
  tileset/category (e.g., ''Forest Grounds'', ''City Items'').'
- '  - Brushes/items from the selected tileset/category are displayed in a `QListView`
  (with a custom model/delegate for icon+text or grid view) or a `QListWidget`.'
- '  - Basic search/filter functionality using a `QLineEdit` is provided for these
  palettes.'
- 'Specialized palettes are implemented:'
- '  - `CreaturePalette`: `QComboBox` for creature categories, search field, display
  area (list or grid), `QSpinBox` for spawn time/radius, toggles for creature/spawn
  brush.'
- '  - `HousePalette`: `QComboBox` for towns, `QListWidget` for houses, Add/Edit/Remove
  buttons, toggles for house/exit brush.'
- '  - `WaypointPalette`: `QListWidget` with editable items for waypoint names, Add/Remove
  buttons.'
- Selecting a brush/item in any palette correctly updates the application's global
  current brush state.
- Toolbars and palettes are correctly enabled/disabled/updated based on application
  context (e.g., map open, current tool).
boilerplate_coder_ai_prompt: "Your task is to port the main application toolbars and\
  \ the comprehensive palette system from wxWidgets to Qt6. This involves recreating\
  \ multiple toolbars with various controls and a tabbed palette window that displays\
  \ different types of brushes and game elements.\n\n**Reference Files:** `wxwidgets/main_toolbar.*`,\
  \ `wxwidgets/palette_window.*`, `wxwidgets/palette_brushlist.*`, `wxwidgets/palette_creature.*`,\
  \ `wxwidgets/palette_house.*`, `wxwidgets/palette_waypoints.*`. Palette content\
  \ is driven by XML asset files.\n\n**I. Main Toolbars (to be added to `QMainWindow`):**\n\
  \n1.  **Standard Toolbar (`QToolBar` named `standardToolbar`):**\n    - Actions:\
  \ New, Open, Save, Save As, Undo, Redo, Cut, Copy, Paste.\n    - Use `QAction` for\
  \ each, set icons (e.g., `QIcon::fromTheme(\"document-new\")` or custom PNGs) and\
  \ tooltips. Connect `triggered()` signals to placeholder slots.\n\n2.  **Brushes\
  \ Toolbar (`QToolBar` named `brushesToolbar`):**\n    - Checkable `QAction`s for:\
  \ Eraser, Optional Border, PZ, NoPVP, NoLogout, PvPZone, Zone Brush.\n    - Checkable\
  \ `QAction`s for Door Types: Normal, Locked, Magic, Quest, Normal Alt, Archway.\n\
  \    - Checkable `QAction`s for Window Types: Hatch, Window.\n    - Use a `QActionGroup`\
  \ if some of these are mutually exclusive. Set icons and tooltips.\n\n3.  **Position\
  \ Toolbar (`QToolBar` named `positionToolbar`):**\n    - Three `QSpinBox` widgets\
  \ for X, Y, Z coordinates. Set appropriate ranges (e.g., 0 to map max width/height/depth).\n\
  \    - A `QPushButton` labeled \"Go\".\n    - Connect `QSpinBox::valueChanged` and\
  \ `QPushButton::clicked` to slots.\n\n4.  **Sizes Toolbar (`QToolBar` named `sizesToolbar`):**\n\
  \    - `QActionGroup` for Brush Shape:\n        - `QAction` \"Rectangular\" (checked\
  \ by default).\n        - `QAction` \"Circular\".\n    - `QActionGroup` for Brush\
  \ Size (or individual checkable `QAction`s if preferred, ensuring only one is active):\n\
  \        - Actions for sizes 1x1, 2x2, 3x3, ..., 7x7 (or equivalent radius for circular).\
  \ Set icons representing the size/shape.\n    - Connect `triggered()` signals.\n\
  \n5.  **Toolbar Management:**\n    - Implement `void MainWindow::updateToolbars()`\
  \ to enable/disable toolbar actions based on application state (map loaded, selection\
  \ active, etc.).\n    - Implement `void MainWindow::updateBrushToolbarStates()`\
  \ to reflect the currently selected global brush.\n    - Implement `void MainWindow::updateBrushSizeToolbar(BrushShape\
  \ shape, int size)` to update the Sizes toolbar.\n\n**II. Palette System (within\
  \ a `QDockWidget`):**\n\n1.  **Main Palette Container:**\n    - Use a `QDockWidget`\
  \ (e.g., titled \"Palettes\").\n    - Inside, place a `QTabWidget` (`paletteTabWidget`)\
  \ for different palette categories.\n\n2.  **Generic Brush Palette (`BrushPalettePanel`\
  \ equivalent for Terrain, Doodad, Item, RAW, Collection):**\n    - For each of these\
  \ types, create a tab in `paletteTabWidget`.\n    - Each such tab will contain:\n\
  \        - A `QComboBox` (or another `QTabWidget`) to select the specific *tileset\
  \ category* (e.g., \"Forest Grounds,\" \"City Items,\" loaded from `g_materials.tilesets`).\n\
  \        - A display area for brushes/items from the selected tileset:\n       \
  \     - Recommended: `QListView` with a custom `QAbstractListModel` and `QStyledItemDelegate`\
  \ for rendering icons and text.\n            - Alternative: `QListWidget` (simpler,\
  \ less flexible).\n            - Consider a toggle for list view vs. icon grid view\
  \ (`QListView::setViewMode`).\n        - A `QLineEdit` for searching/filtering items\
  \ within the current tileset category.\n        - For palettes that use them (Terrain,\
  \ Doodad, Collection), integrate tool panels (Brush Tools, Thickness, Size) as separate\
  \ widgets or toolbars within this palette tab. The original `BrushPalettePanel`\
  \ added these via `AddToolPanel`.\n\n3.  **Specialized Palettes:**\n\n    - **Creature\
  \ Palette Tab:**\n        - `QComboBox` for creature tilesets (e.g., \"All Creatures,\"\
  \ \"NPCs,\" \"Forest Monsters\").\n        - `QLineEdit` for search (by name, or\
  \ \"lt:id\" for looktype).\n        - Display area: `QListView` or a custom grid\
  \ widget (like `CreatureSeamlessGridPanel`) to show creature sprites/names.\n  \
  \      - `QSpinBox` for \"Spawntime\" and \"Spawn Size/Radius\".\n        - `QRadioButton`\
  \ or `QActionGroup` for \"Creature Brush\" vs. \"Spawn Brush\" mode.\n        -\
  \ `QPushButton`s: \"Load NPCs Folder,\" \"Load Monsters Folder,\" \"Purge Creatures.\"\
  \n        - Toggles for \"Sprite View\" / \"List View\", \"64x64 Sprites\", \"Zoom\"\
  \ for sprite view.\n\n    - **House Palette Tab:**\n        - `QComboBox` to select\
  \ `Town`.\n        - `QListWidget` to display houses in the selected town (Name,\
  \ ID, Size).\n        - `QPushButton`s: \"Add House,\" \"Edit House,\" \"Remove\
  \ House.\"\n        - `QRadioButton` or `QActionGroup` for \"House Tile Brush\"\
  \ vs. \"Select Exit Brush.\"\n\n    - **Waypoint Palette Tab:**\n        - `QListWidget`\
  \ where items are waypoint names. Items should be editable (`Qt::ItemIsEditable`).\n\
  \        - `QPushButton`s: \"Add Waypoint,\" \"Remove Waypoint.\"\n\n4.  **Palette\
  \ Interaction:**\n    - When a brush/item/creature/etc. is selected in any palette,\
  \ a signal should be emitted, which the `MainWindow` or `Editor` class connects\
  \ to, to set the application's current active brush.\n    - Implement logic similar\
  \ to `PaletteWindow::OnSelectBrush` to switch to the correct palette tab and select\
  \ the brush if it's activated externally (e.g., hotkey).\n    - Palette content\
  \ should be refreshed when data changes (e.g., after `CORE-02` or `CORE-04` reload\
  \ assets, or map waypoints/houses change).\n\nThis is a large UI component. Break\
  \ it down into manageable sub-widgets for each palette type.\nThe `analyzed_input_files`\
  \ section should be populated by reading the first 200 lines of the listed C++ files\
  \ and calculating their MD5 hashes."
