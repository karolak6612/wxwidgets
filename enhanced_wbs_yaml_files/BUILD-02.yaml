id: BUILD-02
section: Build, Deployment, & Documentation
title: Implement Packaging and Deployment
original_task_id: BUILD-02 # Assuming this is the original WBS ID
description: Create platform-native installers and packages for Windows (MSI), macOS (.app in DMG), and Linux (.deb/.rpm) using CPack, including application icons and bundled dependencies.
dependencies:
  - "BUILD-01" # Depends on the initial CMake setup
current_functionality_summary: The application's primary icon is `editor_icon.xpm`, loaded in `application.cpp` and set dynamically after a possible hue shift. `artprovider.cpp` handles other UI icons. For packaging, the core task is bundling this primary icon (`editor_icon.xpm` or a converted version) with platform-native installers. The current CMake setup (from BUILD-01) does not include packaging or installation capabilities.
input_files:
  - wxwidgets/application.cpp
  - wxwidgets/artprovider.cpp
analyzed_input_files:
  - file_path: wxwidgets/application.cpp
    description: |
      Handles main application lifecycle and window setup.
      Crucially, in `Application::OnInit()`, it loads the primary application icon from an XPM file (`../brushes/icon/editor_icon.xpm`, which resolves to `wxwidgets/brushes/icon/editor_icon.xpm`).
      This XPM is converted to `wxBitmap`, then `wxImage` (allowing for dynamic hue shifts), and finally set as a `wxIcon` for the main application frame.
      This file is key for identifying the source of the main application icon that needs to be processed (converted to .ico, .icns, high-res .png) for platform-native packaging.
  - file_path: wxwidgets/artprovider.cpp
    description: |
      Implements `ArtProvider` (a `wxArtProvider`) to supply various UI icons, primarily for toolbars.
      It directly includes multiple XPM files (e.g., `circular_1.xpm`, `door_normal_small.xpm`) and provides them as `wxBitmap` objects based on requested IDs.
      While these are not the main application icon, they represent other image assets embedded in the application. For a Qt6 migration, these would typically be converted to PNGs and managed via Qt's Resource System or installed as assets.
      This file's main relevance to this WBS task is informational, confirming the project uses embedded XPMs for UI elements beyond the main application icon. The core packaging work for BUILD-02 will focus on the main application icon identified in `application.cpp`.
qt6_migration_steps: |
  1. **Locate Icon Source:** The primary application icon is `editor_icon.xpm`, found within `wxwidgets/brushes/icon/`.
  2. **Convert Icon Formats:**
     - Create a high-resolution PNG from `editor_icon.xpm` (e.g., 512x512 or 1024x1024).
     - For Windows: Generate an `.ico` file containing multiple sizes (e.g., 16x16, 32x32, 48x48, 256x256) from the high-res PNG.
     - For macOS: Generate a set of PNGs (16x16, 32x32, 64x64, 128x128, 256x256, 512x512, 1024x1024) and package them into an `.icns` file.
     - For Linux: Prepare PNG icons in various sizes (e.g., 64x64, 128x128, 256x256, 512x512).
     - Store these converted icons in a new `packaging/icons/` directory within the source tree.
  3. **Integrate CPack:**
     - In the root `CMakeLists.txt` (from `BUILD-01`), include the CPack module: `include(CPack)`.
  4. **Configure CPack Variables (in `CMakeLists.txt` or a `CPackConfig.cmake` file):**
     - `SET(CPACK_PACKAGE_NAME "RME-Qt")`
     - `SET(CPACK_PACKAGE_VERSION_MAJOR "0")` (Adjust as per project versioning)
     - `SET(CPACK_PACKAGE_VERSION_MINOR "1")`
     - `SET(CPACK_PACKAGE_VERSION_PATCH "0")`
     - `SET(CPACK_PACKAGE_VENDOR "Remere's Map Editor Team")`
     - `SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A modern map editor for OTBM maps")`
     - `SET(CPACK_PACKAGE_CONTACT "YourContactEmailOrProjectURL")`
     - `SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")` (Assuming COPYING file exists)
     - `SET(CPACK_PACKAGE_INSTALL_DIRECTORY "RME-Qt")`
  5. **Platform-Specific CPack Settings:**
     - **Windows (WIX):**
       - `SET(CPACK_GENERATOR "WIX")`
       - `SET(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_SOURCE_DIR}/packaging/icons/RME-Qt.ico")`
       - `SET(CPACK_WIX_UPGRADE_GUID "YOUR_UNIQUE_GUID_HERE")` (Generate a new GUID)
       - `SET(CPACK_WIX_PRODUCT_ICON "${CMAKE_CURRENT_SOURCE_DIR}/packaging/icons/RME-Qt.ico")`
       - Consider `CPACK_WIX_UI_REF` for custom UI elements if needed (e.g., `WixUI_InstallDir`).
     - **macOS (Bundle or DragNDrop for DMG):**
       - `SET(CPACK_GENERATOR "Bundle;DragNDrop")` (Generates .app then DMG)
       - Set `MACOSX_BUNDLE_ICON_FILE` target property for `RME_Qt` executable to `packaging/icons/RME-Qt.icns`.
       - `SET(CPACK_BUNDLE_NAME "RME-Qt")`
       - `SET(CPACK_BUNDLE_ICON "${CMAKE_CURRENT_SOURCE_DIR}/packaging/icons/RME-Qt.icns")`
       - `SET(CPACK_BUNDLE_PLIST "${CMAKE_CURRENT_SOURCE_DIR}/packaging/macos/Info.plist")` (Create a basic Info.plist if not already managed by CMake)
     - **Linux (DEB and RPM):**
       - `SET(CPACK_GENERATOR "DEB;RPM")`
       - `SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Your Name <your.email@example.com>")`
       - `SET(CPACK_DEBIAN_PACKAGE_SECTION "editors")`
       - `SET(CPACK_RPM_PACKAGE_GROUP "Applications/Editors")`
       - `SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")` (if applicable)
  6. **CMake `install()` Rules:**
     - Main Executable: `install(TARGETS RME_Qt RUNTIME DESTINATION bin BUNDLE DESTINATION .)`
     - Icons:
       - Windows: Icon embedding in executable typically handled by setting `WIN32_EXECUTABLE` and an `.rc` file. CPack uses `CPACK_PACKAGE_ICON`.
       - macOS: `MACOSX_BUNDLE_ICON_FILE` handles .app icon. `CPACK_BUNDLE_ICON` for DMG.
       - Linux: `install(FILES packaging/icons/RME-Qt-256.png DESTINATION share/pixmaps RENAME ${CPACK_PACKAGE_NAME}.png)` (and other sizes if needed in `share/icons/hicolor/...`).
     - `.desktop` file (Linux):
       - Create `packaging/linux/RME-Qt.desktop` file.
       - `install(FILES packaging/linux/RME-Qt.desktop DESTINATION share/applications)`
       - (Consider using `ECMGenerateDesktopFile` from KDE's Extra CMake Modules for more robust generation).
     - Data Files: `install(DIRECTORY XML/ DESTINATION data/XML/)` (Ensure paths are correct for runtime access, potentially using `CMAKE_INSTALL_PREFIX`).
  7. **Qt Runtime Bundling:**
     - Windows: Use `windeployqt` (can be an `install(CODE ...)` step or a post-build script).
       `install(CODE "execute_process(COMMAND windeployqt --qmldir \"${CMAKE_SOURCE_DIR}\" \"$<TARGET_FILE:RME_Qt>\" --copydll 1 --compiler-runtime)")` (Adjust paths and options).
     - macOS: Use `macdeployqt`.
       `install(CODE "execute_process(COMMAND macdeployqt \"$<TARGET_FILE_DIR:RME_Qt>/RME-Qt.app\" -dmg)")`
     - Linux: Set `CMAKE_INSTALL_RPATH` appropriately and ensure users have Qt6 runtime. `INSTALL_RPATH "\$ORIGIN:\$ORIGIN/../lib"` is common.
  8. **Testing:** Build packages (`make package` or `cpack`) and test installation on each target platform.
definition_of_done: |
  - The CMake build system (from BUILD-01) is extended with CPack configurations to produce platform-native installers/packages.
  - Generates an MSI installer for Windows.
  - Generates a DMG image (containing an .app bundle) for macOS.
  - Generates a .deb package for Debian-based Linux (RPM is optional but good).
  - The application icon (derived from `wxwidgets/brushes/icon/editor_icon.xpm` and stored in `packaging/icons/`) is correctly:
    - Displayed by the installers/packages (where applicable).
    - Associated with the installed application (e.g., in shortcuts, .app bundle, window decorations).
    - Visible in the respective OS application menus/launchers (via `.desktop` file on Linux).
  - CPack configuration includes necessary metadata (name, version, vendor, description, license).
  - Installers correctly place executables, essential data files (like `XML/clients.xml`), and icons in standard/appropriate locations.
  - The created packages are installable, and the application launches correctly from the installed location, finding all its resources.
  - Qt runtime dependencies are correctly bundled for Windows and macOS, and RPATH settings are appropriate for Linux.
estimation_effort: Medium-High (10-15 developer days)
boilerplate_coder_ai_prompt: |
  Extend the CMake build system (from task BUILD-01) to support packaging with CPack for Windows (MSI), macOS (DMG with .app bundle), and Linux (.deb).

  **Assumptions:**
  - Main executable target is `RME_Qt`.
  - Source for icons: `wxwidgets/brushes/icon/editor_icon.xpm`.
  - Data files (e.g., `XML/clients.xml`) are located in an `XML/` directory at the project root.

  **Tasks:**
  1.  **Icon Preparation (Manual Step - Describe for user, AI cannot do this):**
      - Convert `editor_icon.xpm` into:
          - `packaging/icons/RME-Qt.ico` (for Windows, multi-resolution: 16x16, 32x32, 48x48, 256x256).
          - `packaging/icons/RME-Qt.icns` (for macOS, from multiple PNGs like 16,32,64,128,256,512,1024px).
          - `packaging/icons/RME-Qt-256.png` (or similar high-res PNG for Linux).
      - Create the `packaging/icons/` directory and add these files.

  2.  **CMakeLists.txt Modifications:**
      ```cmake
      # (Existing CMake setup from BUILD-01)
      # ...

      # --- CPack Integration ---
      include(CPack)

      # General CPack settings
      set(CPACK_PACKAGE_NAME "RME-Qt")
      set(CPACK_PACKAGE_VERSION_MAJOR "0")
      set(CPACK_PACKAGE_VERSION_MINOR "1")
      set(CPACK_PACKAGE_VERSION_PATCH "0")
      set(CPACK_PACKAGE_VERSION "\${CPACK_PACKAGE_VERSION_MAJOR}.\${CPACK_PACKAGE_VERSION_MINOR}.\${CPACK_PACKAGE_VERSION_PATCH}")
      set(CPACK_PACKAGE_VENDOR "Remere's Map Editor Team")
      set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A modern map editor for OTBM maps")
      set(CPACK_PACKAGE_CONTACT "https://github.com/rme-mapeditor/rme-qt") # Replace with actual contact/URL
      if(EXISTS "\${CMAKE_CURRENT_SOURCE_DIR}/COPYING")
          set(CPACK_RESOURCE_FILE_LICENSE "\${CMAKE_CURRENT_SOURCE_DIR}/COPYING")
      endif()
      set(CPACK_PACKAGE_INSTALL_DIRECTORY "RME-Qt")

      # Windows specific (WIX)
      if(WIN32)
          set(CPACK_GENERATOR "WIX")
          set(CPACK_PACKAGE_ICON "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/icons/RME-Qt.ico")
          set(CPACK_WIX_PRODUCT_ICON "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/icons/RME-Qt.ico")
          # Generate a new GUID for your project: https://www.guidgenerator.com/
          set(CPACK_WIX_UPGRADE_GUID "PUT_A_UNIQUE_GUID_HERE") # Replace with a real GUID
          set(CPACK_WIX_UI_REF "WixUI_InstallDir") # Allows user to choose installation directory
          # To embed icon in .exe, you'd typically use a .rc file compiled with the sources
          # For now, we ensure the installer uses it.
      endif()

      # macOS specific (Bundle & DragNDrop for DMG)
      if(APPLE)
          set(CPACK_GENERATOR "Bundle;DragNDrop") # Or just "DragNDrop" if Bundle is already created by CMake
          set_target_properties(RME_Qt PROPERTIES
              MACOSX_BUNDLE_ICON_FILE "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/icons/RME-Qt.icns"
              MACOSX_BUNDLE_BUNDLE_NAME "RME-Qt"
              # MACOSX_BUNDLE_INFO_PLIST "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/macos/Info.plist" # Create if needed
          )
          set(CPACK_BUNDLE_NAME "RME-Qt") # For CPack Bundle generator if used standalone
          set(CPACK_DMG_BACKGROUND_IMAGE "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/macos/dmg_background.png") # Optional DMG background
          set(CPACK_DMG_WINDOW_POSITION "200 120")
          set(CPACK_DMG_WINDOW_SIZE "600 400")
          set(CPACK_DMG_DS_STORE_SETUP_SCRIPT "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/macos/setup_dmg_ds_store.sh") # Optional script for .DS_Store
          # The .app icon is set by MACOSX_BUNDLE_ICON_FILE. CPACK_PACKAGE_ICON is for DMG.
          set(CPACK_PACKAGE_ICON "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/icons/RME-Qt.icns")

      endif()

      # Linux specific (DEB & RPM)
      if(UNIX AND NOT APPLE)
          set(CPACK_GENERATOR "DEB;RPM") # User can choose which one to build
          set(CPACK_DEBIAN_PACKAGE_MAINTAINER "RME Team <contact@example.com>") # Replace
          set(CPACK_DEBIAN_PACKAGE_SECTION "editors")
          set(CPACK_DEBIAN_PACKAGE_DEPENDS "qt6-base-gui (>= 6.2.0)") # Example, adjust Qt version and components
          set(CPACK_RPM_PACKAGE_GROUP "Applications/Editors")
          set(CPACK_RPM_PACKAGE_REQUIRES "qt6-qtbase-gui >= 6.2.0") # Example
          if(EXISTS "\${CMAKE_CURRENT_SOURCE_DIR}/README.md")
              set(CPACK_PACKAGE_DESCRIPTION_FILE "\${CMAKE_CURRENT_SOURCE_DIR}/README.md")
          endif()
          # Icon installation for Linux is handled by install() commands below
      endif()

      # --- Installation Rules ---
      install(TARGETS RME_Qt
          RUNTIME DESTINATION bin  # Installs executable to 'bin'
          BUNDLE DESTINATION .    # For macOS, installs .app to root of DMG
          LIBRARY DESTINATION lib  # For shared libraries if any
          ARCHIVE DESTINATION lib  # For static libraries if any
      )

      # Install data files (e.g., XML configurations)
      install(DIRECTORY "\${CMAKE_CURRENT_SOURCE_DIR}/XML/"
          DESTINATION data/XML
          FILES_MATCHING PATTERN "*.xml" PATTERN "*.otb"
      )
      # Add more install(DIRECTORY ...) for other data like sprites, if not using Qt resources

      if(UNIX AND NOT APPLE)
          # Install Linux application icon
          install(FILES "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/icons/RME-Qt-256.png"
              DESTINATION share/pixmaps RENAME RME-Qt.png) # Renames to RME-Qt.png in share/pixmaps

          # Create and install .desktop file
          # (Content of RME-Qt.desktop)
          # [Desktop Entry]
          # Name=RME-Qt
          # Comment=Remere's Map Editor - Qt Version
          # Exec=RME-Qt %f
          # Icon=RME-Qt
          # Terminal=false
          # Type=Application
          # Categories=Development;Graphics;2DGraphics;
          # StartupWMClass=RME-Qt
          # MimeType=application/octet-stream;

          # Configure the .desktop file, e.g. replace a version placeholder
          # configure_file("\${CMAKE_CURRENT_SOURCE_DIR}/packaging/linux/RME-Qt.desktop.in" "\${CMAKE_CURRENT_BINARY_DIR}/RME-Qt.desktop" @ONLY)
          # install(FILES "\${CMAKE_CURRENT_BINARY_DIR}/RME-Qt.desktop" DESTINATION share/applications)
          # For simplicity now, assuming a static .desktop file:
          install(FILES "\${CMAKE_CURRENT_SOURCE_DIR}/packaging/linux/RME-Qt.desktop" DESTINATION share/applications)
      endif()

      # --- Qt Runtime Bundling (Conceptual - requires platform-specific execution) ---
      if(WIN32)
          # Add a custom target to run windeployqt after build
          add_custom_command(TARGET RME_Qt POST_BUILD
              COMMAND \${Qt6_BIN_DIR}/windeployqt.exe --qmldir "\${CMAKE_CURRENT_SOURCE_DIR}" "$<TARGET_FILE:RME_Qt>"
              COMMENT "Running windeployqt..."
          )
      elseif(APPLE)
          # macdeployqt is often run manually or via a script after building the .app
          # CPack's Bundle generator can help, or use a custom command.
          # Example:
          # add_custom_command(TARGET RME_Qt POST_BUILD
          #     COMMAND \${Qt6_BIN_DIR}/macdeployqt "$<TARGET_FILE_DIR:RME_Qt>/RME-Qt.app" -dmg # -dmg is optional
          #     COMMENT "Running macdeployqt..."
          # )
      else() # Linux
          # Set RPATH to find Qt libs relative to executable if not in standard system paths
          set(CMAKE_INSTALL_RPATH "$ORIGIN:\$ORIGIN/../lib") # Adjust if Qt libs are placed elsewhere by deployment
          set(CMAKE_BUILD_WITH_INSTALL_RPATH ON)
      endif()

      # This should be the last line in your root CMakeLists.txt
      include(CPack)
      ```
  **Note for User:**
  - You will need to create the `packaging/icons/` directory and populate it with the converted `.ico`, `.icns`, and `.png` files.
  - You will need to create a basic `packaging/linux/RME-Qt.desktop` file.
  - For macOS, you might need a `packaging/macos/Info.plist` and potentially `dmg_background.png` and `setup_dmg_ds_store.sh` if you want a customized DMG.
  - The Qt runtime bundling steps (especially for Windows and macOS) are complex and might require further refinement and testing in the actual build environment. `windeployqt` and `macdeployqt` are powerful tools for this.
documentation_references:
  - "https://cmake.org/cmake/help/latest/module/CPack.html"
  - "https://cmake.org/cmake/help/latest/module/CPackComponent.html"
  - "https://cmake.org/cmake/help/latest/cpack_gen/wix.html"
  - "https://cmake.org/cmake/help/latest/cpack_gen/dmg.html"
  - "https://cmake.org/cmake/help/latest/cpack_gen/deb.html"
  - "https://cmake.org/cmake/help/latest/cpack_gen/bundle.html"
  - "https://doc.qt.io/qt-6/linux-deployment.html"
  - "https://doc.qt.io/qt-6/windows-deployment.html"
  - "https://doc.qt.io/qt-6/macos-deployment.html"
  - "https://specifications.freedesktop.org/desktop-entry-spec/latest/"
  - "https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFBundles/BundleTypes/BundleTypes.html#//apple_ref/doc/uid/10000123i-CH101-SW1"
