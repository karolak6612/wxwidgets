# qlementine_documentation.XML
# Detailed documentation for the Qlementine Qt styling library, for AI Coding Assistant.

overview: |
  Qlementine is a Qt library that provides a modern QStyle (`QlementineStyle`)
  for Qt6 desktop applications. It offers a themable look and feel,
  a collection of custom widgets, and utility functions to enhance Qt applications.
  It uses Qt's resource system for its assets, which needs initialization.

cmake_integration: |
  To integrate Qlementine when it's available locally within the project
  (e.g., in a 'qlementine/' subdirectory):
  1. Add Qlementine to your main CMake project:
     `add_subdirectory(qlementine)`
  2. Link your application target against the 'qlementine' library:
     `target_link_libraries(your_app_target PRIVATE qlementine)`

initialization:
  style_setup: |
    To apply Qlementine styling globally to your application:
    1. Include the main QlementineStyle header:
       `#include <oclero/qlementine/style/QlementineStyle.hpp>`
    2. In your `main.cpp`, after creating the QApplication instance:
       ```cpp
       QApplication app(argc, argv);
       // Initialize Qlementine resources (fonts, default themes, etc.)
       oclero::qlementine::resources::initializeResources();

       auto* style = new oclero::qlementine::QlementineStyle(&app);
       QApplication::setStyle(style);
       // Optionally, set a specific theme (see Theming section)
       ```
  resource_initialization: |
    Qlementine uses internal resources (like fonts, icons, default themes).
    These must be initialized early in the application startup.
    Include: `#include <oclero/qlementine/resources/ResourceInitialization.hpp>`
    Call: `oclero::qlementine::resources::initializeResources();`

core_components:
  qlementine_style:
    description: |
      The main style engine, inheriting `QCommonStyle`.
      It's responsible for drawing all styled widgets.
    header: <oclero/qlementine/style/QlementineStyle.hpp>
    usage: See 'initialization.style_setup'.
    key_methods:
      - `setTheme(const Theme& theme)`: Apply a Theme object.
      - `setThemeJsonPath(const QString& jsonPath)`: Load and apply a theme from a JSON file path (usually from Qt resources, e.g., ":/themes/mytheme.json").
      - `theme() const`: Get the current Theme object.
      - `animationsEnabled() / setAnimationsEnabled(bool)`: Control UI animations.
      - `makeThemedIcon(const QString& svgPath, ...)`: Create a QIcon from an SVG, themed according to the current style.
      - `makeThemedIconFromName(const QString& name, ...)`: Create a themed QIcon by name (requires setup with `setIconPathGetter`).
    notes: |
      Provides many virtual methods (e.g., `buttonBackgroundColor`, `listItemForegroundColor`)
      that can be overridden for deep customization, though direct theme modification via JSON
      is the primary method. Defines extended enums like `StandardPixmapExt`, `ControlElementExt`.

  theme:
    description: |
      A class holding all aesthetic properties for a Qlementine style: colors, fonts,
      sizes, border radii, etc. Themes are typically defined in JSON files.
    header: <oclero/qlementine/style/Theme.hpp>
    structure: |
      - `meta`: (ThemeMeta) Contains name, version, author.
      - Color properties: e.g., `backgroundColorMain1`, `primaryColor`, `neutralColor`, `statusColorSuccess`, `borderColor`, etc. Many colors also have `Hovered`, `Pressed`, `Disabled` variants.
      - Font properties: `fontSize`, `fontSizeH1`, etc., and actual `QFont` objects like `fontRegular`, `fontH1`.
      - Size/Metric properties: `borderRadius`, `spacing`, `controlHeightLarge`, `iconSize`, etc.
      - Boolean flags: `useSystemFonts`.
    json_format: |
      Themes are loaded from JSON files. See `qlementine/docs/theme.md` for the detailed
      JSON structure and available keys. Example:
      ```json
      {
        "meta": { "name": "My Custom Theme", "version": "1.0", "author": "Me" },
        "primaryColor": "#ff0000",
        "fontSize": 12
      }
      ```
    key_methods:
      - `Theme::fromJsonPath(const QString& jsonPath)`: Static factory to load a theme.
      - `Theme::fromJsonDoc(const QJsonDocument& jsonDoc)`: Static factory.

  theme_manager:
    description: |
      Manages a collection of Theme objects and applies them to a QlementineStyle instance.
      Useful for applications supporting multiple themes (e.g., light/dark).
    header: <oclero/qlementine/style/ThemeManager.hpp>
    usage: |
      ```cpp
      // Assuming 'style' is your QlementineStyle instance
      auto* themeManager = new oclero::qlementine::ThemeManager(style, &app);
      themeManager->loadDirectory(":/themes"); // Load all .json themes from this resource path
      themeManager->setCurrentTheme("MyDarkThemeName"); // Set theme by name defined in JSON's meta.name
      ```
    key_methods:
      - `ThemeManager(QlementineStyle* style, QObject* parent = nullptr)`: Constructor.
      - `setStyle(QlementineStyle* style)`
      - `addTheme(const Theme& theme)`
      - `loadDirectory(const QString& path)`: Loads all theme JSON files from a directory.
      - `setCurrentTheme(const QString& key)`: Sets theme by its name.
      - `setCurrentThemeIndex(int index)`
      - `themes() const`: Returns a vector of loaded themes.

key_enums:
  description: |
    These enums, primarily from `<oclero/qlementine/Common.hpp>`, are used by QlementineStyle
    and custom widgets to determine appearance based on state and role.
  list:
    - `MouseState`: Transparent, Normal, Hovered, Pressed, Disabled.
    - `CheckState`: NotChecked, Checked, Indeterminate.
    - `FocusState`: NotFocused, Focused.
    - `Status`: Default, Info, Success, Warning, Error (used by LineEdit, etc.).
    - `TextRole`: Caption, Default, H1, H2, H3, H4, H5 (used by Label).
    - `ColorRole`: Primary, Secondary (used for icon/text color emphasis).
    - `ActiveState`: NotActive, Active.
    - `SelectionState`: NotSelected, Selected.
    - `AlternateState`: NotAlternate, Alternate.
    - `DefaultState`: NotDefault, Default.

custom_widgets:
  description: |
    Qlementine provides several custom widgets. Most reside in the
    `<oclero/qlementine/widgets/...>` headers.
  list:
    - widget: AboutDialog
      header: <oclero/qlementine/widgets/AboutDialog.hpp>
      description: Standard "About" dialog for applications. Settable properties for icon, name, version, description, website, license, copyright.
    - widget: AbstractItemListWidget
      header: <oclero/qlementine/widgets/AbstractItemListWidget.hpp>
      description: Base class for NavigationBar and SegmentedControl.
    - widget: Action
      header: <oclero/qlementine/widgets/Action.hpp>
      description: Enhanced QAction, possibly with predicate-based state updates.
    - widget: ActionButton
      header: <oclero/qlementine/widgets/ActionButton.hpp>
      description: QPushButton linked to an oclero::qlementine::Action.
    - widget: ColorButton
      header: <oclero/qlementine/widgets/ColorButton.hpp>
      description: Button for picking and displaying a QColor.
    - widget: ColorEditor
      header: <oclero/qlementine/widgets/ColorEditor.hpp>
      description: Combines a ColorButton with a QLineEdit to display/edit color hex values.
    - widget: CommandLinkButton
      header: <oclero/qlementine/widgets/CommandLinkButton.hpp>
      description: Improved QCommandLinkButton.
    - widget: Expander
      header: <oclero/qlementine/widgets/Expander.hpp>
      description: Widget container that can expand/collapse its content with animation. Supports vertical and horizontal orientation. Has `expanded` property and `content` property.
    - widget: FramelessWindow
      header: <oclero/qlementine/widgets/FramelessWindow.hpp>
      description: (Likely a QWindow or QWidget for creating custom frameless windows, details not fully parsed from headers alone).
    - widget: IconWidget
      header: <oclero/qlementine/widgets/IconWidget.hpp>
      description: A simple widget to display an icon.
    - widget: Label
      header: <oclero/qlementine/widgets/Label.hpp>
      description: Enhanced QLabel that supports `TextRole` (H1, Default, etc.) for automatic styling based on the current theme.
    - widget: LineEdit
      header: <oclero/qlementine/widgets/LineEdit.hpp>
      description: Enhanced QLineEdit that can display an icon and a `Status` (e.g., Error, Success), which affects its visual appearance. Property `icon`, `status`.
    - widget: LoadingSpinner
      header: <oclero/qlementine/widgets/LoadingSpinner.hpp>
      description: Animated circular spinner widget to indicate busy status. Property `spinning`.
    - widget: Menu
      header: <oclero/qlementine/widgets/Menu.hpp>
      description: Enhanced QMenu, possibly with predicate-based state updates.
    - widget: NavigationBar
      header: <oclero/qlementine/widgets/NavigationBar.hpp>
      description: Navigation widget, typically used for switching between main views/pages.
    - widget: PlainTextEdit
      header: <oclero/qlementine/widgets/PlainTextEdit.hpp>
      description: (Likely an enhanced QPlainTextEdit, specific features TBD from deeper source analysis or usage).
    - widget: Popover
      header: <oclero/qlementine/widgets/Popover.hpp>
      description: A lightweight popup window, often used for transient views or controls.
    - widget: PopoverButton
      header: <oclero/qlementine/widgets/PopoverButton.hpp>
      description: A button that triggers a Popover.
    - widget: RoundedFocusFrame
      header: <oclero/qlementine/widgets/RoundedFocusFrame.hpp>
      description: A QFocusFrame with rounded corners, used by widgets like Switch.
    - widget: SegmentedControl
      header: <oclero/qlementine/widgets/SegmentedControl.hpp>
      description: A control with multiple segments, allowing selection of one segment (like a tab bar but often used for modes/options).
    - widget: StatusBadgeWidget
      header: <oclero/qlementine/widgets/StatusBadgeWidget.hpp>
      description: Displays a status icon (info, warning, error, success).
    - widget: Switch
      header: <oclero/qlementine/widgets/Switch.hpp>
      description: A toggle switch button (like on mobile UIs). Inherits QAbstractButton, properties `checked`. Animates its state change.

utilities:
  description: |
    Qlementine includes various utility functions and classes, generally found under
    `<oclero/qlementine/utils/...>`. These assist with common tasks related to styling.
  categories:
    - AnimationUtils: For widget animations.
    - BadgeUtils: For status badges.
    - BlurUtils: For blur effects (potentially).
    - ColorUtils: Manipulating and converting colors.
    - FontUtils: Working with fonts.
    - GeometryUtils: Geometric calculations.
    - IconUtils: Icon manipulation and theming.
    - ImageUtils: Image processing.
    - LayoutUtils: Helpers for layouts.
    - MenuUtils: Utilities for QMenu.
    - PrimitiveUtils: Drawing primitives.
    - RadiusesF: Handling floating point corner radiuses.
    - StateUtils: Managing widget states.
    - StyleUtils: General styling helpers.
    - WidgetUtils: General QWidget utilities.

key_include_paths:
  main_style_api: "<oclero/qlementine/style/QlementineStyle.hpp>"
  theme_api: "<oclero/qlementine/style/Theme.hpp>"
  theme_manager_api: "<oclero/qlementine/style/ThemeManager.hpp>"
  common_enums: "<oclero/qlementine/Common.hpp>"
  widgets_namespace: "<oclero/qlementine/widgets/...>" # e.g., <oclero/qlementine/widgets/Switch.hpp>
  resource_init: "<oclero/qlementine/resources/ResourceInitialization.hpp>"

notes_for_ai_assistant: |
  - When using Qlementine widgets or APIs, always ensure `oclero::qlementine::resources::initializeResources()` has been called once.
  - To apply styling, instantiate `oclero::qlementine::QlementineStyle` and set it on `QApplication`.
  - Themes are primarily controlled via JSON files. Refer to `qlementine/docs/theme.md` for the JSON spec.
  - Custom widgets often have properties that integrate with the theme system (e.g., `Label::setRole`, `LineEdit::setStatus`).
  - The `Common.hpp` enums are fundamental to understanding how widget states are communicated to the style engine.
