<?xml version="1.0" ?>
<CORE-03>
  <id>CORE-03</id>
  <section>Core Migration Tasks</section>
  <title>Port Map Data Structure &amp; Non-Rendering Logic</title>
  <original_input_files>
    <original_input_file>wxwidgets/basemap.h</original_input_file>
    <original_input_file>wxwidgets/map.h</original_input_file>
    <original_input_file>wxwidgets/map.cpp</original_input_file>
    <original_input_file>wxwidgets/tile.h</original_input_file>
    <original_input_file>wxwidgets/item.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/basemap.h</file_path>
      <description>Defines `BaseMap`, the foundational class for map data storage, and its associated helper class `MapIterator`. `TileLocation` is also heavily used.
`BaseMap` uses a QuadTree structure (`QTreeNode root`). The implementation of `QTreeNode` and the `Floor` objects it manages (which likely store 2D arrays of `TileLocation` or `Tile*`) are expected to be in `map_allocator.h/cpp` (not provided here, but essential for full mechanism understanding). `BaseMap` provides low-level methods like `getTileL`, `createTileL`, `setTile` that interact with this QuadTree.
An instance of `MapAllocator` is included for efficient memory management of `Tile` objects.
The `MapIterator` allows iteration over all tiles in the map using a stack of `NodeIndex` (QTreeNode* + index) to manage traversal.
This class is crucial for the underlying storage and spatial indexing of map tiles.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/map.h</file_path>
      <description>Defines the `Map` class, which derives from `BaseMap`.
It extends `BaseMap` by adding higher-level map attributes and management features:
- Map metadata: `width`, `height`, `description`, `mapVersion` (a `MapVersion` struct), `housefile`, `spawnfile`, `waypointfile` (all strings).
- Collections of game elements: `Towns towns`, `Houses houses`, `Spawns spawns`, `Waypoints waypoints` (these are instances of dedicated manager classes).
Provides methods for map-wide operations such as format conversion (`convert`), minimap export (`exportMinimap`), cleaning invalid tiles, and managing the map's changed state (`hasChanged`, `doChange`, `clearChanges`).
Defines helper templates like `foreach_ItemOnMap`, `foreach_TileOnMap`, `remove_if_TileOnMap`, `RemoveItemOnMap` for complex iteration and modification tasks.
Includes `PropertyFlags` struct for fine-grained control in operations like item cleanup (`cleanDuplicateItems`).
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/map.cpp</file_path>
      <description>Implementation of the `Map` class.
Handles initialization of map properties. Loading of maps is delegated to IOMap classes (e.g., `IOMapOTBM` mentioned in `Map::open`).
The `Map::convert` method handles map version transformations, which can involve complex item ID remapping via `ConversionMap` (details not fully provided).
`Map::cleanInvalidTiles` uses `g_items.typeExists()` to validate items.
`Map::exportMinimap` includes logic for finding map bounds, rendering tile colors to a buffer, and writing a BMP file directly.
Spawn management methods (`addSpawn`, `removeSpawn`, `getSpawnList`) interact with `TileLocation`'s spawn counts and the `Spawns` collection.
`Map::cleanDuplicateItems` uses `PropertyFlags` and helper lambdas to identify and remove duplicate items based on ID and other properties.
The actual QuadTree manipulation logic is largely within `BaseMap` and the external `QTreeNode`/`Floor` implementations.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/tile.h</file_path>
      <description>(Analyzed in CORE-01, context for CORE-03) Defines the `Tile` class, the fundamental unit stored and managed by `BaseMap` and `Map`.
The `Map` uses a QuadTree of `Floor` objects, which store arrays of `Tile` pointers (or `TileLocation` objects).
All map operations that involve modifying or querying tile content (items, creatures, flags) rely on the `Tile` class structure.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/item.h</file_path>
      <description>(Analyzed in CORE-01, context for CORE-03) Defines the `Item` class. `Tile` objects within the `Map` contain `Item` instances.
Map-level operations, such as adding/removing items from tiles or searching for specific items, interact with `Item` objects.
The `Map` class's functionality is dependent on how `Item` objects are defined and managed within `Tile`s.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>BUILD-01</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-02</dependencie>
  </dependencies>
  <current_functionality_summary>The map is represented by the `Map` class, which inherits from `BaseMap`.
- `BaseMap` uses a QuadTree (`QTreeNode`) to store tiles. Each leaf node in the QuadTree likely points to a `Floor` object (or similar structure) which then holds a 2D array of `Tile` pointers or `TileLocation` objects for a specific Z-level within that quad. This allows for sparse storage of map data.
- `MapAllocator` is used for efficient allocation/deallocation of `Tile` objects.
- `MapIterator` provides a way to iterate over all valid tiles in the map.
- The `Map` class adds metadata like width, height, description, client/OTBM version, and filenames for houses, spawns. It also manages collections of `Town`, `House`, `Spawn`, and `Waypoint` objects.
- Operations include getting/setting tiles, creating tiles, iterating tiles, managing spawns, houses, towns, waypoints, converting map formats, cleaning invalid tiles, and exporting minimaps.
- The system is tightly coupled with `Tile` and `Item` structures.
</current_functionality_summary>
  <qt6_migration_steps>1.  **Design `BaseMap` and `Map` Classes (in `mapcore/map/`):**
    -   Define `BaseMap.h` and `Map.h` (and corresponding .cpp files).
    -   The `BaseMap` class will encapsulate the core tile storage mechanism. Port the QuadTree logic (`QTreeNode` and `Floor` equivalent). If `QTreeNode` is complex, it might need its own file(s).
        -   Consider using `std::vector` or `QVector` for floor tile arrays.
        -   Tiles should be stored as `std::unique_ptr&lt;Tile&gt;` or managed by a custom allocator similar to `MapAllocator` if performance is critical. For initial port, `std::unique_ptr&lt;Tile&gt;` within `Floor` objects is safer.
    -   The `Map` class will inherit from `BaseMap` and manage metadata (width, height, description, version) and collections (Towns, Houses, Spawns, Waypoints - these can be placeholder classes/structs initially if their full porting is a separate task).

2.  **Port `TileLocation` (if distinct from `Position`):**
    -   If `TileLocation` (referenced in `Tile.h`) provides more than just `Position` (e.g., direct access to containing `Floor` or QuadTree node, house exit lists), define this class. Otherwise, `Position` might suffice for identifying tiles. House exit lists and spawn counts might be better managed by dedicated manager classes or directly by the `Map` querying tiles.

3.  **Port `MapAllocator`:**
    -   If the custom `MapAllocator` provides significant benefits over standard allocators with smart pointers, port its logic. Otherwise, rely on `std::make_unique` for `Tile` creation.

4.  **Implement Tile Accessors in `BaseMap`:**
    -   Port `getTile(Position)`, `createTile(Position)`, `setTile(Position, std::unique_ptr&lt;Tile&gt; newTile)`.
    -   Ensure these correctly interact with the QuadTree and Floor structures.

5.  **Implement `MapIterator`:**
    -   Adapt `MapIterator` to work with the new QuadTree and Floor structures. This is crucial for iterating all tiles.

6.  **Implement `Map` Class Functionality:**
    -   Port constructors and destructor.
    -   Port metadata accessors/mutators (width, height, description, version, filenames).
    -   Port management of `Towns`, `Houses`, `Spawns`, `Waypoints`. For now, these can be simple collections of IDs or basic data structs. Their full functionality can be ported in dedicated tasks.
    -   Port `doChange()`, `clearChanges()`, `hasChanged()`.
    -   Stub out complex operations like `convert()`, `exportMinimap()`, `cleanInvalidTiles()` if they depend heavily on not-yet-ported systems (like specific I/O or brush logic). Focus on in-memory data integrity first.

7.  **Integrate with `CORE-01` Types:**
    -   Ensure the `Map` and `Tile` classes use the `Position` and `Item` classes ported in `CORE-01`.

8.  **Replace wxWidgets Types:** Remove any remaining `wxString`, `wxArrayString`, etc., with `std::string`/`QString`, `std::vector`/`QVector`.

9.  **Unit Tests:**
    -   Test `BaseMap` tile creation, retrieval, and deletion, including edge cases and QuadTree behavior.
    -   Test `MapIterator` to ensure it correctly iterates over all placed tiles.
    -   Test `Map` metadata management.
    -   Test basic `Town`, `House`, `Spawn`, `Waypoint` list management (add/remove/get).
    -   Test adding items to tiles via `Map::getOrCreateTile(pos)-&gt;addItem(...)`.
</qt6_migration_steps>
  <definition_of_done>- `BaseMap` and `Map` classes are implemented in `mapcore` with their core functionalities ported.
- The QuadTree tile storage mechanism (including `QTreeNode` and `Floor` equivalents) is functional, allowing efficient sparse storage and retrieval of `Tile` objects.
- `TileLocation` (if necessary) and `MapIterator` are correctly implemented and functional.
- `MapAllocator` logic is ported or replaced by standard smart pointer memory management.
- The `Map` class can store and manage its metadata (dimensions, description, version, associated filenames).
- Basic management of `Towns`, `Houses`, `Spawns`, and `Waypoints` (collections of objects or IDs) is implemented within the `Map` class.
- Core map operations are functional:
  - Getting/setting/creating tiles at specific positions.
  - Adding/removing items and creatures from tiles via map access (using `CORE-01` types).
- The map structure correctly uses `Position`, `Tile`, and `Item` classes from `CORE-01`.
- wxWidgets dependencies are removed from these classes.
- Unit tests for `BaseMap` (tile access, iteration) and `Map` (metadata, basic collection management) pass.
- The `mapcore` library components related to map structure compile successfully.
</definition_of_done>
  <boilerplate_coder_ai_prompt>You are to port the map data structure (`BaseMap`, `Map`, and associated helpers like `MapIterator`, `TileLocation`, `QTreeNode`, `Floor`) from an old C++ codebase (snippets from `basemap.h`, `map.h`, `map.cpp` will be provided) to a modern C++/Qt6 environment within a `mapcore` library. This task depends on `CORE-01` (for `Position`, `Tile`, `Item` classes) and `CORE-02` (for asset definitions).

**1. `BaseMap` Class (`mapcore/map/BaseMap.h/cpp`):**
   -   Implement the QuadTree structure (`QTreeNode` and `Floor` equivalents). A `QTreeNode` can recursively contain four child `QTreeNode`s or a `Floor` object. A `Floor` object stores a 2D grid (e.g., `std::vector&lt;std::vector&lt;std::unique_ptr&lt;Tile&gt;&gt;&gt;`) of tiles for a specific Z-level within its QuadTree leaf.
   -   Implement `Tile* getTile(const Position&amp; pos)`, `Tile* createTile(const Position&amp; pos)`, `void setTile(const Position&amp; pos, std::unique_ptr&lt;Tile&gt; newTile)`. These should navigate or modify the QuadTree.
   -   Port `MapAllocator` for `Tile` objects or use `std::make_unique&lt;Tile&gt;(...)`.
   -   Implement `MapIterator` to iterate over all valid `Tile` objects in the `BaseMap`.

**2. `Map` Class (`mapcore/map/Map.h/cpp`):**
   -   Derive `Map` from `BaseMap`.
   -   Store map metadata: `width`, `height` (integers), `description` (`std::string`), `mapVersion` (struct with OTBM version and client version ID), `housefile`, `spawnfile`, `waypointfile` (`std::string`).
   -   Manage collections for `Towns`, `Houses`, `Spawns`, `Waypoints`. These can be `std::vector&lt;TownData&gt;`, `std::map&lt;uint32_t, HouseData&gt;`, etc. (Define simple `TownData`, `HouseData`, `SpawnData`, `WaypointData` structs for now, full porting of these managers is separate).
   -   Implement methods for accessing and modifying this metadata.
   -   Implement `bool doChange()`, `void clearChanges()`, `bool hasChanged()`.
   -   Create stubs for complex methods like `convert()`, `exportMinimap()`, `cleanInvalidTiles()`.

**3. General Requirements:**
   -   Use `Position`, `Tile`, `Item` classes from `CORE-01`.
   -   Use standard C++17 features and Qt containers (`QVector`, `QMap`, `QString`) where appropriate and beneficial.
   -   Ensure proper memory management, especially for `Tile` objects in the QuadTree (prefer `std::unique_ptr`).
   -   Remove all wxWidgets dependencies.
   -   Provide header and source files.
   -   Write basic Qt Test unit tests for `BaseMap` (tile access, iteration) and `Map` (metadata management, basic list management for towns/houses).
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>QuadTree data structure: https://en.wikipedia.org/wiki/Quadtree</documentation_reference>
    <documentation_reference>Qt Core Data Types: https://doc.qt.io/qt-6/qtcore-module.html</documentation_reference>
    <documentation_reference>QVector: https://doc.qt.io/qt-6/qvector.html</documentation_reference>
    <documentation_reference>QMap: https://doc.qt.io/qt-6/qmap.html</documentation_reference>
    <documentation_reference>std::unique_ptr: https://en.cppreference.com/w/cpp/memory/unique_ptr</documentation_reference>
    <documentation_reference>std::vector: https://en.cppreference.com/w/cpp/container/vector</documentation_reference>
    <documentation_reference>C++ Standard Library: https://en.cppreference.com/w/cpp/header</documentation_reference>
  </documentation_references>
  <known_missing_files>
    <known_missing_file>wxwidgets/map_allocator.h and wxwidgets/map_allocator.cpp: These files likely contain the definitions for `QTreeNode`, `Floor`, and `MapAllocator`, which are essential for the detailed implementation of the QuadTree storage mechanism in `BaseMap`. Without them, the exact mechanics of QuadTree traversal and tile storage/retrieval are inferred from `BaseMap`'s public interface and usage.</known_missing_file>
  </known_missing_files>
  <estimation_effort>X-Large</estimation_effort>
</CORE-03>
