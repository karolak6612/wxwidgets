wbs_item_id: UI-09
name: Port Live Server Control Panel
description: Recreate the UI for managing a live editing server. This includes displaying
  connected clients, server logs/chat, server settings (port, password), and controls
  to start/stop the server.
dependencies:
- 'NET-02 # LiveServerQt logic that this UI will control and interact with.'
- 'UI-01  # Main window might host this as a dock widget or dialog.'
input_files:
- wxwidgets/live_server.cpp
- wxwidgets/live_server.h
- 'wxwidgets/main_menubar.cpp # Contains dialog logic for initiating server hosting.'
analyzed_input_files:
- file_path: wxwidgets/live_server.cpp
  description: Implements `LiveServer` class using Boost.Asio for network communication,
    client management, message broadcasting, and creating a `LiveLogTab` for UI feedback.
- file_path: wxwidgets/live_server.h
  description: Header for `LiveServer`, defining its interface for binding, closing,
    accepting clients, and broadcasting data.
- file_path: wxwidgets/main_menubar.cpp
  description: (Partially relevant) Contains event handlers like `OnStartLive` and
    `onServerHost` which create wxDialogs to get server configuration (name, port,
    password) before starting the LiveServer. (Content likely analyzed in UI-01).
documentation_references:
- 'QDialog: https://doc.qt.io/qt-6/qdialog.html'
- 'QDockWidget: https://doc.qt.io/qt-6/qdockwidget.html'
- 'QTcpServer: https://doc.qt.io/qt-6/qtcpserver.html'
- 'QTextEdit: https://doc.qt.io/qt-6/qtextedit.html (for logs/chat)'
- 'QListView / QStringListModel: https://doc.qt.io/qt-6/qlistview.html (for client
  list)'
- QSpinBox, QLineEdit, QPushButton for controls.
current_functionality_summary: 'The wxWidgets version initiates live server hosting
  via dialogs launched from the `MainMenuBar`. These dialogs collect server name (cosmetic),
  port, and password.

  The `LiveServer` class then handles binding to a port (with logic to try subsequent
  ports if the initial one is busy), accepting client connections (each managed as
  a `LivePeer`), and broadcasting map changes, cursor updates, and chat messages.

  A `LiveLogTab` is created by the `LiveServer` to display server messages, chat,
  and a list of connected clients. This tab is likely added to the main application''s
  tabbed interface.'
definition_of_done:
- A `LiveServerControlPanel` widget (e.g., a `QDialog` or a `QDockWidget`) is implemented
  in Qt6.
- 'The panel includes UI elements for:'
- '  - Inputting server port (`QSpinBox`) and password (`QLineEdit` with `Password`
  echo mode).'
- '  - A `QPushButton` to ''Start Server'' and another to ''Stop Server''.'
- '  - A `QTextEdit` (read-only) to display server logs, chat messages, and client
  connection/disconnection events.'
- '  - A `QListView` (with `QStringListModel` or custom model) to display names/IDs
  of currently connected clients.'
- '  - A `QLineEdit` and `QPushButton` for the server host to type and send chat messages.'
- 'The ''Start Server'' button action:'
- '  - Retrieves port and password from the UI controls.'
- '  - Instantiates and configures the `LiveServerQt` (from `NET-02`).'
- '  - Calls the `LiveServerQt`''s method to bind and start listening (replicating
  logic to try subsequent ports if initial one fails).'
- '  - Updates UI to reflect server running state (e.g., disable ''Start'', enable
  ''Stop'', log success/failure).'
- 'The ''Stop Server'' button action:'
- '  - Calls the `LiveServerQt`''s method to close connections and stop listening.'
- '  - Updates UI to reflect server stopped state.'
- The server log/chat `QTextEdit` is updated dynamically with messages from the `LiveServerQt`
  (e.g., via signals for log messages, received chat, client join/leave).
- The connected clients `QListView` is dynamically updated when clients connect or
  disconnect, based on signals from `LiveServerQt`.
- The host can send chat messages, which are then broadcast by `LiveServerQt`.
boilerplate_coder_ai_prompt: "Your task is to create the Qt6 UI for a Live Server\
  \ Control Panel. This panel will allow the user to configure, start, and stop a\
  \ live editing server, as well as monitor connected clients and server activity/chat.\n\
  \n**Reference Files:**\n- `wxwidgets/live_server.cpp` & `wxwidgets/live_server.h`:\
  \ For understanding `LiveServer`'s existing functionalities (port binding, client\
  \ management, logging, chat broadcasting).\n- `wxwidgets/main_menubar.cpp`: For\
  \ the dialogs used to gather server settings (`OnStartLive`, `onServerHost`).\n\n\
  **1. `LiveServerControlPanel` Widget (e.g., `QDialog` or `QDockWidget`):**\n\n \
  \  **Layout:**\n   - **Server Configuration GroupBox:**\n     - `QLabel` \"Port:\"\
  , `QSpinBox* portSpinBox;` (Range: 1-65535, Default: 31313).\n     - `QLabel` \"\
  Password:\", `QLineEdit* passwordEdit;` (Set `setEchoMode(QLineEdit::Password)`).\n\
  \   - **Controls:**\n     - `QPushButton* startServerButton;` (Text: \"Start Server\"\
  )\n     - `QPushButton* stopServerButton;` (Text: \"Stop Server\", initially disabled)\n\
  \   - **Client List GroupBox:**\n     - `QLabel` \"Connected Clients:\"\n     -\
  \ `QListView* clientListView;` (Use `QStringListModel` or a custom model if more\
  \ client info is needed).\n   - **Log & Chat GroupBox:**\n     - `QTextEdit* logTextEdit;`\
  \ (Set read-only: `setReadOnly(true)`).\n     - `QLineEdit* chatInputEdit;`\n  \
  \   - `QPushButton* sendChatButton;` (Text: \"Send\")\n\n   **Functionality:**\n\
  \   - **Initialization:**\n     - Load default/last used port and password into\
  \ `portSpinBox` and `passwordEdit` (e.g., from `QSettings`).\n   - **\"Start Server\"\
  \ Button Clicked:**\n     1. Retrieve `port` and `password` from UI controls.\n\
  \     2. Store these settings (e.g., using `QSettings`).\n     3. Create/access\
  \ the `LiveServerQt` instance (from `NET-02`).\n     4. Call a method like `liveServer->startListening(port,\
  \ password);`. This method in `LiveServerQt` should encapsulate the logic from `LiveServer::bind()`\
  \ including trying subsequent ports if the chosen one is busy.\n     5. If successful:\n\
  \        - Disable `startServerButton`, `portSpinBox`, `passwordEdit`.\n       \
  \ - Enable `stopServerButton`.\n        - Append \"Server started on [actual_host:actual_port]...\"\
  \ to `logTextEdit`.\n     6. If failed: Show a `QMessageBox::warning` with the error\
  \ from `LiveServerQt`.\n   - **\"Stop Server\" Button Clicked:**\n     1. Call `liveServer->closeServer();`.\n\
  \     2. Enable `startServerButton`, `portSpinBox`, `passwordEdit`.\n     3. Disable\
  \ `stopServerButton`.\n     4. Append \"Server stopped.\" to `logTextEdit`.\n  \
  \ - **`LiveServerQt` Signals -> Panel Slots:**\n     - `LiveServerQt::logMessage(const\
  \ QString& message)` -> Slot to append `message` to `logTextEdit`.\n     - `LiveServerQt::clientConnected(const\
  \ QString& clientName, int clientId)` -> Slot to add `clientName (ID: clientId)`\
  \ to `clientListView` and log.\n     - `LiveServerQt::clientDisconnected(const QString&\
  \ clientName, int clientId)` -> Slot to remove client from `clientListView` and\
  \ log.\n     - `LiveServerQt::chatReceived(const QString& speaker, const QString&\
  \ message)` -> Slot to append `\"[speaker]: message\"` to `logTextEdit`.\n     -\
  \ `LiveServerQt::serverStatusChanged(bool running, quint16 actualPort)` -> Slot\
  \ to update button enabled states and potentially the port display if it auto-incremented.\n\
  \   - **\"Send Chat\" Button Clicked (or Enter in `chatInputEdit`):**\n     1. Get\
  \ text from `chatInputEdit`.\n     2. If not empty, call `liveServer->broadcastChatMessageAsHost(text);`\
  \ (or similar method on `LiveServerQt`).\n     3. Append \"[HOST]: text\" to `logTextEdit`.\n\
  \     4. Clear `chatInputEdit`.\n\nThis UI panel will provide the primary interface\
  \ for the user acting as the host of a live editing session.\n"
