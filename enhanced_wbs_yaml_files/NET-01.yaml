id: NET-01
section: Core Migration Tasks
title: Isolate and Port Network Protocol Definition and Serialization Logic
original_task_id: NET-01 # Keep original ID if it exists
original_input_files:
  - "wxwidgets/live_packets.h"
  - "wxwidgets/net_connection.h"
  - "wxwidgets/net_connection.cpp"
  - "wxwidgets/live_socket.h"
  - "wxwidgets/live_socket.cpp"
dependencies:
  - "CORE-01" # For Position, Tile, Item, Floor, QTreeNode definitions
  - "CORE-03" # For MemoryNodeFileReadHandle, MemoryNodeFileWriteHandle, BinaryNode
  - "BUILD-01" # For mapcore library CMake setup
analyzed_input_files:
  - filepath: "wxwidgets/live_packets.h"
    description: "Defines the `LivePacketType` enum, which lists various constants representing different types of network packets used in the live collaboration feature (e.g., HELLO, REQUEST_NODES, CHANGE_LIST, CURSOR_UPDATE)."
  - filepath: "wxwidgets/net_connection.h"
    description: "Declares the `NetworkMessage` struct and the `NetworkConnection` class. `NetworkMessage` is designed for building and parsing byte streams for network communication, with methods to read/write primitive types, strings, and `Position` objects. `NetworkConnection` is a singleton class that manages a Boost.Asio `io_context` and a worker thread for asynchronous network operations. (The Boost.Asio part of `NetworkConnection` is not to be ported in this task)."
  - filepath: "wxwidgets/net_connection.cpp"
    description: "Implements the `NetworkMessage` methods, including template specializations for reading/writing `std::string` (length-prefixed) and `Position` (as x, y, z components). Implements the `NetworkConnection` class, including its singleton pattern, thread management for the Boost.Asio `io_context`, and start/stop logic for the network service. (The Boost.Asio part of `NetworkConnection` is not to be ported in this task)."
  - filepath: "wxwidgets/live_socket.h"
    description: "Declares the `LiveSocket` abstract base class, which defines the interface for live collaboration communication (both client and server might inherit from it, though server is out of scope for client porting). It includes pure virtual methods for core socket operations (`receiveHeader`, `receive`, `send`, `sendChat`, `updateCursor`). Importantly, it declares several protected non-virtual helper methods (e.g., `sendTile`, `readTile`, `sendNode`, `receiveNode`) that will contain the logic for serializing and deserializing map data structures using `NetworkMessage` and `MemoryNodeFileReadHandle`/`WriteHandle`. Defines the `LiveCursor` struct (with `wxColor`)."
  - filepath: "wxwidgets/live_socket.cpp"
    description: "Implements the non-virtual helper methods of `LiveSocket`. These methods handle the detailed logic of converting map data (Tiles, Items, QTreeNodes, Floors, Cursors) to and from the `NetworkMessage` format. Serialization uses OTBM-like attribute writing via `MemoryNodeFileWriteHandle`, and deserialization uses `MemoryNodeFileReadHandle`. This is the core data protocol logic that needs to be extracted and made independent of the socket implementation. It also includes basic logging functionality via a `LiveLogTab`."
current_functionality_summary: |
  The current networking functionality for live collaboration is built around several key components:
  - **`live_packets.h`**: Defines a set of enumerated values (`LivePacketType`) that identify the purpose of each network message (e.g., client hello, server hello, map data changes, cursor updates, chat messages).
  - **`NetworkMessage` (in `net_connection.h/cpp`)**: This struct acts as a dynamic buffer for constructing and parsing network packets. It provides methods to append and extract primitive data types, strings (with length prefix), and `Position` objects. The buffer itself is a `std::vector<uint8_t>`.
  - **`LiveSocket` (in `live_socket.h/cpp`)**: This abstract class defines a common interface for network communication and contains crucial non-virtual helper methods. These helpers implement the core logic for serializing and deserializing complex map structures (like `QTreeNode`, `Floor`, `Tile`, and `Item` attributes) into `NetworkMessage` buffers. This process leverages `MemoryNodeFileWriteHandle` and `MemoryNodeFileReadHandle` to use an OTBM-like (OpenTibia Binary Map) attribute-based format for map data within the network messages. It also handles serialization of `LiveCursor` data (including `wxColor`).
  - **`NetworkConnection` (in `net_connection.h/cpp`)**: This class manages the Boost.Asio `io_context` and runs its event loop in a separate thread, providing the asynchronous I/O capabilities. This specific class and its Boost.Asio dependency are *not* to be ported in this WBS task; the goal here is to isolate the protocol and serialization logic from the underlying network transport mechanism.
  The overall system allows clients and a server (server not part of this WBS's porting scope) to exchange map modifications, cursor positions, and chat messages.
refactoring_suggestions: |
  - **Protocol Definition Clarity:** While `live_packets.h` defines packet types, the exact structure of each packet (fields, order, data types) is implicitly defined in the `LiveSocket` helper methods and various `sendX`/`receiveX` calls. This could be made more explicit, perhaps through comments or even a separate document/header defining packet structures if complex.
  - **`NetworkMessage` Enhancements:** The `NetworkMessage` is functional. For a Qt-based system, `QByteArray` and `QDataStream` offer similar, more integrated functionality. However, porting `NetworkMessage` as-is to use `std::vector<uint8_t>` is the direct goal for this WBS to keep `mapcore/network` Qt-agnostic for now.
  - **Serialization Modularity:** The `LiveSocket` helper methods that perform serialization are good candidates for being grouped into a dedicated `MapProtocolCodec` or similar set of classes/namespaces within the new `mapcore/network` module. This would make their purpose clearer and improve testability.
  - **Error Handling in Serialization:** The current serialization/deserialization logic might rely on exceptions (e.g., `std::runtime_error` in `NetworkMessage::read` for buffer underflow) or implicit error handling. Standardizing this (e.g., consistent use of exceptions or error codes) would be beneficial.
  - **Color Handling:** `LiveCursor` uses `wxColor`. This needs to be replaced with a UI-agnostic representation in `mapcore/network`. A simple struct like `struct NetworkColor { uint8_t r, g, b, a; }` is a good approach. If `QColor` is deemed acceptable as a basic data type within `mapcore` (even in the network module), that's an alternative, but a custom struct ensures full independence.
qt6_migration_steps:
  - "**1. Create `mapcore/network/` Directory:**"
    - Establish the new module subdirectory: `libs/mapcore/src/network/` (and a corresponding `include/mapcore/network/`).
  - "**2. Move `live_packets.h`:**"
    - Copy `wxwidgets/live_packets.h` to `libs/mapcore/include/mapcore/network/live_packets.h`.
    - Update include guards if necessary.
  - "**3. Port `NetworkMessage` to `mapcore/network/`:**"
    - Create `network_message.h` and `network_message.cpp` in `libs/mapcore/include/mapcore/network/` and `libs/mapcore/src/network/` respectively.
    - Port the `NetworkMessage` struct/class from `wxwidgets/net_connection.h` and `wxwidgets/net_connection.cpp`.
    - Ensure its internal buffer (`std::vector<uint8_t> buffer`) and methods (`clear`, `expand`, `read<T>`, `write<T>`) are free of wxWidgets/Boost.Asio types.
    - Port the template specializations for `std::string` and `mapcore::Position`.
  - "**4. Create `MapProtocolCodec` (or similar):**"
    - Create new files (e.g., `map_protocol_codec.h`, `map_protocol_codec.cpp`) in the `mapcore/network/` module.
    - Define the `LiveCursor` struct within `map_protocol_codec.h`. Replace `wxColor` with a UI-agnostic color representation (e.g., `struct NetworkColor { uint8_t r,g,b,a; }`).
    - Systematically extract the logic from `LiveSocket`'s non-virtual helper methods:
        - `LiveSocket::sendTile(MemoryNodeFileWriteHandle&, Tile*, const Position*)` -> `MapProtocolCodec::serializeTile(NetworkMessage&, const mapcore::Tile*, const mapcore::Position*)` (or similar, adapting to use NetworkMessage via MemoryNodeFileWriteHandle if direct buffer access is complex).
        - `LiveSocket::readTile(BinaryNode*, Editor&, const Position*)` -> `mapcore::Tile* MapProtocolCodec::deserializeTile(NetworkMessage&, mapcore::Map&)` (BinaryNode is part of MemoryNodeFileReadHandle).
        - `LiveSocket::sendNode(uint32_t, QTreeNode*, int32_t, int32_t, uint32_t)` -> `MapProtocolCodec::serializeNode(NetworkMessage&, const mapcore::QTreeNode*, ...)`
        - `LiveSocket::receiveNode(NetworkMessage&, Editor&, Action*, int32_t, int32_t, bool)` -> `MapProtocolCodec::deserializeNode(NetworkMessage&, mapcore::Map&, ...)` (Action* should be removed, changes applied directly or returned).
        - Similar transformations for `sendFloor`, `receiveFloor`, `writeCursor`, `readCursor`.
    - These functions will operate on `mapcore` data types and use the ported `NetworkMessage`.
    - They will utilize `mapcore::MemoryNodeFileWriteHandle` and `mapcore::MemoryNodeFileReadHandle` (from CORE-03, ensuring these are adapted to work with `std::vector<uint8_t>` if not already).
  - "**5. Exclude `NetworkConnection`:**"
    - Explicitly do *not* port the `NetworkConnection` class from `wxwidgets/net_connection.h/cpp` or any Boost.Asio related code. The new `mapcore/network` module must be transport-agnostic.
  - "**6. Remove UI Dependencies:**"
    - Eliminate any calls to `LiveLogTab` or other UI-specific logging from the ported code. Error handling should be through return codes, exceptions, or simple console logs if absolutely necessary for debugging within `mapcore`.
  - "**7. Update CMakeLists.txt:**"
    - Add the new header and source files in `mapcore/network/` to the `mapcore` library target in `libs/mapcore/CMakeLists.txt`.
  - "**8. Compile and Test:**"
    - Ensure the `mapcore` library compiles cleanly with the new `network` module.
    - Ideally, create basic unit tests for `NetworkMessage` and key serialization/deserialization functions, though full testing requires network I/O (NET-02/NET-03).
definition_of_done:
  - A `network` module (subdirectory `libs/mapcore/src/network/` and `include/mapcore/network/`) is created within the `mapcore` library.
  - `live_packets.h` is moved into this module.
  - A UI-agnostic `NetworkMessage` class, using `std::vector<uint8_t>` for its buffer, is implemented in the `network` module, capable of serializing/deserializing primitive types, `std::string`, and `mapcore::Position`.
  - A `MapProtocolCodec` class/namespace (or equivalent) is implemented in the `network` module.
  - This Codec contains functions to serialize and deserialize `mapcore::Tile`, `mapcore::Item`, `mapcore::QTreeNode`, `mapcore::Floor`, and `LiveCursor` (with a UI-agnostic color struct) into/from `NetworkMessage` buffers.
  - The serialization/deserialization logic correctly replicates the OTBM-style attribute handling previously in `LiveSocket` helper methods, using `mapcore::MemoryNodeFileReadHandle` and `mapcore::MemoryNodeFileWriteHandle`.
  - The `mapcore/network` module has no dependencies on Boost.Asio, wxWidgets, or any specific network I/O framework (like Qt Network).
  - All components within `mapcore/network/` compile cleanly as part of the `mapcore` static library.
  - All UI-specific logging has been removed from the ported code.
estimation_effort:
  - "Medium (8-12 developer days). The main complexity lies in carefully extracting and refactoring the serialization logic from `LiveSocket` methods, ensuring it works correctly with `mapcore` data types and the ported `NetworkMessage`. Adapting `MemoryNodeFileReadHandle/WriteHandle` to work seamlessly with `NetworkMessage`'s buffer is also key. Testing this module in isolation will be challenging without a full network stack."
known_missing_files: []
boilerplate_coder_ai_prompt: |
  Your task is to isolate and port the network protocol definitions and data serialization logic from the wxWidgets-based Remere's Map Editor into a new, UI-agnostic `network` module within the `mapcore` static library. This module must be independent of Boost.Asio and wxWidgets. You will be working with `live_packets.h`, `net_connection.h/cpp`, and `live_socket.h/cpp`.

  **1. Create Directory Structure:**
     - Inside `libs/mapcore/src/`, create a `network/` directory.
     - Inside `libs/mapcore/include/mapcore/`, create a `network/` directory.

  **2. Relocate `live_packets.h`:**
     - Move `wxwidgets/live_packets.h` to `libs/mapcore/include/mapcore/network/live_packets.h`.
     - Update include guards if necessary. This file defines `LivePacketType`.

  **3. Port `NetworkMessage`:**
     - Create `network_message.h` in `libs/mapcore/include/mapcore/network/`.
     - Create `network_message.cpp` in `libs/mapcore/src/network/`.
     - Port the `NetworkMessage` struct/class from `wxwidgets/net_connection.h` and `wxwidgets/net_connection.cpp`.
       - The internal buffer must be `std::vector<uint8_t>`.
       - All methods (`clear`, `expand`, `read<T>`, `write<T>`) must use standard C++ types.
       - Ensure the template specializations for `std::string` (length-prefixed) and `mapcore::Position` (x, y, z components) are correctly ported and use `mapcore::Position`.

  **4. Create `MapProtocolCodec` for Serialization/Deserialization Logic:**
     - Create `map_protocol_codec.h` in `libs/mapcore/include/mapcore/network/`.
     - Create `map_protocol_codec.cpp` in `libs/mapcore/src/network/`.
     - Within these files, define a class or namespace (e.g., `MapProtocolCodec`).
     - **Define `LiveCursor` Struct:** In `map_protocol_codec.h`, define the `LiveCursor` struct. Replace its `wxColor` member with a UI-agnostic equivalent, for example: `struct NetworkColor { uint8_t r, g, b, a; };`.
     - **Port Serialization/Deserialization Methods:**
       - Carefully extract the logic from the non-virtual helper methods of `wxwidgets/live_socket.h/cpp`. These include:
         - `sendTile` / `receiveTile` (and its helper `readTile`)
         - `sendNode` / `receiveNode`
         - `sendFloor` / `receiveFloor`
         - `writeCursor` / `readCursor`
       - Transform these into static methods or free functions within your `MapProtocolCodec`.
       - **Input/Output:** These functions should take `mapcore` data structures (e.g., `const mapcore::Tile*`, `mapcore::Map&`, `const mapcore::QTreeNode*`, `const LiveCursor&`) as input for serialization, or `NetworkMessage&` for deserialization. Serialization functions should write to a `NetworkMessage&`. Deserialization functions should read from a `NetworkMessage&` and return `mapcore` objects or populate provided ones.
       - **Memory Handlers:** The OTBM-style serialization within these methods uses `MemoryNodeFileWriteHandle` and `MemoryNodeFileReadHandle`. These handlers (from `CORE-03`) must be adapted or confirmed to work with an in-memory `std::vector<uint8_t>` buffer, which will be managed by `NetworkMessage`. You might need to pass a `NetworkMessage`'s buffer segment to these handlers or adapt them.
       - **No `Editor` or `Action`:** Remove direct dependencies on `Editor& editor` or `Action* action` from the parameters of these deserialization functions. Deserialized data should be returned or applied to a `mapcore::Map` instance directly. Change tracking will be handled at a higher level (NET-02/03).
       - **Map Version:** The `mapVersion` (originally `VirtualIOMap` in `LiveSocket`) will be needed for OTBM attribute serialization. Pass a `mapcore::MapVersion` struct to these functions.

  **5. Exclude `NetworkConnection` and Boost.Asio:**
     - **Crucially, do NOT port the `NetworkConnection` class from `net_connection.h/cpp`.** This task is *only* about the protocol definition and data serialization, not the network transport layer.
     - Ensure no Boost.Asio headers or code are included or used in the new `mapcore/network/` module.

  **6. Remove UI-Specific Code:**
     - Remove any logging calls that use `LiveLogTab` or any other wxWidgets UI component. If logging is essential for debugging the `mapcore` module, use `std::cout` or a simple file logger temporarily.

  **7. Update Build System:**
     - Add the new `.h` and `.cpp` files in `mapcore/network/` to the `mapcore` library target in `libs/mapcore/CMakeLists.txt`.

  **8. Dependencies and Includes:**
     - Ensure all includes point to `mapcore` internal headers (e.g., `mapcore/position.h`, `mapcore/tile.h`) or standard C++ headers.
     - The `mapcore/network` module should only depend on other `mapcore` modules (like `CORE-01`, `CORE-03`) and standard C++ libraries.
---
The WBS file `enhanced_wbs_yaml_files/NET-01.yaml` has been updated.
The `analyzed_input_files` descriptions have been refined based on the content of the read files.
The `title` was updated to "Isolate and Port Network Protocol Definition and Serialization Logic".
`dependencies` were confirmed and refined: `CORE-01`, `CORE-03`, `BUILD-01`.
`current_functionality_summary` was updated to accurately describe the roles of `live_packets.h`, `NetworkMessage`, `LiveSocket` helpers (for serialization), and `NetworkConnection` (Boost.Asio part, to be excluded).
`qt6_migration_steps` were reviewed and confirmed to align with the goal of creating a UI-agnostic `mapcore/network` module, porting `NetworkMessage`, extracting serialization logic from `LiveSocket` into a `MapProtocolCodec`, handling `LiveCursor.wxColor` replacement, and explicitly excluding `NetworkConnection`.
`definition_of_done` was checked for clarity and completeness.
The `boilerplate_coder_ai_prompt` was reviewed and confirmed to provide clear instructions for the AI.
No new missing files were identified for this task's scope.The file contents have been read. I will now proceed to refine the `NET-01.yaml` WBS task file.
My analysis confirms:
- `live_packets.h` contains the `LivePacketType` enum.
- `net_connection.h/cpp` defines `NetworkMessage` (using `std::vector<uint8_t>`, `size_t position`, `size_t size`) with template read/write and specializations for `std::string` and `Position`. It also defines `NetworkConnection` which uses Boost.Asio.
- `live_socket.h/cpp` defines `LiveSocket` and its helper methods for serializing/deserializing map data structures using `NetworkMessage`, `MemoryNodeFileReadHandle`, and `MemoryNodeFileWriteHandle`. `LiveCursor` uses `wxColor`.

I will update the `analyzed_input_files` descriptions for precision and then refine the other fields of the YAML, ensuring the migration steps correctly detail the extraction of logic into a new `mapcore/network` module, the porting of `NetworkMessage`, the creation of a `MapProtocolCodec` for the serialization logic from `LiveSocket` helpers, and the replacement of `wxColor` in `LiveCursor`. The exclusion of the Boost.Asio `NetworkConnection` will be emphasized.
