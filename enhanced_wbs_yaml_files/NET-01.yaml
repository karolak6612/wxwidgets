id: NET-01
section: Core Migration Tasks
title: Isolate and Port Network Protocol
original_input_files: live_packets.h, net_connection.h/cpp, live_socket.h/cpp
analyzed_input_files:
- wxwidgets/live_packets.h
- wxwidgets/net_connection.h
- wxwidgets/net_connection.cpp
- wxwidgets/live_socket.h
- wxwidgets/live_socket.cpp
dependencies:
- CORE-01
current_functionality_summary: |-
  - `live_packets.h`: Defines enums for network packet types (`LivePacketType`).
  - `net_connection.h/cpp`: Contains `NetworkMessage` for building/parsing byte streams (with special handling for strings and Position). It also contains `NetworkConnection` which manages a Boost.Asio `io_context` for asynchronous network operations (this Asio part is not for porting in this task).
  - `live_socket.h/cpp`: Defines `LiveSocket`, an abstract base class. Its non-virtual helper methods contain core logic for serializing/deserializing map data (Tiles, Items, Nodes, Floors, Cursors) into/from `NetworkMessage` buffers. This serialization uses `MemoryNodeFileReadHandle/WriteHandle` and OTBM-style attribute definitions. This data protocol logic is intended to be abstracted from actual socket I/O.
qt6_migration_steps: |-
  1. Create a new subdirectory `network` within the `mapcore` library's source tree (e.g., `mapcore/network/`).
  2. Move the `live_packets.h` file (which defines `LivePacketType` enums) into `mapcore/network/`.
  3. Port the `NetworkMessage` class from `net_connection.h/cpp` into new files (e.g., `mapcore/network/network_message.h` and `mapcore/network/network_message.cpp`).
     - Ensure `NetworkMessage` uses standard C++ types like `std::vector<uint8_t>` for its internal buffer and `std::string`.
     - Verify that its template methods `read<T>()` and `write<T>()`, along with specializations for `std::string` and `Position`, are correctly implemented and free of wxWidgets or Boost.Asio dependencies.
  4. Extract the map data serialization and deserialization logic currently present in `LiveSocket`'s non-virtual helper methods (e.g., `sendTile`, `readTile`, `sendNode`, `receiveNode`, `sendFloor`, `receiveFloor`, `readCursor`, `writeCursor`).
     - Place this logic into one or more new classes or sets of free functions within the `mapcore/network/` module (e.g., in `MapDataSerializer.h/.cpp` or `MapDataParser.h/.cpp`).
     - These new components must operate on `mapcore` data types (Tile, Item, QTreeNode, Floor, Position, etc., from `CORE-01`) and use the ported `NetworkMessage` class for buffer manipulation.
     - They will utilize `MemoryNodeFileReadHandle` and `MemoryNodeFileWriteHandle` (from `CORE-03`, ensuring these memory handlers are adapted to operate on `std::vector<uint8_t>` or `QByteArray` for in-memory streams, not disk files, if they weren't already).
     - The `LiveCursor` struct should be defined in this module. If its original `wxColor` member exists, replace it with a simple color struct (e.g., `struct NetworkColor {uint8_t r,g,b,a;}`) or `QColor` if Qt basic types are permissible in `mapcore`'s network module.
  5. The `NetworkConnection` class (which manages Boost.Asio `io_context` and `std::thread`) is explicitly **not** to be ported as part of this task. The `mapcore/network` module must be independent of specific network I/O frameworks like Boost.Asio or Qt Network at this stage.
  6. Remove any UI-specific logging (e.g., calls involving `LiveLogTab`) from the code being ported to `mapcore/network/`. Error handling should use return codes or exceptions.
  7. Ensure that all files within the new `mapcore/network/` module compile cleanly as part of the `mapcore` static library and have no external dependencies on Boost.Asio or wxWidgets.
definition_of_done: |-
  A `network` module (subdirectory) is created within the `mapcore` library, containing the definitions and logic for serializing and deserializing all network messages and map data structures required for the live editing feature.
  Key requirements:
  - The `mapcore/network/` module includes the `LivePacketType` enum.
  - A UI-agnostic `NetworkMessage` class is present in `mapcore/network/` for serializing/deserializing primitive data types, strings, and `Position` objects into/from byte buffers.
  - It contains classes/functions responsible for serializing and deserializing `mapcore`'s `Tile`, `Item`, `QTreeNode`, `Floor`, and `LiveCursor` data structures into/from `NetworkMessage` buffers, replicating the logic from `LiveSocket` helper methods (using memory-based node handlers).
  - This `network` module has no dependencies on Boost.Asio, wxWidgets, or any specific network I/O framework.
  - All components compile cleanly within `mapcore`.
boilerplate_coder_ai_prompt: |-
  Refactor network protocol definitions and data serialization logic into a new `network` module within the `mapcore` static library. This module must be independent of Boost.Asio and wxWidgets. (Depends on `CORE-01` for data types and potentially `CORE-03` for memory-based node handlers).
  1.  Create a directory `mapcore/network/`.
  2.  Move `live_packets.h` (defining `LivePacketType`) into `mapcore/network/`.
  3.  Port the `NetworkMessage` class from `wxwidgets/net_connection.h/cpp` to `mapcore/network/network_message.h` and `mapcore/network/network_message.cpp`.
      - Ensure its internal buffer is `std::vector<uint8_t>`.
      - Ensure methods use standard C++ types (`std::string`, `uint16_t`, etc.).
      - Verify serialization for `std::string` (length-prefixed) and `Position`.
  4.  Create new files (e.g., `mapcore/network/MapProtocolCodec.h`, `mapcore/network/MapProtocolCodec.cpp`).
      - Implement functions/classes to serialize and deserialize map data structures. This involves porting the logic from `LiveSocket::sendTile`, `LiveSocket::readTile`, `sendNode`, `receiveNode`, `sendFloor`, `receiveFloor`, `LiveSocket::readCursor`, `LiveSocket::writeCursor`.
      - These functions will take `mapcore` objects (e.g., `Tile*`, `QTreeNode*`) and `NetworkMessage&` as parameters.
      - They should use `mapcore`'s `MemoryNodeFileWriteHandle` and `MemoryNodeFileReadHandle` (from `CORE-03`, ensure these can operate on in-memory byte vectors/arrays) for the node-based serialization within the `NetworkMessage`.
      - Define `LiveCursor` struct in `mapcore/network/`. Replace `wxColor` with a simple color struct (e.g., `struct NetworkColor { uint8_t r, g, b, a; };`) or `QColor` if permitted for basic data types in `mapcore`.
  5.  **Do NOT port `NetworkConnection` (the Boost.Asio part) in this task.**
  6.  Remove any logging calls related to `LiveLogTab` or other UI elements from the ported code.
  7.  Ensure all files in `mapcore/network/` compile as part of the `mapcore` library without Boost.Asio or wxWidgets dependencies.
