id: CORE-TOWNSYSTEM
section: Core Migration Tasks
title: Port Town System (Town Class and Towns Manager)
original_input_files:
  - wxwidgets/town.h
  - wxwidgets/town.cpp
analyzed_input_files:
  - file_path: wxwidgets/town.h
    description: Defines the `Town` class (stores ID, name, center position `Position(x,y,z)`)
      and the `Towns` class (likely a manager class, e.g., `std::map<uint32_t, Town*>`,
      providing methods to add, remove, find towns).
  - file_path: wxwidgets/town.cpp
    description: Implements methods for `Town` and `Towns` classes. This includes
      constructors, destructors, accessors for town properties, and CRUD operations
      for the `Towns` manager.
dependencies:
  - BUILD-01
  - CORE-01
current_functionality_summary: The legacy system uses a `Town` class to store town
  ID, name, and its center map position. A `Towns` manager class handles the collection
  of all defined towns, allowing lookup by ID and potentially by name.
qt6_migration_steps: |-
  1. Define `mapcore::Town` class (`mapcore/town/Town.h`):
     - Members: `uint32_t id`, `QString name`, `Position centerPosition`.
     - Constructor, getters, setters.
  2. Define `mapcore::TownManager` class (`mapcore/town/TownManager.h/cpp`):
     - Manages a collection of `Town` objects (e.g., `QHash<quint32, Town> m_towns` or `QHash<quint32, std::unique_ptr<Town>>`).
     - Methods: `void addTown(Town town)`, `void removeTown(uint32_t townId)`, `Town* getTown(uint32_t townId)`, `Town* findTownByName(const QString& name)`, `QList<Town*> getAllTowns()`.
     - Logic for generating new unique town IDs if applicable.
  3. Ensure town data (ID, name, center X, Y, Z) is loaded from the map file (OTBM attribute or a separate towns XML file) by `IOMapOTBM` (or a dedicated town loader) and populated into `TownManager` during map load. This part might be coordinated with `CORE-03` (Map I/O) or `CORE-IOMAP-AUX`.
  4. Ensure town data is saved correctly.
definition_of_done: |-
  - `mapcore::Town` class is defined with ID, name, and center position.
  - `mapcore::TownManager` is implemented, capable of adding, removing, and retrieving `Town` objects.
  - Town data is correctly loaded from the map file (or auxiliary file) into `TownManager` when a map is opened.
  - Town data is correctly saved.
  - Unit tests for `Town` and `TownManager` pass.
boilerplate_coder_ai_prompt: |-
  Create the Town system in `mapcore`.
  1.  Define `mapcore::Town` class (`mapcore/town/Town.h`):
      -   Store `uint32_t id`, `QString name`, `Position centerPosition`.
      -   Provide constructor, getters, and setters.
  2.  Define `mapcore::TownManager` class (`mapcore/town/TownManager.h/cpp`):
      -   Manage `QHash<quint32, Town> m_towns` (or `std::unique_ptr<Town>`).
      -   Implement `addTown(Town town)`, `removeTown(uint32_t townId)`, `Town* getTown(uint32_t townId)`, `Town* findTownByName(const QString& name)`, `QList<Town*> getAllTowns()`.
      -   Handle loading/saving of town data (typically managed by map I/O tasks but ensure `TownManager` can be populated).
documentation_references:
  - 'QHash: https://doc.qt.io/qt-6/qhash.html'
  - 'QString: https://doc.qt.io/qt-6/qstring.html'
estimation_effort: Medium (3-5 developer days)
