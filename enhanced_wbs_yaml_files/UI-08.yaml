wbs_item_id: UI-08
name: Port Spawn & Group Tools
description: Recreate UI components for placing spawns and managing their creature
  lists and properties (radius, interval). "Group Management" refers to managing creatures
  within a single spawn.
dependencies:
- 'UI-02   # Creature palette (hosting spawn creation tools) is part of the main palette
  system.'
- 'UI-06   # Creature palette functionality itself, and creature finder for adding
  to spawns.'
- 'LOGIC-07 # Defines SpawnProperties and how spawn data is stored on Tiles.'
- 'CORE-02 # For creature definitions.'
input_files:
- wxwidgets/palette_creature.cpp
- wxwidgets/palette_creature.h
- wxwidgets/old_properties_window.cpp
- wxwidgets/old_properties_window.h
analyzed_input_files:
- file_path: wxwidgets/palette_creature.cpp
  description: (Already analyzed for UI-06) Implements `CreaturePalettePanel` which
    includes controls for spawn time and radius when the "Spawn Brush" mode is active,
    used for creating new spawns.
documentation_references:
- 'QDialog: https://doc.qt.io/qt-6/qdialog.html'
- 'QSpinBox: https://doc.qt.io/qt-6/qspinbox.html'
- 'QListWidget: https://doc.qt.io/qt-6/qlistwidget.html'
- 'QLineEdit: https://doc.qt.io/qt-6/qlineedit.html'
current_functionality_summary: 'In the wxWidgets version:

  - The `CreaturePalettePanel` provides UI elements (spin controls for spawn time
  and radius, a toggle for spawn brush mode) to define parameters when *creating*
  a new spawn by applying a creature brush in spawn mode.

  - The `OldPropertiesWindow`, when invoked for a `Spawn*` object, only allows editing
  the spawn''s radius (`size`).

  - There isn''t a dedicated UI to edit the list of creatures or the overall respawn
  time for an *existing* spawn point directly; these are attributes of the Tile.

  - "Group Management" in this context means managing the list of creatures that belong
  to a single spawn point.'
definition_of_done:
- The Creature Palette (defined in `UI-06`, part of `UI-02`) correctly uses its 'Spawn
  Time' and 'Spawn Radius' controls to configure new spawns when the 'Place Spawn
  Area' mode is active and a creature brush is applied to the map.
- A new `EditSpawnDialogQt` (subclass of `QDialog`) is implemented for editing properties
  of an *existing* spawn point on a selected map tile.
- The `EditSpawnDialogQt` is invokable (e.g., via a map context menu when a spawn
  tile is selected).
- 'The `EditSpawnDialogQt` allows viewing and modifying:'
- '  - The spawn radius (`QSpinBox`), updating the `SpawnProperties` associated with
  the tile.'
- '  - The list of creature names within the spawn (`QListWidget` with Add/Remove
  buttons). ''Add'' uses a creature selection dialog (from `UI-06`). This modifies
  the tile''s `creature_list`.'
- '  - The overall respawn time for that specific spawn point/tile (`QSpinBox`), updating
  the tile''s `spawn_time_seconds`.'
- Changes made in `EditSpawnDialogQt` are applied to a copy of the `Tile`'s spawn-related
  data, and upon 'OK', the main editor creates an undoable action to update the actual
  map tile.
- The dialog correctly loads the existing spawn properties from the selected tile
  when opened.
boilerplate_coder_ai_prompt: "Your task is to implement the Qt6 UI components for\
  \ creating and editing creature spawns. This involves utilizing controls on the\
  \ Creature Palette for new spawns and creating a dedicated dialog for editing existing\
  \ spawns.\n\n**Reference Files:** `wxwidgets/palette_creature.cpp`/`.h` (for new\
  \ spawn settings in palette) and `wxwidgets/old_properties_window.cpp`/`.h` (for\
  \ the limited existing spawn radius editing).\n\n**1. Creature Palette Spawn Settings\
  \ (Enhancements to `UI-06`):**\n   - Ensure the 'Creature' tab in the main palette\
  \ system (from `UI-02`, with functionality from `UI-06`) has:\n     - `QSpinBox*\
  \ spawnTimeSpin;` (Label: \"Spawn Time (s)\")\n     - `QSpinBox* spawnRadiusSpin;`\
  \ (Label: \"Spawn Radius\")\n     - `QRadioButton* placeSpawnAreaRadio;` (Text:\
  \ \"Place Spawn Area\")\n   - When `placeSpawnAreaRadio` is checked and a creature\
  \ is selected, applying the brush to a map tile should:\n     1. Retrieve `radius\
  \ = spawnRadiusSpin->value()` and `time = spawnTimeSpin->value()`.\n     2. Get\
  \ the selected `CreatureType*` (or its name) from the palette.\n     3. On the target\
  \ `Tile` object:\n        - Set/update its `SpawnProperties` with the `radius`.\n\
  \        - Clear its existing `creature_list` for spawns and add the selected creature's\
  \ name.\n        - Set its `spawn_time_seconds` to `time`.\n     4. Call `SpawnManager::registerSpawnLocation(tile->getPosition())`.\n\
  \     5. This entire operation should be an undoable `Action`.\n\n**2. `EditSpawnDialogQt`\
  \ (New `QDialog` class):**\n   - This dialog is for editing an *existing* spawn\
  \ on a specific tile.\n   - Constructor: `EditSpawnDialogQt(QWidget* parent, Tile*\
  \ tileToEditCopy)` (operates on a copy of the tile or its relevant spawn data).\n\
  \   - **Layout:**\n     - `QLabel` displaying \"Editing Spawn at [Tile Position]\"\
  .\n     - `QSpinBox* radiusEdit;` (Label: \"Radius:\"). Load from `tileToEditCopy->getSpawnProperties()->radius`.\n\
  \     - `QSpinBox* respawnTimeEdit;` (Label: \"Respawn Time (sec):\"). Load from\
  \ `tileToEditCopy->getSpawnTimeSeconds()`.\n     - `QListWidget* creatureListWidget;`\
  \ (Label: \"Creatures in Spawn:\").\n       - Populate with names from `tileToEditCopy->getCreatureSpawnList()`.\n\
  \       - Make items selectable.\n     - `QPushButton* addCreatureButton;` (Text:\
  \ \"Add Creature...\").\n     - `QPushButton* removeCreatureButton;` (Text: \"Remove\
  \ Selected Creature\").\n     - Standard \"OK\" and \"Cancel\" buttons.\n   - **Functionality:**\n\
  \     - `addCreatureButton`: Opens a creature finder/selector dialog (from `UI-06`).\
  \ Adds the selected creature's name to `creatureListWidget` and an internal list\
  \ representing the modified state of `tileToEditCopy.creature_list`.\n     - `removeCreatureButton`:\
  \ Removes the selected creature(s) from `creatureListWidget` and the internal list.\n\
  \     - On \"OK\" click:\n       - Validate inputs (radius > 0, time > 0).\n   \
  \    - Update `tileToEditCopy`'s `spawn_props.radius`, `creature_list`, and `spawn_time_seconds`\
  \ with the values from the dialog.\n       - `accept()` the dialog. The calling\
  \ code (e.g., map context menu handler) will then create an `Action` to apply these\
  \ changes to the actual map tile.\n\n**Integration:**\n- The `MapCanvas` context\
  \ menu (right-click on a tile) should have an \"Edit Spawn...\" option if the tile\
  \ is a spawn point. This option will instantiate and show `EditSpawnDialogQt`, passing\
  \ a copy of the relevant tile data.\n"
