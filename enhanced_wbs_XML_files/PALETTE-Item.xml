<?xml version="1.0" ?>
<PALETTE-Item>
  <id>PALETTE-Item</id>
  <section>UI Elements</section>
  <title>Implement General Item Palette/Browser</title>
  <original_input_files>
    <original_input_file>wxwidgets/palette_brushlist.h</original_input_file>
    <original_input_file>wxwidgets/palette_brushlist.cpp</original_input_file>
    <original_input_file>wxwidgets/items.h</original_input_file>
    <original_input_file>wxwidgets/palette_window.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/palette_brushlist.h</file_path>
      <description>Declares various views like `BrushIconBox` and `SeamlessGridPanel` that are suitable
for displaying a large number of selectable items with their sprites.
The 'Item' palette would use such a view to show game items.
</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/items.h</file_path>
      <description>Defines `ItemType` and `ItemDatabase` (g_items), which holds all item definitions.
This palette would source its content from this database.
</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>UI-02</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>CORE-BRUSH-FRAMEWORK</dependencie>
    <dependencie>REFACTOR-01</dependencie>
    <dependencie>RENDER-03</dependencie>
    <dependencie>LOGIC-01</dependencie>
  </dependencies>
  <current_functionality_summary>The legacy system likely had an item palette (or used parts of `BrushPalettePanel` for items)
that displayed game items from `g_items` (ItemDatabase) for selection. Selecting an item
would typically activate a RAW brush or a generic item brush with the selected item ID.
`UI-10` covers a specific &quot;RAW Items Palette&quot;. This `PALETTE-Item` could be a more comprehensive
item browser, possibly with categorization and better previews than a simple RAW ID list.
</current_functionality_summary>
  <qt6_migration_steps>1. Create `ItemPaletteTab.h/.cpp` inheriting `QWidget`.
2. Design UI:
   - Optional: `QComboBox` or `QTreeView` for item categories (if items have categories beyond 'All').
   - A `QLineEdit` for searching/filtering items by name or ID.
   - A main display area: `SeamlessGridPaletteView` (from `UI-02`'s definition, or a similar custom Qt widget) or `QListView` in IconMode to show item sprites and names.
   - Controls for sprite size/zoom if using a grid view.
3. Populate the view:
   - Get all (or filtered) `ItemType` definitions from `ItemManager` (`CORE-02`).
   - For each `ItemType`, get its sprite using `TextureManager` (`RENDER-03`).
   - Create model items for the view, displaying the sprite and name. Store `ItemType::id`.
4. Handle selection:
   - When an item is selected, notify `BrushStateService` to activate the RAW brush (`BRUSH-LOGIC-RAW`) and set its active item ID to the selected item's ID.
5. Integrate this tab into the main palette system (`QTabWidget` in `UI-02`).
</qt6_migration_steps>
  <definition_of_done>- An `ItemPaletteTab` widget is implemented and added to the main palette system.
- The palette lists items from `ItemManager`, displaying their sprites and names.
- Item searching/filtering by name/ID is functional.
- Users can select an item, which activates the RAW brush with that item's ID.
- The palette is reasonably performant for a large number of items (e.g., using progressive loading or good view virtualization).
</definition_of_done>
  <boilerplate_coder_ai_prompt>Implement an `ItemPaletteTab` Qt widget for browsing and selecting game items.

1.  **`ItemPaletteTab.h`:**
    ```cpp
    #include &lt;QWidget&gt;
    // Forward declarations
    class QLineEdit;
    class QComboBox; // Optional for categories
    class SeamlessGridPaletteView; // Or QListView
    class ItemManager;           // From CORE-02
    class BrushStateService;     // From REFACTOR-01
    class TextureManagerQt;      // From RENDER-03

    class ItemPaletteTab : public QWidget {
        Q_OBJECT
    public:
        ItemPaletteTab(ItemManager* itemManager, BrushStateService* brushStateService, TextureManagerQt* texManager, QWidget* parent = nullptr);
        void populateItems(); // Or load initially and on filter changes
    private slots:
        void onFilterTextChanged(const QString&amp; text);
        void onItemSelectionChanged(/* appropriate arguments from view */);
    private:
        QLineEdit* m_searchEdit;
        // QComboBox* m_categoryCombo; // Optional
        SeamlessGridPaletteView* m_itemView; // Or QListView with custom model/delegate
        ItemManager* m_itemManager;
        BrushStateService* m_brushStateService;
        TextureManagerQt* m_textureManager;
        // Store all item types or a filtered list
        // QList&lt;const mapcore::ItemType*&gt; m_allItems;
    };
    ```
2.  **`ItemPaletteTab.cpp`:**
    - Constructor: Setup UI. Store managers. Call `populateItems()`. Connect signals from search edit and item view.
    - `populateItems()`: Get all items from `m_itemManager`. Filter if necessary. Populate `m_itemView`. For `SeamlessGridPaletteView` or custom model, this involves providing data (item ID, name, sprite from `m_textureManager`).
    - `onFilterTextChanged()`: Repopulate/filter items in `m_itemView`.
    - `onItemSelectionChanged()`: Get selected item's ID. Call `m_brushStateService-&gt;setActiveBrushByName(&quot;BRUSH-LOGIC-RAW&quot;);` (assuming RAW brush is registered with this name) and `m_brushStateService-&gt;setCurrentRawItemId(selectedItemId);` (method to be added to BrushStateService or directly configure RAW brush).
Integrate this tab into the main palette `QTabWidget` (from `UI-02`).
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>UI-02</documentation_reference>
    <documentation_reference>CORE-02</documentation_reference>
    <documentation_reference>CORE-BRUSH-FRAMEWORK</documentation_reference>
    <documentation_reference>BRUSH-LOGIC-RAW</documentation_reference>
    <documentation_reference>RENDER-03</documentation_reference>
    <documentation_reference>QListView</documentation_reference>
    <documentation_reference>QAbstractItemModel</documentation_reference>
  </documentation_references>
  <estimation_effort>Large</estimation_effort>
</PALETTE-Item>
