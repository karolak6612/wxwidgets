<?xml version="1.0" ?>
<UI-05>
  <id>UI-05</id>
  <name>Port Brush &amp; Material Editor</name>
  <description>Recreate the UI for editing brush and material properties. This involves dialogs/panels for defining new brushes (ground, wall, doodad, border) and modifying existing ones.</description>
  <dependencies>
    <dependencie>CORE-04 # Brush/Material system being edited. XML parsing/saving logic is key.</dependencie>
    <dependencie>UI-02   # Palettes might launch parts of this editor or provide context.</dependencie>
    <dependencie>UI-06   # Item finder dialog will be used for selecting item IDs.</dependencie>
  </dependencies>
  <input_files>
    <input_file>wxwidgets/border_editor_window.cpp</input_file>
    <input_file>wxwidgets/border_editor_window.h</input_file>
    <input_file>wxwidgets/add_item_window.cpp</input_file>
    <input_file>wxwidgets/add_item_window.h</input_file>
    <input_file>wxwidgets/add_tileset_window.cpp</input_file>
    <input_file>wxwidgets/add_tileset_window.h</input_file>
    <input_file>wxwidgets/palette_brushlist.cpp</input_file>
  </input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/border_editor_window.cpp</file_path>
      <description>Implements: 'BorderEditorDialog', a wxDialog with a wxNotebook.
- **Border Tab:** Edits auto-border configurations (saved to 'borders.xml').
  Features 'BorderGridPanel' (custom wxPanel for visual assignment of item IDs to 12 border positions: N, E, S, W, CNW, CNE, CSE, CSW, DNW, DNE, DSE, DSW) and 'BorderPreviewPanel' (custom wxPanel for preview).
  Allows: setting border ID (wxSpinCtrl), name (wxTextCtrl, stored as XML comment), group ID (wxSpinCtrl), and type (wxCheckBox for &quot;Optional&quot;, &quot;Ground&quot;).
  Loads: existing borders from 'borders.xml' into a wxComboBox. Uses 'FindItemDialog' for item selection.
- **Ground Tab:** Edits ground brush definitions (saved to 'grounds.xml', with a reference added to 'tilesets.xml').
  Features: inputs for brush name (wxTextCtrl), server look ID (wxSpinCtrl), Z-order (wxSpinCtrl).
  A: wxChoice allows selecting the target tileset category.
  A: wxListBox ('m_groundItemsList') manages items (ID and chance) for the brush.
  Associates: a Border ID (from the &quot;Common Properties&quot; ID control, also used by Border Tab) with alignment properties (wxChoice for &quot;outer&quot;/&quot;inner&quot;) and options (wxCheckBox for &quot;To None&quot;, &quot;Inner Border&quot;).
  Loads: existing ground brushes from 'grounds.xml' into a wxComboBox. Uses 'FindItemDialog' for item selection.
Saves: configurations by parsing and rewriting 'borders.xml' and 'grounds.xml' using pugixml, and also updates 'tilesets.xml'.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/border_editor_window.h</file_path>
      <description>Header: for 'BorderEditorDialog'. Defines the dialog class, 'BorderItem' struct (position, itemId), 'GroundItem' struct (itemId, chance), and enums like 'BorderEdgePosition'.
Declares custom controls: 'BorderGridPanel' (manages the 12-position grid for border item assignment) and 'BorderPreviewPanel' (shows a 5x5 preview of the border).</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/add_item_window.cpp</file_path>
      <description>Implements: 'AddItemWindow', a wxDialog for adding one or a range of items to a specific tileset category.
Features: an item ID input (wxSpinCtrl 'item_id_field') with a preview (DCButton 'item_button'), and a wxChoice ('tileset_choice') populated with existing tileset categories relevant to the 'category_type' passed in the constructor.
A: wxCheckBox ('range_checkbox') enables range mode, revealing wxSpinCtrl inputs for range start and end ('range_start_field', 'range_end_field').
Includes: helper buttons like &quot;Quick +10 Range&quot; and &quot;Use Current Item&quot; (sets range end from 'item_id_field').
The: &quot;Add Selection from Palette&quot; button is present but its specific multi-selection logic from palette isn't fully detailed here.
On: OK, it retrieves the selected tileset name, and either adds the single item ID or iterates through the range, calling 'g_materials.addToTileset()' for each valid item. Finally, calls 'g_materials.modify()' to save changes to 'tilesets.xml'.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/add_item_window.h</file_path>
      <description>Header for 'AddItemWindow'. Declares the dialog class and its UI elements, including controls for single item ID, range selection, and tileset choice.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/add_tileset_window.cpp</file_path>
      <description>Implements: 'AddTilesetWindow', a wxDialog for creating a new tileset category.
Features: a wxTextCtrl ('tileset_name_field') for the new tileset name and a wxSpinCtrl ('item_id_field') to specify the ID of the first item to be added to this new tileset, along with a DCButton ('item_button') for preview.
On: OK, it retrieves the tileset name and item ID, then calls 'g_materials.addToTileset()' (which handles creation if the tileset doesn't exist) and 'g_materials.modify()' to save to 'tilesets.xml'.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/add_tileset_window.h</file_path>
      <description>Header for 'AddTilesetWindow'. Declares the dialog class and its UI elements for tileset name and initial item ID.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/palette_brushlist.cpp</file_path>
      <description>Defines: 'BrushPalettePanel' which hosts the wxChoicebook of tilesets and 'BrushPanel' for displaying brushes within each tileset.
Key relevance to UI-05:
- 'BrushPalettePanel::OnClickAddTileset': Creates and shows an 'AddTilesetWindow'.
- 'BrushPalettePanel::OnClickAddItemTileset': Creates and shows an 'AddItemWindow', passing the selected tileset context.
- 'BrushPalettePanel::OnClickCreateBorder': Creates and shows a 'BorderEditorDialog'.
The: detailed brush display mechanisms (like 'SeamlessGridPanel', 'DirectDrawBrushPanel') within 'BrushPanel' are more directly related to UI-02 (Palette System).</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <documentation_references>
    <documentation_reference>QDialog: https://doc.qt.io/qt-6/qdialog.html</documentation_reference>
    <documentation_reference>QTabWidget: https://doc.qt.io/qt-6/qtabwidget.html</documentation_reference>
    <documentation_reference>QSpinBox, QLineEdit, QCheckBox, QComboBox for input fields.</documentation_reference>
    <documentation_reference>QTableWidget or QTreeView with QAbstractItemModel for lists/grids of properties.</documentation_reference>
    <documentation_reference>QGraphicsView (for potential visual doodad editor): https://doc.qt.io/qt-6/qgraphicsview.html</documentation_reference>
    <documentation_reference>QXmlStreamWriter / QXmlStreamReader (or other XML library like TinyXML2) for reading/writing definition files.</documentation_reference>
  </documentation_references>
  <current_functionality_summary>The wxWidgets version has a 'BorderEditorDialog' which is a tabbed dialog:

- **Border Tab:** Edits auto-border configurations (items assigned to 12 border positions N, E, S, W, CNW, CNE, CSE, CSW, DNW, DNE, DSE, DSW). Includes a visual grid editor ('BorderGridPanel') and preview ('BorderPreviewPanel'). Saves to 'borders.xml'.
- **Ground Tab:** Edits ground brush definitions (name, server look ID, Z-order, list of items with chances). Associates a Border ID (from common properties) with alignment options. Saves to 'grounds.xml' and adds a reference to the selected tileset category in 'tilesets.xml'.
Functionality for creating new tileset categories is handled by 'AddTilesetWindow'.
Functionality for adding new items (single or range) to existing tileset categories is handled by 'AddItemWindow'.
These dialogs are invoked from 'BrushPalettePanel' (defined in 'palette_brushlist.cpp').
The legacy editor does not have dedicated UI within 'BorderEditorDialog' for Wall or Doodad brush compositions beyond what 'PropertiesWindow' might offer; the WBS implies these will be new tabs in the Qt version.
</current_functionality_summary>
  <definition_of_done>
    <element>A Qt6 'Brush &amp; Material Editor' (e.g., a 'QDialog' or dockable 'QWidget') is implemented.</element>
    <element>The editor uses a 'QTabWidget' for separate sections: 'Borders', 'Ground Brushes', 'Wall Brushes', 'Doodad Brushes'.</element>
    <element>Borders Tab: Allows creating new and editing existing border definitions (ID, name, optional/ground type, group ID). Provides a visual grid to assign item IDs to each border part (N, S, E, W, corners, diagonals). Includes an item selector (using 'UI-06's item finder) and a preview panel. Saves definitions to 'borders.xml' (or the Qt6 equivalent data store), including the name as an XML comment.</element>
    <element>Ground Brushes Tab: Allows creating/editing ground brushes (name, server look ID, Z-order). Manages a list of items (with chances) for the ground brush. Allows associating a Border ID (defined in Border Editor) and alignment properties. 'QComboBox' to select target tileset for listing the brush. Saves definitions to 'grounds.xml' and updates 'tilesets.xml' with the brush reference.</element>
    <element>Wall Brushes Tab (Basic): Allows creating/editing wall brushes (name, server look ID). 'QComboBox' for target tileset. Input fields for specifying item IDs for essential wall parts (e.g., horizontal, vertical, pole). Saves to 'walls.xml' and updates 'tilesets.xml'.</element>
    <element>Doodad Brushes Tab (Basic): Allows creating/editing doodad brushes (name, server look ID, common properties like draggable, blocking). 'QComboBox' for target tileset. A 'QTableWidget' to manage a list of items with their relative X, Y, Z offsets for composite doodads. Saves to 'doodads.xml' and updates 'tilesets.xml'.</element>
    <element>Helper dialogs for creating new tileset categories and adding items/brushes to tileset categories are implemented and accessible.</element>
  </definition_of_done>
  <boilerplate_coder_ai_prompt>Your task is to design and implement a 'Brush &amp; Material Editor' using Qt6. This editor will allow users to define and modify auto-borders, ground brushes, and provide basic editing for wall and doodad brushes. These definitions are typically stored in XML files ('borders.xml', 'grounds.xml', 'walls.xml', 'doodads.xml', and 'tilesets.xml').

**Reference Files:** 'wxwidgets/border_editor_window.*' (for border and ground brush editing), 'wxwidgets/palette_brushlist.*' (for how tilesets/categories are added/items added to them).

**Main Editor Structure (e.g., 'BrushMaterialEditorDialog : QDialog'):**
Use a 'QTabWidget' for the following sections:

**1. 'Borders' Tab (based on 'BorderEditorDialog' - Border Tab):**
   - Inputs: 'QLineEdit' for Border Name (stored as comment in XML), 'QSpinBox' for Border ID (1-1000), 'QSpinBox' for Group ID (0-1000), 'QCheckBox' &quot;Optional&quot;, 'QCheckBox' &quot;Is Ground Border&quot;.
   - 'QComboBox' to load existing border definitions from 'borders.xml' for editing.
   - **Visual Grid Editor:** Create a custom 'QWidget' (e.g., 'BorderGridEditorWidget').
     - It should display 12 clickable cells representing: N, E, S, W, CNW, CNE, CSE, CSW, DNW, DNE, DSE, DSW.
     - Clicking a cell makes it active for item assignment.
   - **Item Assignment:**
     - 'QSpinBox' for Item ID (for the active grid cell).
     - 'QPushButton' &quot;Browse...&quot; (opens item finder - 'UI-06').
     - 'QPushButton' &quot;Apply Item to Selected Cell&quot;.
   - **Preview Panel:** A custom 'QWidget' ('BorderPreviewWidget') that renders a 5x5 grid showing how the current border items would look around a central tile.
   - **Actions:** 'QPushButton' &quot;Save Border&quot; (writes changes to 'borders.xml', including name as a comment), 'QPushButton' &quot;Clear Grid&quot;, 'QPushButton' &quot;Load Selected Border&quot;.

**2. 'Ground Brushes' Tab (based on 'BorderEditorDialog' - Ground Tab):**
   - Inputs: 'QLineEdit' for Brush Name, 'QSpinBox' for Server Look ID, 'QSpinBox' for Z-Order.
   - 'QComboBox' to load existing ground brushes from 'grounds.xml'.
   - 'QComboBox' 'm_tilesetChoice' to select the target tileset category (from 'tilesets.xml') where this brush will be listed.
   - **Item List:** 'QTableWidget' (columns: &quot;Item ID&quot;, &quot;Chance&quot;). Buttons: &quot;Add Item&quot; (uses item finder 'UI-06' + 'QInputDialog' for chance), &quot;Remove Item&quot;.
   - **Border Association:**
     - 'QSpinBox' 'm_idCtrl' (from common properties section, or a dedicated one here) to specify the Border ID (defined in 'Borders' Tab) for this ground brush.
     - 'QComboBox' 'm_borderAlignmentChoice' for Border Alignment (&quot;outer&quot;, &quot;inner&quot;).
     - 'QCheckBox' 'm_includeToNoneCheck' for &quot;Add 'to=none' border variant&quot;.
     - 'QCheckBox' 'm_includeInnerCheck' for &quot;Add inner border variant (uses same ID as main)&quot;.
   - **Actions:** 'QPushButton' &quot;Save Ground Brush&quot; (writes to 'grounds.xml', adds '&lt;brush name=&quot;...&quot;/&gt;' to selected category in 'tilesets.xml').

**3. 'Wall Brushes' Tab (Basic):**
   - Inputs: 'QLineEdit' for Brush Name, 'QSpinBox' for Server Look ID.
   - 'QComboBox' to load existing wall brushes from 'walls.xml'.
   - 'QComboBox' for target Tileset.
   - Input fields ('QSpinBox'+Browse) for Item IDs for: Horizontal Wall, Vertical Wall, Pole.
   - (Future: Expand to cover all 12+ wall segment types and add door/window definitions within them. A visual grid editor here would be ideal.)
   - **Actions:** 'QPushButton' &quot;Save Wall Brush&quot; (writes to 'walls.xml', updates 'tilesets.xml').

**4. 'Doodad Brushes' Tab (Basic):**
   - Inputs: 'QLineEdit' for Brush Name, 'QSpinBox' for Server Look ID.
   - 'QComboBox' to load existing doodad brushes from 'doodads.xml'.
   - 'QComboBox' for target Tileset.
   - 'QCheckBox'es for properties (Draggable, Blocking, etc.).
   - **Composite Items:** 'QTableWidget' (columns: &quot;Item ID&quot;, &quot;X-Offset&quot;, &quot;Y-Offset&quot;, &quot;Z-Offset&quot;). Buttons to Add/Remove/Edit items (Item ID uses item finder).
   - (Future: 'QGraphicsView'-based visual editor to place items relative to an origin for composite doodads.)
   - **Actions:** 'QPushButton' &quot;Save Doodad Brush&quot; (writes to 'doodads.xml', updates 'tilesets.xml').

**Helper Dialogs (can be simple 'QDialog's, possibly invoked from palettes or this editor):**
-   'NewTilesetDialog': 'QLineEdit' for new tileset name. Logic to add a new '&lt;tileset name=&quot;...&quot;&gt;&lt;terrain/&gt;&lt;/tileset&gt;' (or appropriate inner tags like '&lt;items/&gt;', '&lt;doodad/&gt;') to 'tilesets.xml'.
-   'AddItemToTilesetDialog': 'QComboBox' for tileset selection, 'QSpinBox'+Browse for item ID (or brush name if adding brushes). Logic to add '&lt;item id=&quot;...&quot;/&gt;' or '&lt;brush name=&quot;...&quot;/&gt;' to the chosen category within 'tilesets.xml'.

**XML Handling:**
- Implement robust parsing and saving for 'borders.xml', 'grounds.xml', 'walls.xml', 'doodads.xml', and 'tilesets.xml' using 'QXmlStreamReader' and 'QXmlStreamWriter' or an equivalent library.
- When saving, try to preserve comments and existing structure. For 'borders.xml', save the &quot;Name&quot; field as an XML comment before the '&lt;border&gt;' tag.
</boilerplate_coder_ai_prompt>
</UI-05>
