wbs_item_id: TEST-06
name: Unit Test Network Protocol
description: Develop unit tests for network protocol message creation, serialization, and deserialization, covering various message types and error conditions.
dependencies:
- NET-01
- TEST-01
input_files: []
analyzed_input_files: []
documentation_references:
- 'Qt Test Framework: https://doc.qt.io/qt-6/qttest-index.html'
- 'QByteArray: https://doc.qt.io/qt-6/qbytearray.html'
- 'QDataStream: https://doc.qt.io/qt-6/qdatastream.html (Often used for serializing to QByteArray)'
current_functionality_summary: This task is for creating new unit tests for the Qt6 network protocol implementation. The protocol, defined in NET-01, will specify various message types for client-server communication during live map editing sessions. These tests will ensure that messages can be correctly serialized into a byte stream and deserialized back into their structured object forms, maintaining data integrity.
definition_of_done:
- Unit tests using the Qt Test framework are created for each distinct network message type specified by the `NET-01` task (e.g., handshake, tile update, selection change, user join/leave, map chunk, chat messages).
- 'For every message type, round-trip serialization/deserialization tests are implemented:'
- '  - A message object is instantiated and populated with representative test data for all its fields.'
- '  - The message object is serialized into a `QByteArray`.'
- '  - The `QByteArray` is then deserialized back into a new message object of the expected type.'
- '  - A field-by-field comparison is performed between the original and deserialized message objects to ensure all data is identical.'
- Tests cover messages containing various data types, including primitive types (integers, strings, booleans), lists/vectors of data, and any nested custom data structures.
- 'Error handling during deserialization is thoroughly tested, including scenarios such as:'
- '  - Attempting to deserialize from an incomplete/truncated `QByteArray`.'
- '  - Attempting to deserialize a `QByteArray` containing corrupted or malformed data (e.g., incorrect field types, out-of-range values).'
- '  - Attempting to deserialize data for an unknown or unsupported message type ID.'
- '  - Parsers should robustly handle these errors, for example, by returning a null pointer or an error status, without crashing.'
- All created unit tests pass successfully.
- Tests are integrated into the CMake build system for automated execution.
boilerplate_coder_ai_prompt: |-
  Your task is to write unit tests for the network protocol message handling (serialization and deserialization) in the Qt6 Remere's Map Editor. This will test the classes and functions developed as part of `NET-01 Isolate and Port Network Protocol`. Use the Qt Test framework.

  **General Test Strategy for Each Message Type:**
  The primary method will be round-trip testing:
  1.  **Instantiate & Populate:** Create an instance of a specific network message class (e.g., `TileEditMessage`, `UserChatMessage`). Fill its member variables with defined test data.
  2.  **Serialize:** Convert the message object into a `QByteArray` using the protocol's serialization mechanism (e.g., a method on the message object itself, or a utility class like `NetworkMessageSerializer`).
  3.  **Deserialize:** Parse the `QByteArray` back into a new instance of the expected message class using the protocol's deserialization mechanism (e.g., a static factory method, or a utility class like `NetworkMessageParser`).
  4.  **Verify:** Compare every field of the original message object with the corresponding field in the deserialized message object. They must be identical. Use `QCOMPARE` and `QVERIFY` macros.

  **Key Aspects to Test for Each Message Type:**
  *   **All Data Fields:** Ensure every piece of data the message is designed to carry is tested.
  *   **Data Types:** Include tests for various data types:
      - Integers (of different sizes: int8, int16, int32, uint8, etc.)
      - Booleans
      - Strings (empty, short, long, with special characters if relevant)
      - Floating-point numbers (if used)
      - Lists/arrays of primitive types or custom objects (e.g., a list of tile coordinates, a list of item IDs).
      - Enum types.
      - Any custom serializable structs or classes that are part of a message.
  *   **Boundary Conditions:** Test with empty strings, zero values, maximum allowed values for numeric types, empty lists, etc.

  **Error Handling in Deserialization:**
  Create test cases that feed invalid data to the deserialization logic:
  *   **Incomplete Buffer:** Provide a `QByteArray` that is shorter than required for the message type. The deserializer should detect this and fail gracefully (e.g., return `nullptr` or an error code).
  *   **Corrupted Buffer:**
      - Invalid message type identifier (if your protocol uses one).
      - Data type mismatches (e.g., trying to read a string where an int is expected).
      - Data values out of expected range.
  *   The deserializer should not crash and should indicate an error.

  **Example Test Structure (Conceptual):**
  ```cpp
  #include <QtTest>
  #include "network_message_types.h" // Assume this declares your message classes
  #include "network_protocol_handler.h" // Assume this has serialize/deserialize functions

  class TestNetworkProtocol : public QObject {{
      Q_OBJECT
  private slots:
      void testTileEditMessage_data() {{
          QTest::addColumn<Position>("pos");
          QTest::addColumn<uint16_t>("itemId");
          // Add more columns for other fields in TileEditMessage

          QTest::newRow("basic edit") << Position(100, 200, 7) << uint16_t(1234);
          // Add more test data rows
      }}

      void testTileEditMessage() {{
          QFETCH(Position, pos);
          QFETCH(uint16_t, itemId);

          TileEditMessage originalMsg;
          originalMsg.position = pos;
          originalMsg.itemID = itemId;
          // ... set other fields ...

          QByteArray buffer;
          NetworkProtocolHandler::serialize(originalMsg, buffer); // Example serialization

          auto deserializedBase = NetworkProtocolHandler::deserialize(buffer); // Example deserialization
          QVERIFY(deserializedBase != nullptr);
          QCOMPARE(deserializedBase->getType(), MessageType::TileEdit); // Example type check

          TileEditMessage* deserializedMsg = static_cast<TileEditMessage*>(deserializedBase.get());
          QCOMPARE(deserializedMsg->position, originalMsg.position);
          QCOMPARE(deserializedMsg->itemID, originalMsg.itemID);
          // ... compare other fields ...
      }}

      // Add similar test functions for other message types...
      // Add test functions for error handling in deserialization...
  }};

  ```

  Ensure all tests are integrated into the CMake build system for automated execution.
