id: UI-EditorWindow
section: UI Elements
title: Implement Editor Window / Map Document Area
original_input_files:
  # Conceptual: Main area for hosting map views, often a tabbed or MDI interface.
  - wxwidgets/application.cpp # For MainFrame containing MapTabbook
  - wxwidgets/editor_tabs.cpp # For MapTabbook itself
  - wxwidgets/editor_tabs.h
analyzed_input_files:
  - file_path: wxwidgets/application.cpp
    description: |
      The `MainFrame` created here hosts a `MapTabbook`. This `MapTabbook` is the
      container for individual map editor instances.
  - file_path: wxwidgets/editor_tabs.h
    description: |
      Declares `MapTabbook` (derived from `wxAuiNotebook`), which manages multiple
      editor instances (`EditorPanel`, each containing a `MapCanvas`) as tabs.
      Handles adding, removing, and selecting editor tabs.
  - file_path: wxwidgets/editor_tabs.cpp
    description: |
      Implements `MapTabbook`. Manages creation of `EditorPanel` for new tabs.
      Handles tab change events to set the active editor.
dependencies:
  - UI-01               # MainWindow, which will host this editor area
  - RENDER-01           # For the MapViewWidget that will be displayed in each tab/editor instance
  - LOGIC-01            # For EditorController, as each editor instance will have one
  - FINAL-01            # For integration of core map logic with UI for each editor instance
current_functionality_summary: |
  The legacy application uses `MapTabbook` (a `wxAuiNotebook` subclass) to manage
  multiple open map editors in a tabbed interface. Each tab represents an instance
  of an editor for a map.
qt6_migration_steps: |
  1. Design the main editor area within `MainWindow` (from `UI-01`). This will likely be a `QTabWidget` set as the central widget.
  2. Create `EditorInstanceWidget` (or similar name) class, which will be the widget placed in each tab. This widget would contain:
     - An instance of `MapViewWidget` (from `RENDER-01`).
     - Potentially other UI elements specific to a single editor session (e.g., local status bar, specific tool options).
     - An instance of or reference to an `EditorController` (from `LOGIC-01`) specific to this map instance.
  3. Implement logic in `MainWindow` or a dedicated `EditorSessionManager` to:
     - Create a new `EditorInstanceWidget` (and its associated `Map`, `EditorController`, `QUndoStack`) when a new map is created or an existing one is opened (`FINAL-02`).
     - Add this widget as a new tab to the central `QTabWidget`.
     - Handle tab closing (prompting for save if map is modified).
     - Handle tab switching (notifying relevant services like `EditorStateService` of the active editor/map).
  4. Ensure window title in `MainWindow` updates to reflect the name of the map in the active tab.
definition_of_done: |
  - A `QTabWidget` (or similar MDI mechanism) is implemented as the central area of `MainWindow` for hosting map editors.
  - New maps or opened maps each appear in a new tab within this `QTabWidget`.
  - Each tab contains a fully functional `MapViewWidget` for its respective map.
  - Users can switch between open map tabs.
  - Closing a map tab correctly prompts for saving unsaved changes and disposes of the editor instance.
  - The main application window title reflects the currently active map tab.
boilerplate_coder_ai_prompt: |
  Implement the tabbed document interface for managing multiple map editors within the `MainWindow`.

  1.  **In `MainWindow.h` (from `UI-01`):**
      -   Add `QTabWidget* m_editorTabWidget;`
  2.  **In `MainWindow.cpp` constructor:**
      -   `m_editorTabWidget = new QTabWidget(this);`
      -   `m_editorTabWidget->setTabsClosable(true);`
      -   `m_editorTabWidget->setMovable(true);`
      -   `setCentralWidget(m_editorTabWidget);`
      -   `connect(m_editorTabWidget, &QTabWidget::currentChanged, this, &MainWindow::onActiveEditorTabChanged);`
      -   `connect(m_editorTabWidget, &QTabWidget::tabCloseRequested, this, &MainWindow::onEditorTabCloseRequested);`
  3.  **Create `EditorInstanceWidget : QWidget` (new class):**
      -   **Header:** Store `MapViewWidget* mapView; EditorController* editorController; mapcore::Map* mapData; QUndoStack* undoStack; QString filePath;`
      -   **Constructor:** Takes `mapcore::Map* map, QString path, AppContext* appContext, QWidget* parent`. Creates its own `MapViewWidget`, `EditorController`, `QUndoStack`.
      -   Provide public accessors for its components.
  4.  **In `MainWindow` methods for file operations (from `FINAL-02`):**
      -   `slotFileNew()`: After creating new `mapcore::Map`, create `EditorInstanceWidget* editorWidget = new EditorInstanceWidget(newMap, "Untitled", m_appContext, m_editorTabWidget);`
                         `int newIndex = m_editorTabWidget->addTab(editorWidget, "Untitled*"); m_editorTabWidget->setCurrentIndex(newIndex);`
      -   `slotFileOpen(filePath)`: After loading `mapcore::Map`, create `EditorInstanceWidget* editorWidget = new EditorInstanceWidget(loadedMap, filePath, m_appContext, m_editorTabWidget);`
                               `int newIndex = m_editorTabWidget->addTab(editorWidget, QFileInfo(filePath).fileName()); m_editorTabWidget->setCurrentIndex(newIndex);`
  5.  **In `MainWindow` slots for tab management:**
      -   `onActiveEditorTabChanged(int index)`: Get current `EditorInstanceWidget*`. Update `EditorStateService` (from `REFACTOR-01`) with active map/editor. Update window title.
      -   `onEditorTabCloseRequested(int index)`: Get `EditorInstanceWidget*`. Check its map for unsaved changes (prompt to save). If not cancelled, remove tab, delete `EditorInstanceWidget` and its associated map/controller/undostack.
documentation_references: ["QTabWidget", "QMainWindow", "UI-01", "RENDER-01", "LOGIC-01", "FINAL-02"]
estimation_effort: Large
