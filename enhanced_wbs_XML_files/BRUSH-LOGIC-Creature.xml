<?xml version="1.0" ?>
<BRUSH-LOGIC-Creature>
  <id>BRUSH-LOGIC-Creature</id>
  <section>Editor Behavior &amp; Logic</section>
  <title>Port Creature Brush Logic</title>
  <original_input_files>
    <original_input_file>wxwidgets/creature_brush.cpp</original_input_file>
    <original_input_file>wxwidgets/creature_brush.h</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>wxwidgets/creature_brush.h</file_path>
      <description>Defines 'CreatureBrush' class (inherits 'Brush') for placing creatures. Stores 'CreatureType* creature_type'.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/creature_brush.cpp</file_path>
      <description>Implements 'CreatureBrush'. 'canDraw' checks if creature can be placed (tile exists, not blocking, spawn area or auto-create spawn enabled). 'draw_creature' places the creature, potentially creating a basic spawn. 'undraw' removes the creature.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>CORE-BRUSH-FRAMEWORK</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>CORE-10-SpawnSystem</dependencie>
    <dependencie>LOGIC-01</dependencie>
    <dependencie>CORE-04</dependencie>
  </dependencies>
  <current_functionality_summary>The 'CreatureBrush' places a specific type of creature on a tile. If 'AUTO_CREATE_SPAWN' is enabled and the tile isn't part of an existing spawn, it creates a new 'Spawn' object on that tile. It sets the creature's spawntime based on global GUI settings.
</current_functionality_summary>
  <qt6_migration_steps>1. Define `mapcore::CreatureBrush` class inheriting from `mapcore::Brush`.
2. Store `const mapcore::CreatureType* currentCreatureType` selected via palette.
3. Implement `canApply()`: Check if tile exists, not blocking, is valid spawn area or auto-create spawn is enabled (from `AppSettings`).
4. Implement `apply()`:
   - If erasing: Remove creature from tile. If it was the only creature in an auto-created spawn, consider removing spawn.
   - If drawing: Create `mapcore::Creature` instance. Set its type. Set its spawn time (from `BrushSettings` or global setting). Place on tile.
   - If auto-create spawn is enabled and no spawn exists, create a basic `SpawnData` on the tile (e.g., radius 1) and add this creature type to its list.
   - Record changes for undo.
</qt6_migration_steps>
  <definition_of_done>- `mapcore::CreatureBrush` is implemented.
- Placing a creature works, including setting its type and spawn time.
- Auto-creation of basic spawns (if enabled) functions correctly.
- Erasing removes the creature.
- Operations are undoable.
- Unit tests for creature placement and spawn auto-creation pass.
</definition_of_done>
  <boilerplate_coder_ai_prompt>Port `CreatureBrush` from `wxwidgets/creature_brush.cpp/h` to `mapcore::CreatureBrush`.
1. Header: `mapcore::CreatureBrush : public mapcore::Brush`. Store `const mapcore::CreatureType* m_creatureType;`. Method `void setCreatureType(const mapcore::CreatureType* type);`.
2. Source: Implement `apply()` to place/remove `mapcore::Creature` on/from a `mapcore::Tile`. If drawing and auto-spawn is enabled (check `AppSettings`), and no spawn exists, create a basic `SpawnData` on the tile (from `CORE-10-SpawnSystem`) and add this creature. Use `EditorControllerInterface` to make changes undoable.
</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>mapcore::Brush</documentation_reference>
    <documentation_reference>mapcore::Creature</documentation_reference>
    <documentation_reference>mapcore::CreatureType</documentation_reference>
    <documentation_reference>mapcore::Tile</documentation_reference>
    <documentation_reference>mapcore::SpawnData</documentation_reference>
  </documentation_references>
  <estimation_effort>Medium</estimation_effort>
</BRUSH-LOGIC-Creature>
