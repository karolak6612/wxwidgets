id: BRUSH-LOGIC-Creature
section: Editor Behavior & Logic
title: Port Creature Brush Logic
original_input_files:
  - wxwidgets/creature_brush.cpp
  - wxwidgets/creature_brush.h
analyzed_input_files:
  - file_path: wxwidgets/creature_brush.h
    description: Defines 'CreatureBrush' class (inherits 'Brush') for placing creatures. Stores 'CreatureType* creature_type'.
  - file_path: wxwidgets/creature_brush.cpp
    description: Implements 'CreatureBrush'. 'canDraw' checks if creature can be placed (tile exists, not blocking, spawn area or auto-create spawn enabled). 'draw_creature' places the creature, potentially creating a basic spawn. 'undraw' removes the creature.
dependencies:
  - CORE-BRUSH-FRAMEWORK # For mapcore::Brush base class and BrushSettings
  - CORE-01              # For mapcore::Tile, mapcore::Position
  - CORE-02              # For mapcore::CreatureManager (to get CreatureType) and mapcore::Creature
  - CORE-10-SpawnSystem  # For SpawnData definitions if creating spawns
  - LOGIC-01             # For EditorController
  - CORE-04              # For Action/History system
current_functionality_summary: |
  The 'CreatureBrush' places a specific type of creature on a tile. If 'AUTO_CREATE_SPAWN' is enabled and the tile isn't part of an existing spawn, it creates a new 'Spawn' object on that tile. It sets the creature's spawntime based on global GUI settings.
qt6_migration_steps: |
  1. Define `mapcore::CreatureBrush` class inheriting from `mapcore::Brush`.
  2. Store `const mapcore::CreatureType* currentCreatureType` selected via palette.
  3. Implement `canApply()`: Check if tile exists, not blocking, is valid spawn area or auto-create spawn is enabled (from `AppSettings`).
  4. Implement `apply()`:
     - If erasing: Remove creature from tile. If it was the only creature in an auto-created spawn, consider removing spawn.
     - If drawing: Create `mapcore::Creature` instance. Set its type. Set its spawn time (from `BrushSettings` or global setting). Place on tile.
     - If auto-create spawn is enabled and no spawn exists, create a basic `SpawnData` on the tile (e.g., radius 1) and add this creature type to its list.
     - Record changes for undo.
definition_of_done: |
  - `mapcore::CreatureBrush` is implemented.
  - Placing a creature works, including setting its type and spawn time.
  - Auto-creation of basic spawns (if enabled) functions correctly.
  - Erasing removes the creature.
  - Operations are undoable.
  - Unit tests for creature placement and spawn auto-creation pass.
boilerplate_coder_ai_prompt: |
  Port `CreatureBrush` from `wxwidgets/creature_brush.cpp/h` to `mapcore::CreatureBrush`.
  1. Header: `mapcore::CreatureBrush : public mapcore::Brush`. Store `const mapcore::CreatureType* m_creatureType;`. Method `void setCreatureType(const mapcore::CreatureType* type);`.
  2. Source: Implement `apply()` to place/remove `mapcore::Creature` on/from a `mapcore::Tile`. If drawing and auto-spawn is enabled (check `AppSettings`), and no spawn exists, create a basic `SpawnData` on the tile (from `CORE-10-SpawnSystem`) and add this creature. Use `EditorControllerInterface` to make changes undoable.
documentation_references: ["mapcore::Brush", "mapcore::Creature", "mapcore::CreatureType", "mapcore::Tile", "mapcore::SpawnData"]
estimation_effort: Medium
