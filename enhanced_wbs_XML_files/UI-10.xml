<?xml version="1.0" ?>
<UI-10>
  <id>UI-10</id>
  <section>UI Elements</section>
  <title>Define RAW Items Palette and Terrain Brushes Palette</title>
  <original_input_files>
    <original_input_file>XML/760/raw_palette.xml</original_input_file>
    <original_input_file>XML/760/grounds.xml</original_input_file>
    <original_input_file>XML/760/walls.xml</original_input_file>
    <original_input_file>XML/760/tilesets.xml</original_input_file>
    <original_input_file>XML/760/doodads.xml</original_input_file>
    <original_input_file>wxwidgets/palette_brushlist.cpp</original_input_file>
    <original_input_file>wxwidgets/palette_window.cpp</original_input_file>
  </original_input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <file_path>XML/760/raw_palette.xml</file_path>
      <description>Defines the list of RAW items available for selection in a dedicated palette. Each entry typically specifies an item ID.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>XML/760/grounds.xml</file_path>
      <description>Defines ground brushes, including their item IDs and potentially properties relevant for palette display and brush behavior.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>XML/760/walls.xml</file_path>
      <description>Defines wall brushes, their item IDs, and properties for palette display and auto-bordering logic.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>XML/760/tilesets.xml</file_path>
      <description>Defines tilesets, which group various terrain elements (grounds, walls, doodads) that would be displayed in a terrain palette, often hierarchically or categorized.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>XML/760/doodads.xml</file_path>
      <description>Defines doodad brushes. While some might be general, others could be terrain-specific and appear in a terrain palette section.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/palette_brushlist.cpp</file_path>
      <description>Contains generic logic for displaying lists or grids of brushes, handling selection, and potentially common UI elements like search/filter that would be adapted for RAW and Terrain palettes. (Analysis based on its role as a generic component for brush display).</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <file_path>wxwidgets/palette_window.cpp</file_path>
      <description>Manages the overall palette window structure, typically using a wxChoicebook or similar to host different palette tabs/categories. The RAW and Terrain palettes would be integrated into this main structure. (Analysis based on its role as the main palette container).</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <dependencies>
    <dependencie>UI-01</dependencie>
    <dependencie>UI-02</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-02</dependencie>
    <dependencie>LOGIC-02</dependencie>
    <dependencie>LOGIC-03</dependencie>
    <dependencie>LOGIC-04</dependencie>
    <dependencie>LOGIC-01</dependencie>
  </dependencies>
  <current_functionality_summary>RAW items and various terrain brushes (grounds, walls, etc.) are likely selected in the legacy UI through dedicated palette sections. These sections would list items/brushes parsed from their respective XML definitions (`raw_palette.xml`, `grounds.xml`, `walls.xml`, `tilesets.xml`). The `palette_brushlist.cpp` and `palette_window.cpp` provide the general framework for displaying such lists and integrating them into the main palette UI.
</current_functionality_summary>
  <qt6_migration_steps>1. Design and implement a `RawItemsPaletteQt` tab/widget.
   - Parse `XML/760/raw_palette.xml` (using `QXmlStreamReader`).
   - Display RAW items (e.g., using `QListView` with icons or a custom `QAbstractItemView` for richer display).
   - Allow selection of a RAW item to activate the RAW brush.
2. Design and implement a `TerrainBrushPaletteQt` tab/widget.
   - This palette might have sub-sections or filters for different terrain brush types (Grounds, Walls, Doodads from Tilesets, etc.).
   - Parse `XML/760/grounds.xml`, `XML/760/walls.xml`, `XML/760/tilesets.xml`, `XML/760/doodads.xml` (for terrain doodads) for brush definitions.
   - Display terrain brushes, allowing selection to activate the corresponding specialized brush (e.g., GroundBrush, WallBrush).
3. Ensure both palettes integrate into the main palette system (defined in `UI-02`).
4. Connect palette selections to a `BrushManager` or directly update the `EditorController`'s active brush state.</qt6_migration_steps>
  <definition_of_done>- `RawItemsPaletteQt` correctly loads and displays items from `raw_palette.xml`.
- `TerrainBrushPaletteQt` correctly loads and displays ground, wall, and other terrain-related brushes from their XML definitions.
- Users can select items/brushes from these palettes to activate them for drawing.
- Palettes are integrated into the main UI's palette system.</definition_of_done>
  <boilerplate_coder_ai_prompt>Implement two Qt palette tabs: `RawItemsPaletteQt` and `TerrainBrushPaletteQt`.
`RawItemsPaletteQt`:
  - Parse `XML/760/raw_palette.xml`.
  - Display RAW items for selection (e.g., in a `QListView` or custom grid).
  - Selecting an item should activate the generic RAW brush with the chosen item ID.
`TerrainBrushPaletteQt`:
  - Parse `XML/760/grounds.xml`, `XML/760/walls.xml`, `XML/760/tilesets.xml` (and `doodads.xml` for terrain-specific doodads).
  - Provide a way to display and select these terrain brushes (e.g., categorized lists or grids).
  - Selecting a brush should activate the appropriate specialized brush (GroundBrush, WallBrush, etc.).
Integrate both palettes into the main application palette system. Connect selections to update the active brush in the editor.</boilerplate_coder_ai_prompt>
  <documentation_references>
    <documentation_reference>https://doc.qt.io/qt-6/qlistview.html</documentation_reference>
    <documentation_reference>https://doc.qt.io/qt-6/qabstractitemview.html</documentation_reference>
    <documentation_reference>https://doc.qt.io/qt-6/qxmlstreamreader.html</documentation_reference>
  </documentation_references>
  <estimation_effort>Large (10-15 developer days)</estimation_effort>
</UI-10>
