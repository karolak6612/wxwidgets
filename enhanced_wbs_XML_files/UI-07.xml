<?xml version="1.0" ?>
<UI-07>
  <id>UI-07</id>
  <section>UI Elements</section>
  <title>Port House Palette, Waypoint Palette, and EditHouseDialog</title>
  <original_task_id>UI-07</original_task_id>
  <description>Recreate UI components for managing houses (palette tab, editor dialog for properties) and waypoints (palette tab) using Qt6.</description>
  <dependencies>
    <dependencie>UI-02</dependencie>
    <dependencie>CORE-01</dependencie>
    <dependencie>CORE-11-WaypointSystem</dependencie>
    <dependencie>CORE-09-HouseSystem</dependencie>
    <dependencie>BUILD-01</dependencie>
    <dependencie>LOGIC-01</dependencie>
  </dependencies>
  <input_files>
    <input_file>wxwidgets/palette_house.cpp</input_file>
    <input_file>wxwidgets/palette_house.h</input_file>
    <input_file>wxwidgets/palette_waypoints.cpp</input_file>
    <input_file>wxwidgets/palette_waypoints.h</input_file>
  </input_files>
  <analyzed_input_files>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_house.h</filepath>
      <description>Declares 'HousePalettePanel' (derived from 'PalettePanel') and 'EditHouseDialog'. 'HousePalettePanel' manages UI for house selection, town filtering, and house brush/exit brush mode. It includes 'wxChoice' for towns ('town_choice'), 'SortableListBox' for houses ('house_list'), 'wxButton's for Add/Edit/Remove house ('add_house_button', 'edit_house_button', 'remove_house_button'), and 'wxToggleButton's for House/Exit brush mode ('house_brush_button', 'select_position_button'). 'EditHouseDialog' is for modifying house properties like name, rent, town ID, and guildhall status, using controls like 'wxTextCtrl' for name/rent, 'wxChoice' for town, 'wxSpinCtrl' for ID, and 'wxCheckBox' for guildhall.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_house.cpp</filepath>
      <description>Implements 'HousePalettePanel' and 'EditHouseDialog'. 'HousePalettePanel::OnUpdate' populates the 'town_choice' from 'map-&gt;towns'. 'HousePalettePanel::SelectTown' filters the 'house_list' based on the selected town. Event handlers 'OnClickAddHouse', 'OnClickEditHouse', and 'OnClickRemoveHouse' manage house data by interacting with 'map-&gt;houses' and invoking 'EditHouseDialog' for editing. 'OnClickHouseBrushButton' and 'OnClickSelectExitButton' toggle the active house-related brush ('g_gui.house_brush', 'g_gui.house_exit_brush'). 'OnListBoxContextMenu' and 'OnMoveHouseToTown' handle moving selected houses to a different town. 'EditHouseDialog::OnClickOK' validates inputs (name, unique ID if changed, rent) and updates the 'House' object copy.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_waypoints.h</filepath>
      <description>Declares 'WaypointPalettePanel' (derived from 'PalettePanel'). It uses a 'wxListCtrl' ('waypoint_list') in report view with a single column to display waypoint names and allow in-place editing. It includes 'wxButton's for adding ('add_waypoint_button') and removing ('remove_waypoint_button') waypoints.</description>
    </analyzed_input_file>
    <analyzed_input_file>
      <filepath>wxwidgets/palette_waypoints.cpp</filepath>
      <description>Implements 'WaypointPalettePanel'. 'OnUpdate' populates the 'waypoint_list' from 'map-&gt;waypoints'. 'OnClickWaypoint' (list item selection) sets the selected waypoint for 'g_gui.waypoint_brush' and navigates the map view to its position. 'OnBeginEditWaypointLabel' and 'OnEditWaypointLabel' handle in-place renaming of waypoints, including validation for unique names. 'OnClickAddWaypoint' creates a new 'Waypoint' object, adds it to 'map-&gt;waypoints' and the list, then initiates editing of its name. 'OnClickRemoveWaypoint' removes the selected waypoint(s) from the map and list after confirmation.</description>
    </analyzed_input_file>
  </analyzed_input_files>
  <documentation_references>
    <documentation_reference>QDialog: https://doc.qt.io/qt-6/qdialog.html</documentation_reference>
    <documentation_reference>QListWidget: https://doc.qt.io/qt-6/qlistwidget.html</documentation_reference>
    <documentation_reference>QComboBox: https://doc.qt.io/qt-6/qcombobox.html</documentation_reference>
    <documentation_reference>QLineEdit: https://doc.qt.io/qt-6/qlineedit.html</documentation_reference>
    <documentation_reference>QSpinBox: https://doc.qt.io/qt-6/qspinbox.html</documentation_reference>
    <documentation_reference>QCheckBox: https://doc.qt.io/qt-6/qcheckbox.html</documentation_reference>
    <documentation_reference>QRadioButton: https://doc.qt.io/qt-6/qradiobutton.html</documentation_reference>
    <documentation_reference>QActionGroup: https://doc.qt.io/qt-6/qactiongroup.html</documentation_reference>
    <documentation_reference>QMenu (for context menu): https://doc.qt.io/qt-6/qmenu.html</documentation_reference>
  </documentation_references>
  <current_functionality_summary>The legacy application provides UI for managing houses and waypoints primarily through dedicated palette tabs:
1.  **'HousePalettePanel'**:
    *   Allows users to select a town from a 'wxChoice' dropdown, which then populates a 'SortableListBox' with houses belonging to that town. A &quot;(No Town)&quot; option lists houses not assigned to any town.
    *   Provides &quot;Add&quot;, &quot;Edit&quot;, and &quot;Remove&quot; buttons. &quot;Add&quot; and &quot;Edit&quot; open the 'EditHouseDialog'. &quot;Remove&quot; deletes selected houses.
    *   A context menu on the house list allows moving selected house(s) to a different town.
    *   Features 'wxToggleButton's to switch between &quot;Draw House Tiles&quot; mode (using 'HouseBrush') and &quot;Set House Exit&quot; mode (using 'HouseExitBrush'), configuring the active brush with the currently selected house.
2.  **'EditHouseDialog'**: A modal dialog for editing properties of a single 'House' object. It includes fields for:
    *   House Name ('wxTextCtrl').
    *   Town ('wxChoice', populated with existing towns).
    *   Rent ('wxTextCtrl', numeric input).
    *   House ID ('wxSpinCtrl', with warnings if changing an existing ID might cause conflicts).
    *   Guildhall status ('wxCheckBox').
    Input: validation is performed on OK.
3.  **'WaypointPalettePanel'**:
    *   Displays all waypoints from the current map in a 'wxListCtrl' (report view, single column).
    *   Waypoint names can be edited directly in the list.
    *   &quot;Add Waypoint&quot; button creates a new waypoint with a default name and initiates in-place editing of the name.
    *   &quot;Remove Waypoint&quot; button deletes the selected waypoint(s) after confirmation.
    *   Selecting a waypoint in the list sets it as the active 'WaypointBrush' and centers the map view on its location.
</current_functionality_summary>
  <qt6_migration_steps>
    <qt6_migration_step>Create 'HousePaletteTab : QWidget' for the 'Houses' tab in the main palette system ('UI-02').</qt6_migration_step>
    <qt6_migration_step>  In 'HousePaletteTab', add a 'QComboBox' ('townCombo') to list towns (from 'TownManager') plus a '(No Town)' entry.</qt6_migration_step>
    <qt6_migration_step>  Add a 'QListWidget' ('houseList') to display houses. Items should show house name, ID, and size. Set selection mode to 'QAbstractItemView::ExtendedSelection'.</qt6_migration_step>
    <qt6_migration_step>  Populate 'houseList' based on 'townCombo`'s selection, filtering houses from 'HouseManager'.</qt6_migration_step>
    <qt6_migration_step>  Add 'QPushButton's: 'addHouseButton', 'editHouseButton', 'removeHouseButton'.</qt6_migration_step>
    <qt6_migration_step>  Implement a context menu for 'houseList' with a 'Move to Town...' action, which will open a 'QInputDialog::getItem' to select a new town.</qt6_migration_step>
    <qt6_migration_step>  Add 'QRadioButton's (in a 'QButtonGroup') for 'Draw House Tiles' and 'Set House Exit' brush modes.</qt6_migration_step>
    <qt6_migration_step>  Connect signals: 'townCombo' changes filter 'houseList'. Button clicks trigger corresponding actions (opening 'EditHouseDialogQt', removing houses, initiating move). List selection and radio button changes update 'BrushStateService' with 'HouseBrush' or 'HouseExitBrush' and the selected house ID.</qt6_migration_step>
    <qt6_migration_step>Create 'EditHouseDialogQt : QDialog'.</qt6_migration_step>
    <qt6_migration_step>  Add controls: 'QLineEdit' for name, 'QComboBox' for town (populated from 'TownManager'), 'QSpinBox' for rent (non-negative), 'QSpinBox' for ID (1-65535), 'QCheckBox' for guildhall.</qt6_migration_step>
    <qt6_migration_step>  Implement 'loadHouse(const mapcore::House* house)' to populate dialog from a 'House' object copy.</qt6_migration_step>
    <qt6_migration_step>  Implement 'applyChanges(mapcore::House* house)' to validate inputs and save changes back to the 'House' object copy. Show 'QMessageBox' for validation errors (e.g., duplicate ID if changed, empty name).</qt6_migration_step>
    <qt6_migration_step>Create 'WaypointPaletteTab : QWidget' for the 'Waypoints' tab.</qt6_migration_step>
    <qt6_migration_step>  Add a 'QListWidget' ('waypointList'). Set 'Qt::ItemIsEditable' flag on items for in-place renaming.</qt6_migration_step>
    <qt6_migration_step>  Add 'QPushButton's: 'addWaypointButton', 'removeWaypointButton'.</qt6_migration_step>
    <qt6_migration_step>  Populate 'waypointList' from 'WaypointManager'. Store waypoint name or ID with items.</qt6_migration_step>
    <qt6_migration_step>  Connect signals: 'addWaypointButton' creates a new waypoint in 'WaypointManager', adds to list, and calls 'waypointList-&gt;editItem()'. 'removeWaypointButton' confirms and removes selected waypoints from 'WaypointManager' and list. 'waypointList::itemChanged' validates new name (unique, not empty) and updates 'WaypointManager'. 'waypointList::currentItemChanged' updates 'BrushStateService' with 'WaypointBrush' and selected waypoint.</qt6_migration_step>
    <qt6_migration_step>Ensure all lists update if underlying 'HouseManager', 'TownManager', or 'WaypointManager' data changes.</qt6_migration_step>
  </qt6_migration_steps>
  <definition_of_done>
    <element>The 'House' tab ('HousePaletteTab') in the main palette system is implemented and functional. 'townCombo' correctly lists towns and filters 'houseList'. 'houseList' displays house name, ID, and size. Supports multi-selection. 'addHouseButton' opens 'EditHouseDialogQt' to define a new house; on acceptance, the new house is added to data and UI. 'editHouseButton' opens 'EditHouseDialogQt' for the (single) selected house; on acceptance, changes are applied (via undo action later) and UI updated. Disabled for no/multiple selections. 'removeHouseButton' removes selected house(s) after confirmation, updating data and UI. House list context menu 'Move to Town...' correctly reassigns selected house(s) to a new town, updating data and UI. 'Draw House Tiles' and 'Set House Exit' radio buttons correctly switch the active brush mode and configure the global house brush via 'BrushStateService' using the selected house.</element>
    <element>The 'EditHouseDialogQt' is implemented and functional: Loads data from a 'House' object copy. Allows editing of name, town, rent, ID, and guildhall status. Validates input (unique ID if changed, non-empty name, non-negative rent). Applies changes to the 'House' object copy on 'OK'.</element>
    <element>The 'Waypoint' tab ('WaypointPaletteTab') in the main palette system is implemented and functional: 'waypointList' displays all waypoints. Waypoint names are editable in-place. 'addWaypointButton' creates a new waypoint with a unique default name, adds it to data and list, and initiates name editing. 'removeWaypointButton' removes selected waypoint(s) after confirmation, updating data and UI. Editing a waypoint name in the list validates uniqueness and updates the underlying 'Waypoint' object.</element>
    <element>Selecting a waypoint in 'waypointList' configures and activates the global 'WaypointBrush' via 'BrushStateService' and navigates the map view to its location.</element>
    <element>House and Waypoint palette lists refresh if the underlying map data changes (e.g., new map loaded, undo/redo action).</element>
  </definition_of_done>
  <estimation_effort>Medium-High (12-18 developer days)</estimation_effort>
  <known_missing_files/>
  <boilerplate_coder_ai_prompt>Your task is to implement the Qt6 UI components for managing Houses and Waypoints, specifically their palette tabs to be hosted in 'UI-02`'s main palette system, and the 'EditHouseDialog'. These components will interact with 'HouseManager', 'TownManager', 'WaypointManager', and 'BrushStateService'.

**1. 'HousePaletteTab : QWidget'**
*   **Layout:** 'QVBoxLayout'.
*   **Controls:**
    *   'QComboBox* m_townCombo;'
    *   'QListWidget* m_houseList;' (Enable 'QAbstractItemView::ExtendedSelection')
    *   'QHBoxLayout' for buttons:
        *   'QPushButton* m_addHouseButton;' (&quot;Add House&quot;)
        *   'QPushButton* m_editHouseButton;' (&quot;Edit House&quot;)
        *   'QPushButton* m_removeHouseButton;' (&quot;Remove House&quot;)
    *   'QRadioButton* m_drawHouseTilesRadio;' (&quot;Draw House Tiles&quot;, checked by default)
    *   'QRadioButton* m_setHouseExitRadio;' (&quot;Set House Exit&quot;)
    *   (Group Radio Buttons: 'QButtonGroup* m_houseBrushModeGroup;')
*   **Functionality:**
    *   Constructor: Initialize UI. Populate 'm_townCombo' from 'TownManager' (include &quot;(No Town)&quot;). Connect signals.
    *   'void loadHousesForTown(int townId /or/ bool noTownSelected)': Clear and repopulate 'm_houseList' from 'HouseManager'. Display &quot;Name (ID: X, Size: Y sqm)&quot;. Store 'mapcore::House*' or its ID with each 'QListWidgetItem'. Sort list.
    *   Slots for button clicks:
        *   'onAddHouse()': Create new 'mapcore::House' (default values, unique ID). Open 'EditHouseDialogQt'. If accepted, add to 'HouseManager', refresh list.
        *   'onEditHouse()': Get selected 'mapcore::House*' from 'm_houseList'. If one selected, create copy, open 'EditHouseDialogQt'. If accepted, apply changes to original (via 'HouseManager' for undo), refresh list.
        *   'onRemoveHouse()': Confirm. Remove selected house(s) from 'HouseManager', refresh list.
    *   'm_houseList' context menu (&quot;Move to Town...&quot;): Opens 'QInputDialog::getItem' with town names. Update 'townId' for selected house(s) via 'HouseManager'. Refresh list.
    *   Slots for 'm_houseList::itemSelectionChanged' and radio button toggles: Update 'BrushStateService' with active 'HouseBrush' or 'HouseExitBrush' and selected house data.

**2. 'EditHouseDialogQt : QDialog'**
*   Constructor: 'EditHouseDialogQt(QWidget* parent, mapcore::House* houseCopy, mapcore::TownManager* townManager);' (Store 'houseCopy' and 'townManager').
*   **Layout:** 'QFormLayout'.
*   **Controls:**
    *   'QLineEdit* m_nameEdit;'
    *   'QComboBox* m_townCombo;' (Populate from 'townManager', set current based on 'houseCopy-&gt;getTownId()')
    *   'QSpinBox* m_rentSpinBox;' (Min 0)
    *   'QSpinBox* m_idSpinBox;' (Min 1, Max 65535)
    *   'QCheckBox* m_guildhallCheck;'
    *   'QDialogButtonBox* m_buttonBox;' (OK, Cancel)
*   **Functionality:**
    *   'void loadData()': Populate controls from 'houseCopy'.
    *   'bool applyChanges()': Validate inputs (name not empty, ID unique if changed from original and not used by another house, rent &gt;=0). If valid, update 'houseCopy' fields. Return true if valid, false otherwise (show 'QMessageBox' on error).
    *   Connect 'm_buttonBox-&gt;accepted' to a slot that calls 'applyChanges()' and then 'accept()' if true.

**3. 'WaypointPaletteTab : QWidget'**
*   **Layout:** 'QVBoxLayout'.
*   **Controls:**
    *   'QListWidget* m_waypointList;' (Set 'Qt::ItemIsEditable' on items).
    *   'QHBoxLayout' for buttons:
        *   'QPushButton* m_addWaypointButton;' (&quot;Add Waypoint&quot;)
        *   'QPushButton* m_removeWaypointButton;' (&quot;Remove Waypoint&quot;)
*   **Functionality:**
    *   Constructor: Initialize UI. Populate 'm_waypointList' from 'WaypointManager'. Store 'mapcore::Waypoint*' or name with 'QListWidgetItem'. Connect signals.
    *   'void reloadWaypoints()': Clear and repopulate 'm_waypointList'.
    *   Slots for button clicks:
        *   'onAddWaypoint()': Create new 'mapcore::Waypoint' (unique default name) via 'WaypointManager'. Add to list. Call 'm_waypointList-&gt;editItem()' on the new item.
        *   'onRemoveWaypoint()': Confirm. Remove selected waypoint(s) from 'WaypointManager', update list.
    *   Slot for 'm_waypointList::itemChanged(QListWidgetItem* item)': Get new name. Validate (not empty, unique). Update 'mapcore::Waypoint' via 'WaypointManager'.
    *   Slot for 'm_waypointList::currentItemChanged': Update 'BrushStateService' with 'WaypointBrush' and selected waypoint. Navigate map view to waypoint.

All: data modifications should ideally go through their respective managers ('HouseManager', 'WaypointManager') to handle undo/redo and data consistency.
</boilerplate_coder_ai_prompt>
</UI-07>
